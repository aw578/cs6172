user: git commit -m "start gvn, need to handle phis, available expressions"
user: add turnt --save tests/*.bridiff tests/cycles_hard.brisave tests/*.britests/*.britests/*.britests/*.britests/*.britests/*.britests/*.britests/*.bri
Usage: turnt [OPTIONS] [FILE]...
Try 'turnt -h' for help.
Error: Invalid value for '[FILE]...': Path 'tests/*.bril' does not exist.
cd cs6120/final/
cd cs6120/finalturnt tests/*.bril
1..9
not ok 1 - tests/aliases.bril # differing: tests/aliases.out
ok 2 - tests/basic.bril
not ok 3 - tests/commute.bril # differing: tests/commute.out
not ok 4 - tests/control.bril # differing: tests/control.out
not ok 5 - tests/cycles.bril # differing: tests/cycles.out
not ok 6 - tests/cycles_hard.bril # differing: tests/cycles_hard.out
ok 7 - tests/sensitivity.bril
not ok 8 - tests/transitive.bril # differing: tests/transitive.out
ok 9 - tests/unrelated.bril
turnt tests/*.bribril2json < {filename} | python gvn.ptests/transitive.bril
Congruence classes for function main:
Class const 0: ['x.0']
Class const 1: ['y.0']
Class const 2: ['z.0']
Class const 3: ['w.0']
Class add: ['a.0', 'b.0']
Class add_new: ['g.0', 'f.0']
Class add_new_new: ['d.0', 'e.0']
bril2json < tests/transitive.bril | python gvn.py
turnt tests/*.bri-tests/*.bri-tests/*.bridtests/*.briitests/*.briftests/*.briftests/*.bri tests/*.bri
1..9
--- tests/aliases.out2025-04-27 22:15:20.023473776 -0400
+++ /tmp/tmprkr42cmj2025-04-28 00:43:47.480167287 -0400
@@ -1,4 +1,4 @@
Congruence classes for function main:
Class const 7: ['a.0']
-Class id: ['d.0', 'b.0']
+Class id: ['b.0', 'd.0']
Class id_new: ['e.0', 'c.0']
not ok 1 - tests/aliases.bril # differing: tests/aliases.out
--- tests/basic.out2025-04-27 22:15:20.103473749 -0400
+++ /tmp/tmpjai44wl32025-04-28 00:43:47.570167262 -0400
@@ -1,3 +1,3 @@
Congruence classes for function main:
Class const 1: ['v2.0', 'v1.0']
-Class add: ['v3.0', 'v4.0']
+Class add: ['v4.0', 'v3.0']
not ok 2 - tests/basic.bril # differing: tests/basic.out
ok 3 - tests/commute.bril
--- tests/control.out2025-04-27 22:15:20.313473668 -0400
+++ /tmp/tmpo2glcxo72025-04-28 00:43:47.750167212 -0400
@@ -1,7 +1,6 @@
Congruence classes for function main:
-Class undef: ['x1.init', 'x2.init']
Class const 1: ['a0.0']
Class const 3: ['b0.0']
Class const True: ['cond.0']
-Class add: ['x1.0', 'y0.0', 'x2.0']
+Class add: ['y0.0', 'x2.0', 'x1.0']
Class get: ['x1.1', 'x2.1']
not ok 4 - tests/control.bril # differing: tests/control.out
--- tests/cycles.out2025-04-27 22:15:20.433473624 -0400
+++ /tmp/tmp18hn19032025-04-28 00:43:47.850167184 -0400
@@ -1,6 +1,5 @@
Congruence classes for function main:
-Class undef: ['c.init']
-Class const 0: ['y.0', 'a.0']
+Class const 0: ['a.0', 'y.0']
Class const 1: ['one.0']
Class const 10: ['ten.0']
Class id: ['x.0']
not ok 5 - tests/cycles.bril # differing: tests/cycles.out
--- tests/cycles_hard.out2025-04-27 22:15:20.523473587 -0400
+++ /tmp/tmph3oep0_82025-04-28 00:43:47.950167157 -0400
@@ -1,11 +1,10 @@
Congruence classes for function main:
-Class undef: ['p.init', 'c.init', 'q.init']
Class const 0: ['a.0']
Class const 1: ['one.0']
Class const 2: ['two.0']
Class const 10: ['ten.0']
Class id: ['y.0', 'x.0']
-Class get: ['x.1', 'q.0', 'p.0', 'c.0', 'y.1']
+Class get: ['y.1', 'p.0', 'x.1', 'q.0', 'c.0']
Class add: ['p.1']
Class lt: ['c.1']
Class id_new: ['x.2']
not ok 6 - tests/cycles_hard.bril # differing: tests/cycles_hard.out
ok 7 - tests/sensitivity.bril
ok 8 - tests/transitive.bril
ok 9 - tests/unrelated.bril
user: turnt --diff tests/*.bril
1..9
--- tests/aliases.out2025-04-27 22:15:20.023473776 -0400
+++ /tmp/tmpxmgvize_2025-04-28 00:44:28.620154816 -0400
@@ -1,4 +1,4 @@
Congruence classes for function main:
Class const 7: ['a.0']
-Class id: ['d.0', 'b.0']
-Class id_new: ['e.0', 'c.0']
+Class id: ['b.0', 'd.0']
+Class id_new: ['c.0', 'e.0']
not ok 1 - tests/aliases.bril # differing: tests/aliases.out
--- tests/basic.out2025-04-27 22:15:20.103473749 -0400
+++ /tmp/tmpa15d3r6v2025-04-28 00:44:28.710154790 -0400
@@ -1,3 +1,3 @@
Congruence classes for function main:
-Class const 1: ['v2.0', 'v1.0']
+Class const 1: ['v1.0', 'v2.0']
Class add: ['v3.0', 'v4.0']
not ok 2 - tests/basic.bril # differing: tests/basic.out
--- tests/commute.out2025-04-27 22:15:20.213473703 -0400
+++ /tmp/tmpvhdj8f712025-04-28 00:44:28.800154765 -0400
@@ -1,4 +1,4 @@
Congruence classes for function main:
Class const 1: ['x1.0']
Class const 2: ['x2.0']
-Class add: ['t2.0', 't1.0']
+Class add: ['t1.0', 't2.0']
not ok 3 - tests/commute.bril # differing: tests/commute.out
--- tests/control.out2025-04-27 22:15:20.313473668 -0400
+++ /tmp/tmpxkm4yzyf2025-04-28 00:44:28.900154735 -0400
@@ -1,7 +1,6 @@
Congruence classes for function main:
-Class undef: ['x1.init', 'x2.init']
Class const 1: ['a0.0']
Class const 3: ['b0.0']
Class const True: ['cond.0']
-Class add: ['x1.0', 'y0.0', 'x2.0']
+Class add: ['x1.0', 'x2.0', 'y0.0']
Class get: ['x1.1', 'x2.1']
not ok 4 - tests/control.bril # differing: tests/control.out
--- tests/cycles.out2025-04-27 22:15:20.433473624 -0400
+++ /tmp/tmpwpvvaa0q2025-04-28 00:44:28.990154709 -0400
@@ -1,12 +1,11 @@
Congruence classes for function main:
-Class undef: ['c.init']
-Class const 0: ['y.0', 'a.0']
+Class const 0: ['a.0', 'y.0']
Class const 1: ['one.0']
Class const 10: ['ten.0']
Class id: ['x.0']
Class add: ['not_y.0']
Class lt: ['not_c.0']
-Class get: ['x.1', 'y.1', 'c.0']
+Class get: ['c.0', 'x.1', 'y.1']
Class add_new: ['y.2']
Class id_new: ['x.2']
Class lt_new: ['c.1']
not ok 5 - tests/cycles.bril # differing: tests/cycles.out
--- tests/cycles_hard.out2025-04-27 22:15:20.523473587 -0400
+++ /tmp/tmpw745vfqv2025-04-28 00:44:29.090154679 -0400
@@ -1,11 +1,10 @@
Congruence classes for function main:
-Class undef: ['p.init', 'c.init', 'q.init']
Class const 0: ['a.0']
Class const 1: ['one.0']
Class const 2: ['two.0']
Class const 10: ['ten.0']
-Class id: ['y.0', 'x.0']
-Class get: ['x.1', 'q.0', 'p.0', 'c.0', 'y.1']
+Class id: ['x.0', 'y.0']
+Class get: ['c.0', 'p.0', 'q.0', 'x.1', 'y.1']
Class add: ['p.1']
Class lt: ['c.1']
Class id_new: ['x.2']
not ok 6 - tests/cycles_hard.bril # differing: tests/cycles_hard.out
ok 7 - tests/sensitivity.bril
--- tests/transitive.out2025-04-27 22:15:20.763473497 -0400
+++ /tmp/tmpopzr8amw2025-04-28 00:44:29.270154626 -0400
@@ -3,6 +3,6 @@
Class const 1: ['y.0']
Class const 2: ['z.0']
Class const 3: ['w.0']
-Class add: ['b.0', 'a.0']
+Class add: ['a.0', 'b.0']
Class add_new: ['f.0', 'g.0']
Class add_new_new: ['d.0', 'e.0']
not ok 8 - tests/transitive.bril # differing: tests/transitive.out
ok 9 - tests/unrelated.bril
turnt --diff tests/*.bribril2json < tests/transitive.bril | python gvn.py
turnt --diff tests/*.briturnt --diff tests/*.bribril2json < tests/transitive.bril | python gvn.py
turnt --diff tests/*.bri tests/*.bri tests/*.bri tests/*.bri tests/*.bris tests/*.bria tests/*.briv tests/*.brie tests/*.bri
1..9
not ok 1 - tests/aliases.bril # skip: updated tests/aliases.out; differing: tests/aliases.out
not ok 2 - tests/basic.bril # skip: updated tests/basic.out; differing: tests/basic.out
not ok 3 - tests/commute.bril # skip: updated tests/commute.out; differing: tests/commute.out
not ok 4 - tests/control.bril # skip: updated tests/control.out; differing: tests/control.out
not ok 5 - tests/cycles.bril # skip: updated tests/cycles.out; differing: tests/cycles.out
not ok 6 - tests/cycles_hard.bril # skip: updated tests/cycles_hard.out; differing: tests/cycles_hard.out
ok 7 - tests/sensitivity.bril
not ok 8 - tests/transitive.bril # skip: updated tests/transitive.out; differing: tests/transitive.out
ok 9 - tests/unrelated.bril
turnt --save tests/*.bri tests/*.britests/*.bri
1..9
ok 1 - tests/aliases.bril
ok 2 - tests/basic.bril
ok 3 - tests/commute.bril
ok 4 - tests/control.bril
ok 5 - tests/cycles.bril
ok 6 - tests/cycles_hard.bril
ok 7 - tests/sensitivity.bril
ok 8 - tests/transitive.bril
ok 9 - tests/unrelated.bril
user: turnt tests/*.bri--save tests/*.britests/*.bri--save tests/*.bridifbril2json < tests/transitive.bril | python gvn.pvn.pcontrol
Congruence classes for function main:
Class const 1: ['a0.0']
Class const 3: ['b0.0']
Class const True: ['cond.0']
Class add: ['x1.0', 'x2.0', 'y0.0']
Class get: ['x2.1']
Class get_new: ['x1.1']
bril2json < tests/control.bril | python gvn.py \| bril2txt
@main {
.entry:
x2.init: int = undef;
x1.init: int = undef;
a0.0: int = const 1;
b0.0: int = const 3;
cond.0: bool = const true;
br cond.0 .block1 .block2;
.block1:
x1.0: int = add a0.0 b0.0;
jmp .merge;
.block2:
x2.0: int = add a0.0 b0.0;
jmp .merge;
.merge:
x2.1: int = get x2.init x2.0;
x1.1: int = get x1.0 x1.init;
y0.0: int = add a0.0 b0.0;
ret;
}
bril2json < tests/control.bril | python gvn.py | bril2txt
bril2json < tests/control.bril | python gvn.py | bril2txt
@main {
.entry:
x2.init: int = undef;
x1.init: int = undef;
a0.0: int = const 1;
b0.0: int = const 3;
cond.0: bool = const true;
br cond.0 .block1 .block2;
.block1:
x1.0: int = add a0.0 b0.0;
jmp .merge;
.block2:
x2.0: int = add a0.0 b0.0;
jmp .merge;
.merge:
x2.1: int = phi x2.init x2.0 block1 block2;
x1.1: int = phi x1.0 x1.init block1 block2;
y0.0: int = add a0.0 b0.0;
ret;
}
bril2json < tests/control.bril | python gvn.py | bril2txycles
@main {
.b1:
c.init: bool = undef;
a.0: int = const 0;
one.0: int = const 1;
ten.0: int = const 10;
x.0: int = id a.0;
y.0: int = const 0;
not_y.0: int = add x.0 one.0;
not_c.0: bool = lt y.0 ten.0;
jmp .loop;
.loop:
y.1: int = phi y.0 y.2 b1 then;
x.1: int = phi x.0 x.2 b1 then;
c.0: bool = phi c.init c.1 b1 then;
y.2: int = add x.1 one.0;
c.1: bool = lt y.2 ten.0;
br c.1 .then .end;
.then:
x.2: int = id y.2;
jmp .loop;
.end:
ret;
}
bril2json < tests/cycles.bril | python gvn.py | bril2txontroycles
bril2json < tests/cycles.bril | python gvn.py | bril2txontroturnt tests/*.bri--save tests/*.bridiff
1..9
--- tests/aliases.out2025-04-28 00:44:49.660148778 -0400
+++ /tmp/tmpctp1xz4i2025-04-28 01:02:21.099844645 -0400
@@ -1,4 +1,54 @@
-Congruence classes for function main:
-Class const 7: ['a.0']
-Class id: ['b.0', 'd.0']
-Class id_new: ['c.0', 'e.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "a.0",
+          "op": "const",
+          "type": "int",
+          "value": 7
+        },
+        {
+          "args": [
+            "a.0"
+          ],
+          "dest": "b.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "b.0"
+          ],
+          "dest": "c.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "a.0"
+          ],
+          "dest": "d.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "b.0"
+          ],
+          "dest": "e.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 1 - tests/aliases.bril # differing: tests/aliases.out
--- tests/basic.out2025-04-28 00:44:49.750148752 -0400
+++ /tmp/tmp9y2ympdj2025-04-28 01:02:21.199844618 -0400
@@ -1,3 +1,46 @@
-Congruence classes for function main:
-Class const 1: ['v1.0', 'v2.0']
-Class add: ['v3.0', 'v4.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "v1.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "v2.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "args": [
+            "v1.0",
+            "v2.0"
+          ],
+          "dest": "v3.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "v1.0",
+            "v2.0"
+          ],
+          "dest": "v4.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 2 - tests/basic.bril # differing: tests/basic.out
--- tests/commute.out2025-04-28 00:44:49.840148728 -0400
+++ /tmp/tmpcborp5h62025-04-28 01:02:21.299844592 -0400
@@ -1,4 +1,46 @@
-Congruence classes for function main:
-Class const 1: ['x1.0']
-Class const 2: ['x2.0']
-Class add: ['t1.0', 't2.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "x1.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "x2.0",
+          "op": "const",
+          "type": "int",
+          "value": 2
+        },
+        {
+          "args": [
+            "x1.0",
+            "x2.0"
+          ],
+          "dest": "t1.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x2.0",
+            "x1.0"
+          ],
+          "dest": "t2.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 3 - tests/commute.bril # differing: tests/commute.out
--- tests/control.out2025-04-28 00:44:49.930148701 -0400
+++ /tmp/tmphxxbguaa2025-04-28 01:02:21.389844567 -0400
@@ -1,6 +1,124 @@
-Congruence classes for function main:
-Class const 1: ['a0.0']
-Class const 3: ['b0.0']
-Class const True: ['cond.0']
-Class add: ['x1.0', 'x2.0', 'y0.0']
-Class get: ['x1.1', 'x2.1']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "entry"
+        },
+        {
+          "dest": "x2.init",
+          "op": "undef",
+          "type": "int"
+        },
+        {
+          "dest": "x1.init",
+          "op": "undef",
+          "type": "int"
+        },
+        {
+          "dest": "a0.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "b0.0",
+          "op": "const",
+          "type": "int",
+          "value": 3
+        },
+        {
+          "dest": "cond.0",
+          "op": "const",
+          "type": "bool",
+          "value": true
+        },
+        {
+          "args": [
+            "cond.0"
+          ],
+          "labels": [
+            "block1",
+            "block2"
+          ],
+          "op": "br"
+        },
+        {
+          "label": "block1"
+        },
+        {
+          "args": [
+            "a0.0",
+            "b0.0"
+          ],
+          "dest": "x1.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "labels": [
+            "merge"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "block2"
+        },
+        {
+          "args": [
+            "a0.0",
+            "b0.0"
+          ],
+          "dest": "x2.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "labels": [
+            "merge"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "merge"
+        },
+        {
+          "args": [
+            "x2.init",
+            "x2.0",
+            "block1",
+            "block2"
+          ],
+          "dest": "x2.1",
+          "op": "phi",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x1.0",
+            "x1.init",
+            "block1",
+            "block2"
+          ],
+          "dest": "x1.1",
+          "op": "phi",
+          "type": "int"
+        },
+        {
+          "args": [
+            "a0.0",
+            "b0.0"
+          ],
+          "dest": "y0.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 4 - tests/control.bril # differing: tests/control.out
--- tests/cycles.out2025-04-28 00:44:50.020148677 -0400
+++ /tmp/tmp0r21s2l72025-04-28 01:02:21.489844539 -0400
@@ -1,11 +1,160 @@
-Congruence classes for function main:
-Class const 0: ['a.0', 'y.0']
-Class const 1: ['one.0']
-Class const 10: ['ten.0']
-Class id: ['x.0']
-Class add: ['not_y.0']
-Class lt: ['not_c.0']
-Class get: ['c.0', 'x.1', 'y.1']
-Class add_new: ['y.2']
-Class id_new: ['x.2']
-Class lt_new: ['c.1']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "c.init",
+          "op": "undef",
+          "type": "bool"
+        },
+        {
+          "dest": "a.0",
+          "op": "const",
+          "type": "int",
+          "value": 0
+        },
+        {
+          "dest": "one.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "ten.0",
+          "op": "const",
+          "type": "int",
+          "value": 10
+        },
+        {
+          "args": [
+            "a.0"
+          ],
+          "dest": "x.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "dest": "y.0",
+          "op": "const",
+          "type": "int",
+          "value": 0
+        },
+        {
+          "args": [
+            "x.0",
+            "one.0"
+          ],
+          "dest": "not_y.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "y.0",
+            "ten.0"
+          ],
+          "dest": "not_c.0",
+          "op": "lt",
+          "type": "bool"
+        },
+        {
+          "labels": [
+            "loop"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "loop"
+        },
+        {
+          "args": [
+            "y.0",
+            "y.2",
+            "b1",
+            "then"
+          ],
+          "dest": "y.1",
+          "op": "phi",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x.0",
+            "x.2",
+            "b1",
+            "then"
+          ],
+          "dest": "x.1",
+          "op": "phi",
+          "type": "int"
+        },
+        {
+          "args": [
+            "c.init",
+            "c.1",
+            "b1",
+            "then"
+          ],
+          "dest": "c.0",
+          "op": "phi",
+          "type": "bool"
+        },
+        {
+          "args": [
+            "x.1",
+            "one.0"
+          ],
+          "dest": "y.2",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "y.2",
+            "ten.0"
+          ],
+          "dest": "c.1",
+          "op": "lt",
+          "type": "bool"
+        },
+        {
+          "args": [
+            "c.1"
+          ],
+          "labels": [
+            "then",
+            "end"
+          ],
+          "op": "br"
+        },
+        {
+          "label": "then"
+        },
+        {
+          "args": [
+            "y.2"
+          ],
+          "dest": "x.2",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "labels": [
+            "loop"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "end"
+        },
+        {
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 5 - tests/cycles.bril # differing: tests/cycles.out
--- tests/cycles_hard.out2025-04-28 00:44:50.110148650 -0400
+++ /tmp/tmp8xfg5w_j2025-04-28 01:02:21.589844517 -0400
@@ -1,12 +1,199 @@
-Congruence classes for function main:
-Class const 0: ['a.0']
-Class const 1: ['one.0']
-Class const 2: ['two.0']
-Class const 10: ['ten.0']
-Class id: ['x.0', 'y.0']
-Class get: ['c.0', 'p.0', 'q.0', 'x.1', 'y.1']
-Class add: ['p.1']
-Class lt: ['c.1']
-Class id_new: ['x.2']
-Class add_new: ['q.1']
-Class id_new_new: ['y.2']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "q.init",
+          "op": "undef",
+          "type": "int"
+        },
+        {
+          "dest": "p.init",
+          "op": "undef",
+          "type": "int"
+        },
+        {
+          "dest": "c.init",
+          "op": "undef",
+          "type": "bool"
+        },
+        {
+          "dest": "a.0",
+          "op": "const",
+          "type": "int",
+          "value": 0
+        },
+        {
+          "dest": "one.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "two.0",
+          "op": "const",
+          "type": "int",
+          "value": 2
+        },
+        {
+          "dest": "ten.0",
+          "op": "const",
+          "type": "int",
+          "value": 10
+        },
+        {
+          "args": [
+            "a.0"
+          ],
+          "dest": "x.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "a.0"
+          ],
+          "dest": "y.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "labels": [
+            "loop"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "loop"
+        },
+        {
+          "args": [
+            "y.0",
+            "y.2",
+            "b1",
+            "then"
+          ],
+          "dest": "y.1",
+          "op": "phi",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x.0",
+            "x.2",
+            "b1",
+            "then"
+          ],
+          "dest": "x.1",
+          "op": "phi",
+          "type": "int"
+        },
+        {
+          "args": [
+            "q.init",
+            "q.1",
+            "b1",
+            "then"
+          ],
+          "dest": "q.0",
+          "op": "phi",
+          "type": "int"
+        },
+        {
+          "args": [
+            "p.init",
+            "p.1",
+            "b1",
+            "then"
+          ],
+          "dest": "p.0",
+          "op": "phi",
+          "type": "int"
+        },
+        {
+          "args": [
+            "c.init",
+            "c.1",
+            "b1",
+            "then"
+          ],
+          "dest": "c.0",
+          "op": "phi",
+          "type": "bool"
+        },
+        {
+          "args": [
+            "x.1",
+            "one.0"
+          ],
+          "dest": "p.1",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "y.1",
+            "two.0"
+          ],
+          "dest": "q.1",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "p.1",
+            "ten.0"
+          ],
+          "dest": "c.1",
+          "op": "lt",
+          "type": "bool"
+        },
+        {
+          "args": [
+            "c.1"
+          ],
+          "labels": [
+            "then",
+            "end"
+          ],
+          "op": "br"
+        },
+        {
+          "label": "then"
+        },
+        {
+          "args": [
+            "p.1"
+          ],
+          "dest": "x.2",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "q.1"
+          ],
+          "dest": "y.2",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "labels": [
+            "loop"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "end"
+        },
+        {
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 6 - tests/cycles_hard.bril # differing: tests/cycles_hard.out
--- tests/sensitivity.out2025-04-27 22:15:20.653473542 -0400
+++ /tmp/tmp3x7752oz2025-04-28 01:02:21.689844494 -0400
@@ -1,5 +1,46 @@
-Congruence classes for function main:
-Class const 1: ['x1.0']
-Class const 2: ['x2.0']
-Class sub: ['t3.0']
-Class sub_new: ['t4.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "x1.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "x2.0",
+          "op": "const",
+          "type": "int",
+          "value": 2
+        },
+        {
+          "args": [
+            "x1.0",
+            "x2.0"
+          ],
+          "dest": "t3.0",
+          "op": "sub",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x2.0",
+            "x1.0"
+          ],
+          "dest": "t4.0",
+          "op": "sub",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 7 - tests/sensitivity.bril # differing: tests/sensitivity.out
--- tests/transitive.out2025-04-28 00:44:50.290148599 -0400
+++ /tmp/tmpl9cukbr52025-04-28 01:02:21.779844473 -0400
@@ -1,8 +1,94 @@
-Congruence classes for function main:
-Class const 0: ['x.0']
-Class const 1: ['y.0']
-Class const 2: ['z.0']
-Class const 3: ['w.0']
-Class add: ['a.0', 'b.0']
-Class add_new: ['f.0', 'g.0']
-Class add_new_new: ['d.0', 'e.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "x.0",
+          "op": "const",
+          "type": "int",
+          "value": 0
+        },
+        {
+          "dest": "y.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "z.0",
+          "op": "const",
+          "type": "int",
+          "value": 2
+        },
+        {
+          "dest": "w.0",
+          "op": "const",
+          "type": "int",
+          "value": 3
+        },
+        {
+          "args": [
+            "x.0",
+            "y.0"
+          ],
+          "dest": "a.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x.0",
+            "y.0"
+          ],
+          "dest": "b.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "a.0",
+            "z.0"
+          ],
+          "dest": "d.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "b.0",
+            "z.0"
+          ],
+          "dest": "e.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "d.0",
+            "w.0"
+          ],
+          "dest": "f.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "e.0",
+            "w.0"
+          ],
+          "dest": "g.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 8 - tests/transitive.bril # differing: tests/transitive.out
--- tests/unrelated.out2025-04-27 22:15:20.813473480 -0400
+++ /tmp/tmpy9ecv3632025-04-28 01:02:21.869844453 -0400
@@ -1,6 +1,55 @@
-Congruence classes for function main:
-Class const 1: ['x1.0']
-Class const 2: ['x2.0']
-Class add: ['t1.0']
-Class add_new: ['t3.0']
-Class add_new_new: ['t4.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "x1.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "x2.0",
+          "op": "const",
+          "type": "int",
+          "value": 2
+        },
+        {
+          "args": [
+            "x1.0",
+            "x2.0"
+          ],
+          "dest": "t1.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x1.0",
+            "t1.0"
+          ],
+          "dest": "t3.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "t1.0",
+            "x2.0"
+          ],
+          "dest": "t4.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 9 - tests/unrelated.bril # differing: tests/unrelated.out
turnt --diff tests/*.bril
1..9
ok 1 - tests/aliases.bril
ok 2 - tests/basic.bril
ok 3 - tests/commute.bril
--- tests/control.out2025-04-28 00:44:49.930148701 -0400
+++ /tmp/tmpklxpd2c_2025-04-28 01:02:28.639842904 -0400
@@ -3,4 +3,5 @@
Class const 3: ['b0.0']
Class const True: ['cond.0']
Class add: ['x1.0', 'x2.0', 'y0.0']
-Class get: ['x1.1', 'x2.1']
+Class phi: ['x2.1']
+Class phi_new: ['x1.1']
not ok 4 - tests/control.bril # differing: tests/control.out
--- tests/cycles.out2025-04-28 00:44:50.020148677 -0400
+++ /tmp/tmp3qn2317_2025-04-28 01:02:28.739842881 -0400
@@ -5,7 +5,8 @@
Class id: ['x.0']
Class add: ['not_y.0']
Class lt: ['not_c.0']
-Class get: ['c.0', 'x.1', 'y.1']
+Class phi: ['x.1']
Class add_new: ['y.2']
Class id_new: ['x.2']
Class lt_new: ['c.1']
+Class phi_new: ['c.0']
not ok 5 - tests/cycles.bril # differing: tests/cycles.out
--- tests/cycles_hard.out2025-04-28 00:44:50.110148650 -0400
+++ /tmp/tmpdvmpubat2025-04-28 01:02:28.829842860 -0400
@@ -4,9 +4,11 @@
Class const 2: ['two.0']
Class const 10: ['ten.0']
Class id: ['x.0', 'y.0']
-Class get: ['c.0', 'p.0', 'q.0', 'x.1', 'y.1']
+Class phi: ['x.1']
Class add: ['p.1']
Class lt: ['c.1']
+Class phi_new: ['y.1']
Class id_new: ['x.2']
Class add_new: ['q.1']
Class id_new_new: ['y.2']
+Class phi_new_new: ['q.0']
not ok 6 - tests/cycles_hard.bril # differing: tests/cycles_hard.out
ok 7 - tests/sensitivity.bril
ok 8 - tests/transitive.bril
ok 9 - tests/unrelated.bril
bril2json < {filename} | python gvn.ptests/cycles.bril
Congruence classes for function main:
Class const 0: ['a.0', 'y.0']
Class const 1: ['one.0']
Class const 10: ['ten.0']
Class id: ['x.0']
Class add: ['not_y.0']
Class lt: ['not_c.0']
Class phi: ['x.1']
Class add_new: ['y.2']
Class id_new: ['x.2']
Class lt_new: ['c.1']
Class phi_new: ['c.0']
bril2json < tests/cycles.bril | python gvn.py
{
"functions": [
{
"instrs": [
{
"label": "b1"
},
{
"dest": "c.init",
"op": "undef",
"type": "bool"
},
{
"dest": "a.0",
"op": "const",
"type": "int",
"value": 0
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"dest": "ten.0",
"op": "const",
"type": "int",
"value": 10
},
{
"args": [
"a.0"
],
"dest": "x.0",
"op": "id",
"type": "int"
},
{
"dest": "y.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"x.0",
"one.0"
],
"dest": "not_y.0",
"op": "add",
"type": "int"
},
{
"args": [
"y.0",
"ten.0"
],
"dest": "not_c.0",
"op": "lt",
"type": "bool"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "loop"
},
{
"args": [
"y.0",
"y.2",
"b1",
"then"
],
"dest": "y.1",
"op": "phi",
"type": "int"
},
{
"args": [
"x.0",
"x.2",
"b1",
"then"
],
"dest": "x.1",
"op": "phi",
"type": "int"
},
{
"args": [
"c.init",
"c.1",
"b1",
"then"
],
"dest": "c.0",
"op": "phi",
"type": "bool"
},
{
"args": [
"x.1",
"one.0"
],
"dest": "y.2",
"op": "add",
"type": "int"
},
{
"args": [
"y.2",
"ten.0"
],
"dest": "c.1",
"op": "lt",
"type": "bool"
},
{
"args": [
"c.1"
],
"labels": [
"then",
"end"
],
"op": "br"
},
{
"label": "then"
},
{
"args": [
"y.2"
],
"dest": "x.2",
"op": "id",
"type": "int"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "end"
},
{
"op": "ret"
}
],
"name": "main"
}
]
}
bril2json < tests/cycles.bril | python gvn.py | bril2txt
@main {
.b1:
c.init: bool = undef;
a.0: int = const 0;
one.0: int = const 1;
ten.0: int = const 10;
x.0: int = id a.0;
y.0: int = const 0;
not_y.0: int = add x.0 one.0;
not_c.0: bool = lt y.0 ten.0;
jmp .loop;
.loop:
y.1: int = phi y.0 y.2 b1 then;
x.1: int = phi x.0 x.2 b1 then;
c.0: bool = phi c.init c.1 b1 then;
y.2: int = add x.1 one.0;
c.1: bool = lt y.2 ten.0;
br c.1 .then .end;
.then:
x.2: int = id y.2;
jmp .loop;
.end:
ret;
}
bril2json < tests/cycles.bril | python gvn.py | bril2tx | bril2txt
bril2json < tests/cycles.bril | python gvn.py | bril2tx
Congruence classes for function main:
Class const 0: ['a.0', 'y.0']
Class const 1: ['one.0']
Class const 10: ['ten.0']
Class id: ['x.0']
Class add: ['not_y.0']
Class lt: ['not_c.0']
Class phi: ['x.1']
Class add_new: ['y.2']
Class id_new: ['x.2']
Class lt_new: ['c.1']
Class phi_new: ['c.0']
AAbril2json < tests/cycles.bril | python gvn.py
[{'y.0', 'a.0'}, {'one.0'}, {'ten.0'}, {'x.2', 'x.0'}, {'not_y.0', 'y.2'}, {'c.1', 'not_c.0'}, {'x.1', 'c.0', 'y.1'}]
Congruence classes for function main:
Class const 0: ['a.0', 'y.0']
Class const 1: ['one.0']
Class const 10: ['ten.0']
Class id: ['x.0']
Class add: ['not_y.0']
Class lt: ['not_c.0']
Class phi: ['x.1']
Class add_new: ['y.2']
Class id_new: ['x.2']
Class lt_new: ['c.1']
Class phi_new: ['c.0']
bril2json < tests/cycles.bril | python gvn.py
[{'a.0', 'y.0'}, {'one.0'}, {'ten.0'}, {'x.0', 'x.2'}, {'y.2', 'not_y.0'}, {'not_c.0', 'c.1'}, {'y.1', 'x.1', 'c.0'}]
defaultdict(<class 'set'>, {'const 0': {'a.0', 'y.0'}, 'const 1': {'one.0'}, 'const 10': {'ten.0'}, 'id': {'x.0', 'x.2'}, 'add': {'not_y.0'}, 'lt': {'not_c.0', 'c.1'}, 'phi': {'y.1', 'x.1', 'c.0'}, 'add_new': {'y.2'}})
defaultdict(<class 'set'>, {'const 0': {'a.0', 'y.0'}, 'const 1': {'one.0'}, 'const 10': {'ten.0'}, 'id': {'x.0'}, 'add': {'not_y.0'}, 'lt': {'not_c.0', 'c.1'}, 'phi': {'y.1', 'x.1', 'c.0'}, 'add_new': {'y.2'}, 'id_new': {'x.2'}})
defaultdict(<class 'set'>, {'const 0': {'a.0', 'y.0'}, 'const 1': {'one.0'}, 'const 10': {'ten.0'}, 'id': {'x.0'}, 'add': {'not_y.0'}, 'lt': {'not_c.0'}, 'phi': {'y.1', 'x.1', 'c.0'}, 'add_new': {'y.2'}, 'id_new': {'x.2'}, 'lt_new': {'c.1'}})
defaultdict(<class 'set'>, {'const 0': {'a.0', 'y.0'}, 'const 1': {'one.0'}, 'const 10': {'ten.0'}, 'id': {'x.0'}, 'add': {'not_y.0'}, 'lt': {'not_c.0'}, 'phi': {'x.1', 'c.0'}, 'add_new': {'y.2'}, 'id_new': {'x.2'}, 'lt_new': {'c.1'}, 'phi_new': {'y.1'}})
defaultdict(<class 'set'>, {'const 0': {'a.0', 'y.0'}, 'const 1': {'one.0'}, 'const 10': {'ten.0'}, 'id': {'x.0'}, 'add': {'not_y.0'}, 'lt': {'not_c.0'}, 'phi': {'x.1'}, 'add_new': {'y.2'}, 'id_new': {'x.2'}, 'lt_new': {'c.1'}, 'phi_new': {'c.0'}})
Congruence classes for function main:
Class const 0: ['a.0', 'y.0']
Class const 1: ['one.0']
Class const 10: ['ten.0']
Class id: ['x.0']
Class add: ['not_y.0']
Class lt: ['not_c.0']
Class phi: ['x.1']
Class add_new: ['y.2']
Class id_new: ['x.2']
Class lt_new: ['c.1']
Class phi_new: ['c.0']
bril2json < tests/cycles.bril | python gvn.pbril2json < tests/cycles.bril | python gvn.py
/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (2.2.3) or chardet (3.0.4) doesn't match a supported version!
warnings.warn("urllib3 ({}) or chardet ({}) doesn't match a supported "
Traceback (most recent call last):
File "gvn.py", line 89, in <module>
main()
File "gvn.py", line 76, in main
congruence_classes = find_congruence_classes(func)
File "gvn.py", line 35, in find_congruence_classes
id_counter = defaultdict(0)
TypeError: first argument must be callable or None
bril2json < tests/cycles.bril | python gvn.py
Congruence classes for function main:
Class const 0: ['a.0', 'y.0']
Class const 1: ['one.0']
Class const 10: ['ten.0']
Class id: ['x.0']
Class add: ['not_y.0']
Class lt: ['not_c.0']
Class phi: ['x.1']
Class add_0: ['y.2']
Class id_0: ['x.2']
Class lt_0: ['c.1']
Class phi_0: ['y.1']
Class phi_1: ['c.0']
bril2json < tests/cycles.bril | python gvn.py | bril2txturnt --diff tests/*.bribril2json < tests/cycles.bril | python gvn.py | bril2txt
turnt --diff tests/*.bril
1..9
--- tests/aliases.out2025-04-28 00:44:49.660148778 -0400
+++ /tmp/tmpolq0aigi2025-04-28 01:10:43.349700829 -0400
@@ -1,4 +1,4 @@
Congruence classes for function main:
Class const 7: ['a.0']
Class id: ['b.0', 'd.0']
-Class id_new: ['c.0', 'e.0']
+Class id_0: ['c.0', 'e.0']
not ok 1 - tests/aliases.bril # differing: tests/aliases.out
ok 2 - tests/basic.bril
ok 3 - tests/commute.bril
--- tests/control.out2025-04-28 00:44:49.930148701 -0400
+++ /tmp/tmpobda8dcb2025-04-28 01:10:43.619700753 -0400
@@ -3,4 +3,5 @@
Class const 3: ['b0.0']
Class const True: ['cond.0']
Class add: ['x1.0', 'x2.0', 'y0.0']
-Class get: ['x1.1', 'x2.1']
+Class phi: ['x2.1']
+Class phi_0: ['x1.1']
not ok 4 - tests/control.bril # differing: tests/control.out
--- tests/cycles.out2025-04-28 00:44:50.020148677 -0400
+++ /tmp/tmp_x_ljix92025-04-28 01:10:43.719700724 -0400
@@ -5,7 +5,9 @@
Class id: ['x.0']
Class add: ['not_y.0']
Class lt: ['not_c.0']
-Class get: ['c.0', 'x.1', 'y.1']
-Class add_new: ['y.2']
-Class id_new: ['x.2']
-Class lt_new: ['c.1']
+Class phi: ['x.1']
+Class add_0: ['y.2']
+Class id_0: ['x.2']
+Class lt_0: ['c.1']
+Class phi_0: ['y.1']
+Class phi_1: ['c.0']
not ok 5 - tests/cycles.bril # differing: tests/cycles.out
--- tests/cycles_hard.out2025-04-28 00:44:50.110148650 -0400
+++ /tmp/tmp9kdgl9ye2025-04-28 01:10:43.819700696 -0400
@@ -4,9 +4,13 @@
Class const 2: ['two.0']
Class const 10: ['ten.0']
Class id: ['x.0', 'y.0']
-Class get: ['c.0', 'p.0', 'q.0', 'x.1', 'y.1']
+Class phi: ['x.1']
Class add: ['p.1']
Class lt: ['c.1']
-Class id_new: ['x.2']
-Class add_new: ['q.1']
-Class id_new_new: ['y.2']
+Class phi_0: ['c.0']
+Class id_0: ['x.2']
+Class phi_1: ['p.0']
+Class add_0: ['q.1']
+Class id_0_0: ['y.2']
+Class phi_1_0: ['q.0']
+Class phi_2: ['y.1']
not ok 6 - tests/cycles_hard.bril # differing: tests/cycles_hard.out
--- tests/sensitivity.out2025-04-27 22:15:20.653473542 -0400
+++ /tmp/tmpw_h35im72025-04-28 01:10:43.909700672 -0400
@@ -2,4 +2,4 @@
Class const 1: ['x1.0']
Class const 2: ['x2.0']
Class sub: ['t3.0']
-Class sub_new: ['t4.0']
+Class sub_0: ['t4.0']
not ok 7 - tests/sensitivity.bril # differing: tests/sensitivity.out
--- tests/transitive.out2025-04-28 00:44:50.290148599 -0400
+++ /tmp/tmpzp2bv1ah2025-04-28 01:10:43.999700645 -0400
@@ -4,5 +4,5 @@
Class const 2: ['z.0']
Class const 3: ['w.0']
Class add: ['a.0', 'b.0']
-Class add_new: ['f.0', 'g.0']
-Class add_new_new: ['d.0', 'e.0']
+Class add_0: ['f.0', 'g.0']
+Class add_0_0: ['d.0', 'e.0']
not ok 8 - tests/transitive.bril # differing: tests/transitive.out
--- tests/unrelated.out2025-04-27 22:15:20.813473480 -0400
+++ /tmp/tmpbuqoztvt2025-04-28 01:10:44.099700618 -0400
@@ -2,5 +2,5 @@
Class const 1: ['x1.0']
Class const 2: ['x2.0']
Class add: ['t1.0']
-Class add_new: ['t3.0']
-Class add_new_new: ['t4.0']
+Class add_0: ['t3.0']
+Class add_0_0: ['t4.0']
not ok 9 - tests/unrelated.bril # differing: tests/unrelated.out
turnt --diff tests/*.bri tests/*.bri tests/*.bri tests/*.bri tests/*.bris tests/*.bria tests/*.briv tests/*.brie tests/*.bri
1..9
not ok 1 - tests/aliases.bril # skip: updated tests/aliases.out; differing: tests/aliases.out
ok 2 - tests/basic.bril
ok 3 - tests/commute.bril
not ok 4 - tests/control.bril # skip: updated tests/control.out; differing: tests/control.out
not ok 5 - tests/cycles.bril # skip: updated tests/cycles.out; differing: tests/cycles.out
not ok 6 - tests/cycles_hard.bril # skip: updated tests/cycles_hard.out; differing: tests/cycles_hard.out
not ok 7 - tests/sensitivity.bril # skip: updated tests/sensitivity.out; differing: tests/sensitivity.out
not ok 8 - tests/transitive.bril # skip: updated tests/transitive.out; differing: tests/transitive.out
not ok 9 - tests/unrelated.bril # skip: updated tests/unrelated.out; differing: tests/unrelated.out
turnt --save tests/*.bridifsavdifbril2json < tests/cycles.bril | python gvn.py | bril2txturnt --diff tests/*.brisavturnt --save tests/*.bridifbril2json < tests/cycles.bril | python gvn.py | bril2tx | bril2tx | bril2txt
@main {
.b1:
c.init: bool = undef;
a.0: int = const 0;
one.0: int = const 1;
ten.0: int = const 10;
x.0: int = id a.0;
a.0: int = const 0;
not_y.0: int = add one.0 x.0;
not_c.0: bool = lt a.0 ten.0;
jmp .loop;
.loop:
y.1: int = phi a.0 y.2 b1 then;
x.1: int = phi x.0 x.2 b1 then;
c.0: bool = phi c.init c.1 b1 then;
y.2: int = add one.0 x.1;
c.1: bool = lt y.2 ten.0;
br c.1 .then .end;
.then:
x.2: int = id y.2;
jmp .loop;
.end:
ret;
}
bril2json < tests/cycles.bril | python gvn.py | bril2txt
bril2json < tests/cycles.bril | python gvn.py | bril2txt
bril2json < tests/cycles.bril | python gvn.py | bril2txt
@main {
.b1:
c.init: bool = undef;
a.0: int = const 0;
one.0: int = const 1;
ten.0: int = const 10;
x.0: int = id a.0;
a.0: int = const 0;
not_y.0: int = add one.0 x.0;
not_c.0: bool = lt a.0 ten.0;
y.1: int = id a.0;
x.1: int = id x.0;
c.0: bool = id c.init;
jmp .loop;
.loop:
y.2: int = add one.0 x.1;
c.1: bool = lt y.2 ten.0;
br c.1 .then .end;
.then:
x.2: int = id y.2;
y.1: int = id y.2;
x.1: int = id x.2;
c.0: bool = id c.1;
jmp .loop;
.end:
ret;
}
bril2json < tests/cycles.bril | python gvn.py | bril2txt
bril2json < tests/cycles.bril | python gvn.py | bril2txt
@main {
.b1:
c.init: bool = undef;
a.0: int = const 0;
one.0: int = const 1;
ten.0: int = const 10;
x.0: int = id a.0;
y.0: int = const 0;
not_y.0: int = add x.0 one.0;
not_c.0: bool = lt y.0 ten.0;
jmp .loop;
.loop:
y.1: int = phi y.0 y.2 b1 then;
x.1: int = phi x.0 x.2 b1 then;
c.0: bool = phi c.init c.1 b1 then;
y.2: int = add x.1 one.0;
c.1: bool = lt y.2 ten.0;
br c.1 .then .end;
.then:
x.2: int = id y.2;
jmp .loop;
.end:
ret;
}
bril2json < tests/cycles.bril | python gvn.py | bril2txt
@main {
.b1:
c.init: bool = undef;
a.0: int = const 0;
one.0: int = const 1;
ten.0: int = const 10;
x.0: int = id a.0;
y.0: int = const 0;
not_y.0: int = add x.0 one.0;
not_c.0: bool = lt y.0 ten.0;
set c.0 c.init;
set x.1 x.0;
set y.1 y.0;
jmp .loop;
.loop:
y.1: int = get;
x.1: int = get;
c.0: bool = get;
y.2: int = add x.1 one.0;
c.1: bool = lt y.2 ten.0;
br c.1 .then .end;
.then:
x.2: int = id y.2;
set c.0 c.1;
set x.1 x.2;
set y.1 y.2;
jmp .loop;
.end:
ret;
}
bril2json < tests/cycles.bril | python gvn.py | bril2txt
@main {
.b1:
c.init: bool = undef;
a.0: int = const 0;
one.0: int = const 1;
ten.0: int = const 10;
x.0: int = id a.0;
a.0: int = const 0;
not_y.0: int = add one.0 x.0;
not_c.0: bool = lt a.0 ten.0;
y.1: int = id a.0;
x.1: int = id x.0;
c.0: bool = id c.init;
jmp .loop;
.loop:
y.2: int = add one.0 x.1;
c.1: bool = lt y.2 ten.0;
br c.1 .then .end;
.then:
x.2: int = id y.2;
y.1: int = id y.2;
x.1: int = id x.2;
c.0: bool = id c.1;
jmp .loop;
.end:
ret;
}
bril2json < tests/cycles.bril | python gvn.py | bril2txt
cd ../..
sh cs6120/final/test_gvn.sh
benchmarks/core/ackermann.bril
FAIL (out) benchmarks/core/ackermann.bril 509
benchmarks/core/armstrong.bril
benchmarks/core/bbs.bril
benchmarks/core/binary-fmt.bril
benchmarks/core/binpow.bril
benchmarks/core/bitshift.bril
FAIL (out) benchmarks/core/bitshift.bril 96
625 80
0
benchmarks/core/bitwise-ops.bril
benchmarks/core/catalan.bril
benchmarks/core/check-primes.bril
benchmarks/core/collatz.bril
benchmarks/core/combination.bril
FAIL (out) benchmarks/core/combination.bril 220 0
benchmarks/core/delannoy.bril
^C
sh cs6120/final/test_gvn.shsh cs6120/final/test_single.sh ackerexamples/cfbenchmarks/core/ackermann.bril
cs6120/final/test_single.sh: 20: cannot open : No such file
cs6120/final/test_single.sh: 21: cannot open : No such file
/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (2.2.3) or chardet (3.0.4) doesn't match a supported version!
warnings.warn("urllib3 ({}) or chardet ({}) doesn't match a supported "
Traceback (most recent call last):
File "cs6120/final/gvn.py", line 103, in <module>
main()
File "cs6120/final/gvn.py", line 66, in main
bril_program = json.loads(program_str)
File "/usr/lib/python3.8/json/__init__.py", line 357, in loads
return _default_decoder.decode(s)
File "/usr/lib/python3.8/json/decoder.py", line 337, in decode
obj, end = self.raw_decode(s, idx=_w(s, 0).end())
File "/usr/lib/python3.8/json/decoder.py", line 355, in raw_decode
raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
sh cs6120/final/test_single.sh benchmarks/core/ackermann.bril
509
bril2json < "$bril_file" | python cs6120/final/gvn.py | brili -p $args 2>/dev/nulbenchmarks/core/ackermann.bril
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | brili -p $args 2>/dev/nuls
A new release of Deno is available: 2.1.7 → 2.2.11 Run `deno upgrade` to install it.
error: mismatched main argument arity: expected 2; got 0
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | brili -p $arg2txt
@ack(m: int, n: int): int {
.b1:
zero.0: int = const 0;
one.0: int = const 1;
cond_m.0: bool = eq m zero.0;
br cond_m.0 .m_zero .m_nonzero;
.m_zero:
tmp.1: int = add n one.0;
ret tmp.1;
.m_nonzero:
cond_m.0: bool = eq n zero.0;
br cond_m.0 .n_zero .n_nonzero;
.n_zero:
m1.0: int = sub m one.0;
tmp.0: int = call @ack m1.0 one.0;
ret tmp.0;
.n_nonzero:
m1.0: int = sub m one.0;
m1.0: int = sub n one.0;
t1.0: int = call @ack m m1.0;
t2.0: int = call @ack m1.0 t1.0;
ret t2.0;
}
@main(m: int, n: int) {
.b1:
tmp.0: int = call @ack m n;
print tmp.0;
ret;
}
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | bril2txi -p $arg3 6
error: Uncaught (in promise) RangeError: Maximum call stack size exceeded
function evalInstr(instr: bril.Instruction, state: State): Action {
^
at evalInstr (file:///home/nya1025/bril/brili.ts:449:10)
at evalFunc (file:///home/nya1025/bril/brili.ts:838:22)
at evalCall (file:///home/nya1025/bril/brili.ts:398:18)
at evalInstr (file:///home/nya1025/bril/brili.ts:684:14)
at evalFunc (file:///home/nya1025/bril/brili.ts:838:22)
at evalCall (file:///home/nya1025/bril/brili.ts:398:18)
at evalInstr (file:///home/nya1025/bril/brili.ts:684:14)
at evalFunc (file:///home/nya1025/bril/brili.ts:838:22)
at evalCall (file:///home/nya1025/bril/brili.ts:398:18)
at evalInstr (file:///home/nya1025/bril/brili.ts:684:14)
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | brili -p 3 2txt
@ack(m: int, n: int): int {
.b1:
zero.0: int = const 0;
one.0: int = const 1;
cond_m.0: bool = eq m zero.0;
br cond_m.0 .m_zero .m_nonzero;
.m_zero:
tmp.1: int = add n one.0;
ret tmp.1;
.m_nonzero:
cond_m.0: bool = eq n zero.0;
br cond_m.0 .n_zero .n_nonzero;
.n_zero:
m1.0: int = sub m one.0;
tmp.0: int = call @ack m1.0 one.0;
ret tmp.0;
.n_nonzero:
m1.0: int = sub m one.0;
m1.0: int = sub n one.0;
t1.0: int = call @ack m m1.0;
t2.0: int = call @ack m1.0 t1.0;
ret t2.0;
}
@main(m: int, n: int) {
.b1:
tmp.0: int = call @ack m n;
print tmp.0;
ret;
}
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | bril2txi -p 3 2txi -p 3 2 4
error: Uncaught (in promise) RangeError: Maximum call stack size exceeded
function evalInstr(instr: bril.Instruction, state: State): Action {
^
at evalInstr (file:///home/nya1025/bril/brili.ts:449:10)
at evalFunc (file:///home/nya1025/bril/brili.ts:838:22)
at evalCall (file:///home/nya1025/bril/brili.ts:398:18)
at evalInstr (file:///home/nya1025/bril/brili.ts:684:14)
at evalFunc (file:///home/nya1025/bril/brili.ts:838:22)
at evalCall (file:///home/nya1025/bril/brili.ts:398:18)
at evalInstr (file:///home/nya1025/bril/brili.ts:684:14)
at evalFunc (file:///home/nya1025/bril/brili.ts:838:22)
at evalCall (file:///home/nya1025/bril/brili.ts:398:18)
at evalInstr (file:///home/nya1025/bril/brili.ts:684:14)
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | brili -p 2
Congruence classes for function ack:
Class const 0: ['zero.0']
Class const 1: ['one.0']
Class eq: ['cond_m.0', 'cond_n.0']
Class add: ['tmp.1']
Class sub: ['m1.0', 'm1.1', 'n1.0']
Class call: ['t1.0']
Class call_0: ['t2.0']
Class call_1: ['tmp.0']
Congruence classes for function main:
Class call: ['tmp.0']
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py
Congruence classes for function ack:
Class arg_m: ['m']
Class arg_n: ['n']
Class const 0: ['zero.0']
Class const 1: ['one.0']
Class eq: ['cond_m.0']
Class add: ['tmp.1']
Class sub: ['m1.0', 'm1.1']
Class call: ['t1.0']
Class call_0: ['t2.0']
Class call_1: ['tmp.0']
Class eq_0: ['cond_n.0']
Class sub_0: ['n1.0']
Congruence classes for function main:
Class arg_m: ['m']
Class arg_n: ['n']
Class call: ['tmp.0']
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | brili -p 2 4
11
total_dyn_inst: 556
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | brili -p 2  | brili -p 2 2txi -p 3 2txi -p $args 2>/dev/null
sh cs6120/final/test_single.sh benchmarks/core/ackermann.bril
509
509
sh cs6120/final/test_single.sh benchmarks/core/ackermann.bril
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | brili -p 2  | brili -p 2 2txi -p 3 2txi -p $args 2>/dev/null
sh cs6120/final/test_single.sh benchmarks/core/ackermann.brilgvn.shcd ../.sh cs6120/final/test_gvn.sh
benchmarks/core/ackermann.bril
benchmarks/core/armstrong.bril
benchmarks/core/bbs.bril
benchmarks/core/binary-fmt.bril
benchmarks/core/binpow.bril
benchmarks/core/bitshift.bril
benchmarks/core/bitwise-ops.bril
benchmarks/core/catalan.bril
benchmarks/core/check-primes.bril
benchmarks/core/collatz.bril
benchmarks/core/combination.bril
benchmarks/core/delannoy.bril
benchmarks/core/digital-root.bril
benchmarks/core/euclid.bril
benchmarks/core/fact.bril
benchmarks/core/factors.bril
benchmarks/core/fib_recursive.bril
benchmarks/core/fitsinside.bril
benchmarks/core/fizz-buzz.bril
benchmarks/core/gcd.bril
benchmarks/core/gebmm.bril
^C
sh cs6120/final/test_gvn.shsingle.sh benchmarks/core/ackermann.briperfect
0
0
sh cs6120/final/test_single.sh benchmarks/core/perfect.brilup-arrow
65536
65536
sh cs6120/final/test_single.sh benchmarks/core/up-arrow.briltotient.
2023
1632
2023
1632
sh cs6120/final/test_single.sh benchmarks/core/totient.brilsum-qsq-diff.
25164150
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.briltotienup-arroperfecgvn.shsingle.sh benchmarks/core/ackermann.bril
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | brili -p 2 sum-sq-diff
error: mismatched main argument arity: expected 1; got 2
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | brili -p 2 100
error: le argument 0 must be a int
git add .
git commit -m "add testsrenaming, broken"
[main a385aad] add renaming, broken
14 files changed, 518 insertions(+), 48 deletions(-)
create mode 100644 cs6120/final/ssa.py
create mode 100644 cs6120/final/temp_ssa.py
create mode 100644 cs6120/final/test_gvn.sh
create mode 100644 cs6120/final/test_single.sh
git commit -m "add renaming, brokenadd bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | brili -p 10bril2txt
@sumOfSquares(n: int): int {
.b1:
v9.init: int = undef;
v8.init: int = undef;
v7.init: int = undef;
v6.init: int = undef;
v5.init: bool = undef;
v4.init: int = undef;
v3.init: int = undef;
v14.init: int = undef;
v13.init: int = undef;
v12.init: int = undef;
v11.init: int = undef;
v10.init: int = undef;
sq.init: int = undef;
v0.0: int = const 0;
res.0: int = id v0.0;
v2.0: int = const 1;
i.0: int = id v2.0;
jmp .for.cond.1;
.for.cond.1:
v9.0: int = phi v9.init v9.1 b1 for.body.1;
v8.0: int = phi v8.init v8.1 b1 for.body.1;
v7.0: int = phi v7.init v7.1 b1 for.body.1;
v6.0: int = phi v6.init v6.1 b1 for.body.1;
v5.0: bool = phi v5.init v5.1 b1 for.body.1;
v4.0: int = phi v4.init v4.1 b1 for.body.1;
v3.0: int = phi v3.init v3.1 b1 for.body.1;
v14.0: int = phi v14.init v14.1 b1 for.body.1;
v13.0: int = phi v13.init v13.1 b1 for.body.1;
v12.0: int = phi v12.init v12.1 b1 for.body.1;
v11.0: int = phi v11.init v11.1 b1 for.body.1;
v10.0: int = phi v10.init v10.1 b1 for.body.1;
sq.0: int = phi sq.init sq.1 b1 for.body.1;
res.1: int = phi res.0 res.2 b1 for.body.1;
i.1: int = phi i.0 i.2 b1 for.body.1;
v3.1: int = id i.1;
v4.1: int = id n;
v5.1: bool = le v3.1 v4.1;
br v5.1 .for.body.1 .for.end.1;
.for.body.1:
v6.1: int = id i.1;
v7.1: int = id i.1;
v8.1: int = mul v6.1 v7.1;
sq.1: int = id v8.1;
v9.1: int = id res.1;
v10.1: int = id sq.1;
v11.1: int = add v9.1 v10.1;
res.2: int = id v11.1;
v12.1: int = id i.1;
v13.1: int = const 1;
v14.1: int = add v12.1 v13.1;
i.2: int = id v14.1;
jmp .for.cond.1;
.for.end.1:
v15.0: int = id res.1;
ret v15.0;
}
@squareOfSum(n: int): int {
.b1:
v9.init: int = undef;
v8.init: int = undef;
v7.init: int = undef;
v6.init: int = undef;
v5.init: bool = undef;
v4.init: int = undef;
v3.init: int = undef;
v11.init: int = undef;
v10.init: int = undef;
v0.0: int = const 0;
res.0: int = id v0.0;
v2.0: int = const 1;
i.0: int = id v2.0;
jmp .for.cond.1;
.for.cond.1:
v9.0: int = phi v9.init v9.1 b1 for.body.1;
v8.0: int = phi v8.init v8.1 b1 for.body.1;
v7.0: int = phi v7.init v7.1 b1 for.body.1;
v6.0: int = phi v6.init v6.1 b1 for.body.1;
v5.0: bool = phi v5.init v5.1 b1 for.body.1;
v4.0: int = phi v4.init v4.1 b1 for.body.1;
v3.0: int = phi v3.init v3.1 b1 for.body.1;
v11.0: int = phi v11.init v11.1 b1 for.body.1;
v10.0: int = phi v10.init v10.1 b1 for.body.1;
res.1: int = phi res.0 res.2 b1 for.body.1;
i.1: int = phi i.0 i.2 b1 for.body.1;
v3.1: int = id i.1;
v4.1: int = id n;
v5.1: bool = le v3.1 v4.1;
br v5.1 .for.body.1 .for.end.1;
.for.body.1:
v6.1: int = id res.1;
v7.1: int = id i.1;
v8.1: int = add v6.1 v7.1;
res.2: int = id v8.1;
v9.1: int = id i.1;
v10.1: int = const 1;
v11.1: int = add v9.1 v10.1;
i.2: int = id v11.1;
jmp .for.cond.1;
.for.end.1:
v12.0: int = id res.1;
v13.0: int = id res.1;
v14.0: int = mul v12.0 v13.0;
square.0: int = id v14.0;
v15.0: int = id square.0;
ret v15.0;
}
@main(n: int) {
.b1:
v0.0: int = id n;
sum.0: int = call @sumOfSquares v0.0;
sum.1: int = id sum.0;
v1.0: int = id n;
square.0: int = call @squareOfSum v1.0;
square.1: int = id square.0;
v2.0: int = id square.1;
v3.0: int = id sum.1;
v4.0: int = sub v2.0 v3.0;
diff.0: int = id v4.0;
v5.0: int = id diff.0;
print v5.0;
v6.0: int = const 0;
v7.0: int = id diff.0;
ret;
}
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | bril2txt
@sumOfSquares(n: int): int {
.b1:
v9.init: int = undef;
v8.init: int = undef;
v7.init: int = undef;
v6.init: int = undef;
v5.init: bool = undef;
v4.init: int = undef;
v3.init: int = undef;
v14.init: int = undef;
v13.init: int = undef;
v12.init: int = undef;
v11.init: int = undef;
v10.init: int = undef;
sq.init: int = undef;
v0.0: int = const 0;
res.0: int = id v0.0;
v13.1: int = const 1;
i.0: int = id v13.1;
v9.0: int = id v9.init;
v8.0: int = id v8.init;
v12.0: int = id v7.init;
v12.0: int = id v6.init;
v5.0: bool = id v5.init;
v4.0: int = id v4.init;
v12.0: int = id v3.init;
v14.0: int = id v14.init;
v13.0: int = id v13.init;
v12.0: int = id v12.init;
v11.0: int = id v11.init;
v10.0: int = id v10.init;
sq.0: int = id sq.init;
res.1: int = id res.0;
i.1: int = id i.0;
jmp .for.cond.1;
.for.cond.1:
v12.1: int = id i.1;
v4.1: int = id n;
v5.1: bool = le v12.1 v4.1;
br v5.1 .for.body.1 .for.end.1;
.for.body.1:
v12.1: int = id i.1;
v12.1: int = id i.1;
v8.1: int = mul v12.1 v12.1;
sq.1: int = id v8.1;
v15.0: int = id res.1;
v10.1: int = id sq.1;
v11.1: int = add v10.1 v15.0;
res.2: int = id v11.1;
v12.1: int = id i.1;
v13.1: int = const 1;
v14.1: int = add v12.1 v13.1;
i.2: int = id v14.1;
v9.0: int = id v15.0;
v8.0: int = id v8.1;
v12.0: int = id v12.1;
v12.0: int = id v12.1;
v5.0: bool = id v5.1;
v4.0: int = id v4.1;
v12.0: int = id v12.1;
v14.0: int = id v14.1;
v13.0: int = id v13.1;
v12.0: int = id v12.1;
v11.0: int = id v11.1;
v10.0: int = id v10.1;
sq.0: int = id sq.1;
res.1: int = id res.2;
i.1: int = id i.2;
jmp .for.cond.1;
.for.end.1:
v15.0: int = id res.1;
ret v15.0;
}
@squareOfSum(n: int): int {
.b1:
v9.init: int = undef;
v8.init: int = undef;
v7.init: int = undef;
v6.init: int = undef;
v5.init: bool = undef;
v4.init: int = undef;
v3.init: int = undef;
v11.init: int = undef;
v10.init: int = undef;
v0.0: int = const 0;
res.0: int = id v0.0;
v10.1: int = const 1;
i.0: int = id v10.1;
v3.0: int = id v9.init;
res.2: int = id v8.init;
v3.0: int = id v7.init;
v6.0: int = id v6.init;
v5.0: bool = id v5.init;
v4.0: int = id v4.init;
v3.0: int = id v3.init;
i.2: int = id v11.init;
i.0: int = id v10.init;
res.1: int = id res.0;
i.1: int = id i.0;
jmp .for.cond.1;
.for.cond.1:
v3.1: int = id i.1;
v4.1: int = id n;
v5.1: bool = le v3.1 v4.1;
br v5.1 .for.body.1 .for.end.1;
.for.body.1:
v12.0: int = id res.1;
v3.1: int = id i.1;
v8.1: int = add v12.0 v3.1;
res.2: int = id v8.1;
v3.1: int = id i.1;
v10.1: int = const 1;
v11.1: int = add v10.1 v3.1;
i.2: int = id v11.1;
v3.0: int = id v3.1;
res.2: int = id v8.1;
v3.0: int = id v3.1;
v6.0: int = id v12.0;
v5.0: bool = id v5.1;
v4.0: int = id v4.1;
v3.0: int = id v3.1;
i.2: int = id v11.1;
i.0: int = id v10.1;
res.1: int = id res.2;
i.1: int = id i.2;
jmp .for.cond.1;
.for.end.1:
v12.0: int = id res.1;
v12.0: int = id res.1;
v14.0: int = mul v12.0 v12.0;
square.0: int = id v14.0;
v15.0: int = id square.0;
ret v15.0;
}
@main(n: int) {
.b1:
v0.0: int = id n;
square.0: int = call @sumOfSquares v0.0;
square.1: int = id square.0;
v0.0: int = id n;
square.0: int = call @squareOfSum v0.0;
square.1: int = id square.0;
v2.0: int = id square.1;
v2.0: int = id square.1;
v4.0: int = sub v2.0 v2.0;
diff.0: int = id v4.0;
v5.0: int = id diff.0;
print v5.0;
v6.0: int = const 0;
v5.0: int = id diff.0;
ret;
}
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | bril2txt
git commit -m "add renaming, broken"
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | bril2tx
Congruence classes for function sumOfSquares:
Class arg_n: ['n']
Class const 0: ['v0.0']
Class id: ['v4.1']
Class const 1: ['v13.1', 'v2.0']
Class phi: ['v13.0']
Class le: ['v5.1']
Class mul: ['v8.1']
Class add: ['v11.1']
Class id_0: ['res.2']
Class phi_0: ['v11.0']
Class id_1: ['v15.0', 'v9.1']
Class add_0: ['v14.1']
Class phi_1: ['v12.0', 'v3.0', 'v6.0', 'v7.0']
Class id_0_0: ['i.2']
Class phi_0_0: ['v14.0']
Class phi_2: ['i.1']
Class id_1_0: ['v12.1', 'v3.1', 'v6.1', 'v7.1']
Class phi_1_0: ['v9.0']
Class phi_3: ['res.1']
Class id_2: ['v10.1']
Class phi_4: ['v4.0']
Class phi_4_0: ['v10.0']
Class id_3: ['sq.1']
Class phi_5: ['v8.0']
Class phi_4_1: ['sq.0']
Class phi_6: ['v5.0']
Class id_4: ['i.0']
Class id_5: ['res.0']
Congruence classes for function squareOfSum:
Class arg_n: ['n']
Class const 0: ['v0.0']
Class id: ['v4.1']
Class const 1: ['v10.1', 'v2.0']
Class le: ['v5.1']
Class add: ['v11.1']
Class mul: ['v14.0']
Class id_0: ['square.0']
Class id_1: ['v15.0']
Class id_2: ['v3.0', 'v7.0', 'v9.0']
Class add_0: ['v8.1']
Class id_3: ['res.2', 'v8.0']
Class id_2_0: ['res.1']
Class id_2_1: ['v12.0', 'v13.0', 'v6.1']
Class id_2_2: ['v6.0']
Class id_2_3: ['v4.0']
Class id_2_4: ['v3.1', 'v7.1', 'v9.1']
Class id_4: ['i.2', 'v11.0']
Class id_2_3_0: ['i.1']
Class id_5: ['v5.0']
Class id_6: ['i.0', 'v10.0']
Class id_7: ['res.0']
Congruence classes for function main:
Class arg_n: ['n']
Class id: ['v0.0', 'v1.0']
Class call: ['square.0', 'sum.0']
Class sub: ['v4.0']
Class const 0: ['v6.0']
Class id_0: ['diff.0']
Class id_1: ['v5.0', 'v7.0']
Class id_2: ['v2.0', 'v3.0']
Class id_3: ['square.1', 'sum.1']
{
"functions": [
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "v9.init",
"op": "undef",
"type": "int"
},
{
"dest": "v8.init",
"op": "undef",
"type": "int"
},
{
"dest": "v7.init",
"op": "undef",
"type": "int"
},
{
"dest": "v6.init",
"op": "undef",
"type": "int"
},
{
"dest": "v5.init",
"op": "undef",
"type": "bool"
},
{
"dest": "v4.init",
"op": "undef",
"type": "int"
},
{
"dest": "v3.init",
"op": "undef",
"type": "int"
},
{
"dest": "v14.init",
"op": "undef",
"type": "int"
},
{
"dest": "v13.init",
"op": "undef",
"type": "int"
},
{
"dest": "v12.init",
"op": "undef",
"type": "int"
},
{
"dest": "v11.init",
"op": "undef",
"type": "int"
},
{
"dest": "v10.init",
"op": "undef",
"type": "int"
},
{
"dest": "sq.init",
"op": "undef",
"type": "int"
},
{
"dest": "v0.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"v0.0"
],
"dest": "res.0",
"op": "id",
"type": "int"
},
{
"dest": "v13.1",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v13.1"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"args": [
"v9.init"
],
"dest": "v9.0",
"op": "id",
"type": "int"
},
{
"args": [
"v8.init"
],
"dest": "v8.0",
"op": "id",
"type": "int"
},
{
"args": [
"v7.init"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"v6.init"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"v5.init"
],
"dest": "v5.0",
"op": "id",
"type": "bool"
},
{
"args": [
"v4.init"
],
"dest": "v4.0",
"op": "id",
"type": "int"
},
{
"args": [
"v3.init"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"v14.init"
],
"dest": "v14.0",
"op": "id",
"type": "int"
},
{
"args": [
"v13.init"
],
"dest": "v13.0",
"op": "id",
"type": "int"
},
{
"args": [
"v12.init"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"v11.init"
],
"dest": "v11.0",
"op": "id",
"type": "int"
},
{
"args": [
"v10.init"
],
"dest": "v10.0",
"op": "id",
"type": "int"
},
{
"args": [
"sq.init"
],
"dest": "sq.0",
"op": "id",
"type": "int"
},
{
"args": [
"res.0"
],
"dest": "res.1",
"op": "id",
"type": "int"
},
{
"args": [
"i.0"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.cond.1"
},
{
"args": [
"i.1"
],
"dest": "v12.1",
"op": "id",
"type": "int"
},
{
"args": [
"n"
],
"dest": "v4.1",
"op": "id",
"type": "int"
},
{
"args": [
"v12.1",
"v4.1"
],
"dest": "v5.1",
"op": "le",
"type": "bool"
},
{
"args": [
"v5.1"
],
"labels": [
"for.body.1",
"for.end.1"
],
"op": "br"
},
{
"label": "for.body.1"
},
{
"args": [
"i.1"
],
"dest": "v12.1",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v12.1",
"op": "id",
"type": "int"
},
{
"args": [
"v12.1",
"v12.1"
],
"dest": "v8.1",
"op": "mul",
"type": "int"
},
{
"args": [
"v8.1"
],
"dest": "sq.1",
"op": "id",
"type": "int"
},
{
"args": [
"res.1"
],
"dest": "v15.0",
"op": "id",
"type": "int"
},
{
"args": [
"sq.1"
],
"dest": "v10.1",
"op": "id",
"type": "int"
},
{
"args": [
"v10.1",
"v15.0"
],
"dest": "v11.1",
"op": "add",
"type": "int"
},
{
"args": [
"v11.1"
],
"dest": "res.2",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v12.1",
"op": "id",
"type": "int"
},
{
"dest": "v13.1",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v12.1",
"v13.1"
],
"dest": "v14.1",
"op": "add",
"type": "int"
},
{
"args": [
"v14.1"
],
"dest": "i.2",
"op": "id",
"type": "int"
},
{
"args": [
"v15.0"
],
"dest": "v9.0",
"op": "id",
"type": "int"
},
{
"args": [
"v8.1"
],
"dest": "v8.0",
"op": "id",
"type": "int"
},
{
"args": [
"v12.1"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"v12.1"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"v5.1"
],
"dest": "v5.0",
"op": "id",
"type": "bool"
},
{
"args": [
"v4.1"
],
"dest": "v4.0",
"op": "id",
"type": "int"
},
{
"args": [
"v12.1"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"v14.1"
],
"dest": "v14.0",
"op": "id",
"type": "int"
},
{
"args": [
"v13.1"
],
"dest": "v13.0",
"op": "id",
"type": "int"
},
{
"args": [
"v12.1"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"v11.1"
],
"dest": "v11.0",
"op": "id",
"type": "int"
},
{
"args": [
"v10.1"
],
"dest": "v10.0",
"op": "id",
"type": "int"
},
{
"args": [
"sq.1"
],
"dest": "sq.0",
"op": "id",
"type": "int"
},
{
"args": [
"res.2"
],
"dest": "res.1",
"op": "id",
"type": "int"
},
{
"args": [
"i.2"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.end.1"
},
{
"args": [
"res.1"
],
"dest": "v15.0",
"op": "id",
"type": "int"
},
{
"args": [
"v15.0"
],
"op": "ret"
}
],
"name": "sumOfSquares",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "v9.init",
"op": "undef",
"type": "int"
},
{
"dest": "v8.init",
"op": "undef",
"type": "int"
},
{
"dest": "v7.init",
"op": "undef",
"type": "int"
},
{
"dest": "v6.init",
"op": "undef",
"type": "int"
},
{
"dest": "v5.init",
"op": "undef",
"type": "bool"
},
{
"dest": "v4.init",
"op": "undef",
"type": "int"
},
{
"dest": "v3.init",
"op": "undef",
"type": "int"
},
{
"dest": "v11.init",
"op": "undef",
"type": "int"
},
{
"dest": "v10.init",
"op": "undef",
"type": "int"
},
{
"dest": "v0.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"v0.0"
],
"dest": "res.0",
"op": "id",
"type": "int"
},
{
"dest": "v10.1",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v10.1"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"args": [
"v9.init"
],
"dest": "v3.0",
"op": "id",
"type": "int"
},
{
"args": [
"v8.init"
],
"dest": "res.2",
"op": "id",
"type": "int"
},
{
"args": [
"v7.init"
],
"dest": "v3.0",
"op": "id",
"type": "int"
},
{
"args": [
"v6.init"
],
"dest": "v6.0",
"op": "id",
"type": "int"
},
{
"args": [
"v5.init"
],
"dest": "v5.0",
"op": "id",
"type": "bool"
},
{
"args": [
"v4.init"
],
"dest": "v4.0",
"op": "id",
"type": "int"
},
{
"args": [
"v3.init"
],
"dest": "v3.0",
"op": "id",
"type": "int"
},
{
"args": [
"v11.init"
],
"dest": "i.2",
"op": "id",
"type": "int"
},
{
"args": [
"v10.init"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"args": [
"res.0"
],
"dest": "res.1",
"op": "id",
"type": "int"
},
{
"args": [
"i.0"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.cond.1"
},
{
"args": [
"i.1"
],
"dest": "v3.1",
"op": "id",
"type": "int"
},
{
"args": [
"n"
],
"dest": "v4.1",
"op": "id",
"type": "int"
},
{
"args": [
"v3.1",
"v4.1"
],
"dest": "v5.1",
"op": "le",
"type": "bool"
},
{
"args": [
"v5.1"
],
"labels": [
"for.body.1",
"for.end.1"
],
"op": "br"
},
{
"label": "for.body.1"
},
{
"args": [
"res.1"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v3.1",
"op": "id",
"type": "int"
},
{
"args": [
"v12.0",
"v3.1"
],
"dest": "v8.1",
"op": "add",
"type": "int"
},
{
"args": [
"v8.1"
],
"dest": "res.2",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v3.1",
"op": "id",
"type": "int"
},
{
"dest": "v10.1",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v10.1",
"v3.1"
],
"dest": "v11.1",
"op": "add",
"type": "int"
},
{
"args": [
"v11.1"
],
"dest": "i.2",
"op": "id",
"type": "int"
},
{
"args": [
"v3.1"
],
"dest": "v3.0",
"op": "id",
"type": "int"
},
{
"args": [
"v8.1"
],
"dest": "res.2",
"op": "id",
"type": "int"
},
{
"args": [
"v3.1"
],
"dest": "v3.0",
"op": "id",
"type": "int"
},
{
"args": [
"v12.0"
],
"dest": "v6.0",
"op": "id",
"type": "int"
},
{
"args": [
"v5.1"
],
"dest": "v5.0",
"op": "id",
"type": "bool"
},
{
"args": [
"v4.1"
],
"dest": "v4.0",
"op": "id",
"type": "int"
},
{
"args": [
"v3.1"
],
"dest": "v3.0",
"op": "id",
"type": "int"
},
{
"args": [
"v11.1"
],
"dest": "i.2",
"op": "id",
"type": "int"
},
{
"args": [
"v10.1"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"args": [
"res.2"
],
"dest": "res.1",
"op": "id",
"type": "int"
},
{
"args": [
"i.2"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.end.1"
},
{
"args": [
"res.1"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"res.1"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"v12.0",
"v12.0"
],
"dest": "v14.0",
"op": "mul",
"type": "int"
},
{
"args": [
"v14.0"
],
"dest": "square.0",
"op": "id",
"type": "int"
},
{
"args": [
"square.0"
],
"dest": "v15.0",
"op": "id",
"type": "int"
},
{
"args": [
"v15.0"
],
"op": "ret"
}
],
"name": "squareOfSum",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"n"
],
"dest": "v0.0",
"op": "id",
"type": "int"
},
{
"args": [
"v0.0"
],
"dest": "square.0",
"funcs": [
"sumOfSquares"
],
"op": "call",
"type": "int"
},
{
"args": [
"square.0"
],
"dest": "square.1",
"op": "id",
"type": "int"
},
{
"args": [
"n"
],
"dest": "v0.0",
"op": "id",
"type": "int"
},
{
"args": [
"v0.0"
],
"dest": "square.0",
"funcs": [
"squareOfSum"
],
"op": "call",
"type": "int"
},
{
"args": [
"square.0"
],
"dest": "square.1",
"op": "id",
"type": "int"
},
{
"args": [
"square.1"
],
"dest": "v2.0",
"op": "id",
"type": "int"
},
{
"args": [
"square.1"
],
"dest": "v2.0",
"op": "id",
"type": "int"
},
{
"args": [
"v2.0",
"v2.0"
],
"dest": "v4.0",
"op": "sub",
"type": "int"
},
{
"args": [
"v4.0"
],
"dest": "diff.0",
"op": "id",
"type": "int"
},
{
"args": [
"diff.0"
],
"dest": "v5.0",
"op": "id",
"type": "int"
},
{
"args": [
"v5.0"
],
"op": "print"
},
{
"dest": "v6.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"diff.0"
],
"dest": "v5.0",
"op": "id",
"type": "int"
},
{
"args": [],
"op": "ret"
}
],
"name": "main"
}
]
}
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py
Congruence classes for function sumOfSquares:
Class arg_n: ['n']
Class const 0: ['v0.0']
Class id: ['v4.1']
Class const 1: ['v13.1', 'v2.0']
Class phi: ['v13.0']
Class le: ['v5.1']
Class mul: ['v8.1']
Class add: ['v11.1']
Class id_0: ['res.2']
Class phi_0: ['v11.0']
Class id_1: ['v15.0', 'v9.1']
Class add_0: ['v14.1']
Class phi_1: ['v12.0', 'v3.0', 'v6.0', 'v7.0']
Class id_0_0: ['i.2']
Class phi_0_0: ['v14.0']
Class phi_2: ['i.1']
Class id_1_0: ['v12.1', 'v3.1', 'v6.1', 'v7.1']
Class phi_1_0: ['v9.0']
Class phi_3: ['res.1']
Class id_2: ['v10.1']
Class phi_4: ['v4.0']
Class phi_4_0: ['v10.0']
Class id_3: ['sq.1']
Class phi_5: ['v8.0']
Class phi_4_1: ['sq.0']
Class phi_6: ['v5.0']
Class id_4: ['i.0']
Class id_5: ['res.0']
Congruence classes for function squareOfSum:
Class arg_n: ['n']
Class const 0: ['v0.0']
Class id: ['v4.1']
Class const 1: ['v10.1', 'v2.0']
Class le: ['v5.1']
Class add: ['v11.1']
Class mul: ['v14.0']
Class id_0: ['square.0']
Class id_1: ['v15.0']
Class id_2: ['v3.0', 'v7.0', 'v9.0']
Class add_0: ['v8.1']
Class id_3: ['res.2', 'v8.0']
Class id_2_0: ['res.1']
Class id_2_1: ['v12.0', 'v13.0', 'v6.1']
Class id_2_2: ['v6.0']
Class id_2_3: ['v4.0']
Class id_2_4: ['v3.1', 'v7.1', 'v9.1']
Class id_4: ['i.2', 'v11.0']
Class id_2_3_0: ['i.1']
Class id_5: ['v5.0']
Class id_6: ['i.0', 'v10.0']
Class id_7: ['res.0']
Congruence classes for function main:
Class arg_n: ['n']
Class id: ['v0.0', 'v1.0']
Class call: ['square.0', 'sum.0']
Class sub: ['v4.0']
Class const 0: ['v6.0']
Class id_0: ['diff.0']
Class id_1: ['v5.0', 'v7.0']
Class id_2: ['v2.0', 'v3.0']
Class id_3: ['square.1', 'sum.1']
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py
reset
c104>
resebril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py
/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (2.2.3) or chardet (3.0.4) doesn't match a supported version!
warnings.warn("urllib3 ({}) or chardet ({}) doesn't match a supported "
Traceback (most recent call last):
File "cs6120/final/gvn.py", line 115, in <module>
main()
File "cs6120/final/gvn.py", line 82, in main
print(json.dumps(fake_to_ssa(ssa_program), indent=2, sort_keys=True))
File "/home/nya1025/bril/cs6120/final/temp_ssa.py", line 166, in fake_to_ssa
func_to_ssa(func)
File "/home/nya1025/bril/cs6120/final/temp_ssa.py", line 159, in func_to_ssa
insert_inits(next(iter(blocks.values())), inits, types)
File "/home/nya1025/bril/cs6120/final/temp_ssa.py", line 125, in insert_inits
"type": types[old_var],
KeyError: 'b1'
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py
{
"functions": [
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "v9.init",
"op": "undef",
"type": "int"
},
{
"dest": "v8.init",
"op": "undef",
"type": "int"
},
{
"dest": "v7.init",
"op": "undef",
"type": "int"
},
{
"dest": "v6.init",
"op": "undef",
"type": "int"
},
{
"dest": "v5.init",
"op": "undef",
"type": "bool"
},
{
"dest": "v4.init",
"op": "undef",
"type": "int"
},
{
"dest": "v3.init",
"op": "undef",
"type": "int"
},
{
"dest": "v14.init",
"op": "undef",
"type": "int"
},
{
"dest": "v13.init",
"op": "undef",
"type": "int"
},
{
"dest": "v12.init",
"op": "undef",
"type": "int"
},
{
"dest": "v11.init",
"op": "undef",
"type": "int"
},
{
"dest": "v10.init",
"op": "undef",
"type": "int"
},
{
"dest": "sq.init",
"op": "undef",
"type": "int"
},
{
"dest": "v0.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"v0.0"
],
"dest": "res.0",
"op": "id",
"type": "int"
},
{
"dest": "v2.0",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v2.0"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"args": [
"i.1",
"i.0"
],
"op": "set"
},
{
"args": [
"res.1",
"res.0"
],
"op": "set"
},
{
"args": [
"sq.0",
"sq.init"
],
"op": "set"
},
{
"args": [
"v10.0",
"v10.init"
],
"op": "set"
},
{
"args": [
"v11.0",
"v11.init"
],
"op": "set"
},
{
"args": [
"v12.0",
"v12.init"
],
"op": "set"
},
{
"args": [
"v13.0",
"v13.init"
],
"op": "set"
},
{
"args": [
"v14.0",
"v14.init"
],
"op": "set"
},
{
"args": [
"v3.0",
"v3.init"
],
"op": "set"
},
{
"args": [
"v4.0",
"v4.init"
],
"op": "set"
},
{
"args": [
"v5.0",
"v5.init"
],
"op": "set"
},
{
"args": [
"v6.0",
"v6.init"
],
"op": "set"
},
{
"args": [
"v7.0",
"v7.init"
],
"op": "set"
},
{
"args": [
"v8.0",
"v8.init"
],
"op": "set"
},
{
"args": [
"v9.0",
"v9.init"
],
"op": "set"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.cond.1"
},
{
"dest": "v9.0",
"op": "get",
"type": "int"
},
{
"dest": "v8.0",
"op": "get",
"type": "int"
},
{
"dest": "v7.0",
"op": "get",
"type": "int"
},
{
"dest": "v6.0",
"op": "get",
"type": "int"
},
{
"dest": "v5.0",
"op": "get",
"type": "bool"
},
{
"dest": "v4.0",
"op": "get",
"type": "int"
},
{
"dest": "v3.0",
"op": "get",
"type": "int"
},
{
"dest": "v14.0",
"op": "get",
"type": "int"
},
{
"dest": "v13.0",
"op": "get",
"type": "int"
},
{
"dest": "v12.0",
"op": "get",
"type": "int"
},
{
"dest": "v11.0",
"op": "get",
"type": "int"
},
{
"dest": "v10.0",
"op": "get",
"type": "int"
},
{
"dest": "sq.0",
"op": "get",
"type": "int"
},
{
"dest": "res.1",
"op": "get",
"type": "int"
},
{
"dest": "i.1",
"op": "get",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v3.1",
"op": "id",
"type": "int"
},
{
"args": [
"n"
],
"dest": "v4.1",
"op": "id",
"type": "int"
},
{
"args": [
"v3.1",
"v4.1"
],
"dest": "v5.1",
"op": "le",
"type": "bool"
},
{
"args": [
"v5.1"
],
"labels": [
"for.body.1",
"for.end.1"
],
"op": "br"
},
{
"label": "for.body.1"
},
{
"args": [
"i.1"
],
"dest": "v6.1",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v7.1",
"op": "id",
"type": "int"
},
{
"args": [
"v6.1",
"v7.1"
],
"dest": "v8.1",
"op": "mul",
"type": "int"
},
{
"args": [
"v8.1"
],
"dest": "sq.1",
"op": "id",
"type": "int"
},
{
"args": [
"res.1"
],
"dest": "v9.1",
"op": "id",
"type": "int"
},
{
"args": [
"sq.1"
],
"dest": "v10.1",
"op": "id",
"type": "int"
},
{
"args": [
"v9.1",
"v10.1"
],
"dest": "v11.1",
"op": "add",
"type": "int"
},
{
"args": [
"v11.1"
],
"dest": "res.2",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v12.1",
"op": "id",
"type": "int"
},
{
"dest": "v13.1",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v12.1",
"v13.1"
],
"dest": "v14.1",
"op": "add",
"type": "int"
},
{
"args": [
"v14.1"
],
"dest": "i.2",
"op": "id",
"type": "int"
},
{
"args": [
"i.1",
"i.2"
],
"op": "set"
},
{
"args": [
"res.1",
"res.2"
],
"op": "set"
},
{
"args": [
"sq.0",
"sq.1"
],
"op": "set"
},
{
"args": [
"v10.0",
"v10.1"
],
"op": "set"
},
{
"args": [
"v11.0",
"v11.1"
],
"op": "set"
},
{
"args": [
"v12.0",
"v12.1"
],
"op": "set"
},
{
"args": [
"v13.0",
"v13.1"
],
"op": "set"
},
{
"args": [
"v14.0",
"v14.1"
],
"op": "set"
},
{
"args": [
"v3.0",
"v3.1"
],
"op": "set"
},
{
"args": [
"v4.0",
"v4.1"
],
"op": "set"
},
{
"args": [
"v5.0",
"v5.1"
],
"op": "set"
},
{
"args": [
"v6.0",
"v6.1"
],
"op": "set"
},
{
"args": [
"v7.0",
"v7.1"
],
"op": "set"
},
{
"args": [
"v8.0",
"v8.1"
],
"op": "set"
},
{
"args": [
"v9.0",
"v9.1"
],
"op": "set"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.end.1"
},
{
"args": [
"res.1"
],
"dest": "v15.0",
"op": "id",
"type": "int"
},
{
"args": [
"v15.0"
],
"op": "ret"
}
],
"name": "sumOfSquares",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "v9.init",
"op": "undef",
"type": "int"
},
{
"dest": "v8.init",
"op": "undef",
"type": "int"
},
{
"dest": "v7.init",
"op": "undef",
"type": "int"
},
{
"dest": "v6.init",
"op": "undef",
"type": "int"
},
{
"dest": "v5.init",
"op": "undef",
"type": "bool"
},
{
"dest": "v4.init",
"op": "undef",
"type": "int"
},
{
"dest": "v3.init",
"op": "undef",
"type": "int"
},
{
"dest": "v11.init",
"op": "undef",
"type": "int"
},
{
"dest": "v10.init",
"op": "undef",
"type": "int"
},
{
"dest": "v0.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"v0.0"
],
"dest": "res.0",
"op": "id",
"type": "int"
},
{
"dest": "v2.0",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v2.0"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"args": [
"i.1",
"i.0"
],
"op": "set"
},
{
"args": [
"res.1",
"res.0"
],
"op": "set"
},
{
"args": [
"v10.0",
"v10.init"
],
"op": "set"
},
{
"args": [
"v11.0",
"v11.init"
],
"op": "set"
},
{
"args": [
"v3.0",
"v3.init"
],
"op": "set"
},
{
"args": [
"v4.0",
"v4.init"
],
"op": "set"
},
{
"args": [
"v5.0",
"v5.init"
],
"op": "set"
},
{
"args": [
"v6.0",
"v6.init"
],
"op": "set"
},
{
"args": [
"v7.0",
"v7.init"
],
"op": "set"
},
{
"args": [
"v8.0",
"v8.init"
],
"op": "set"
},
{
"args": [
"v9.0",
"v9.init"
],
"op": "set"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.cond.1"
},
{
"dest": "v9.0",
"op": "get",
"type": "int"
},
{
"dest": "v8.0",
"op": "get",
"type": "int"
},
{
"dest": "v7.0",
"op": "get",
"type": "int"
},
{
"dest": "v6.0",
"op": "get",
"type": "int"
},
{
"dest": "v5.0",
"op": "get",
"type": "bool"
},
{
"dest": "v4.0",
"op": "get",
"type": "int"
},
{
"dest": "v3.0",
"op": "get",
"type": "int"
},
{
"dest": "v11.0",
"op": "get",
"type": "int"
},
{
"dest": "v10.0",
"op": "get",
"type": "int"
},
{
"dest": "res.1",
"op": "get",
"type": "int"
},
{
"dest": "i.1",
"op": "get",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v3.1",
"op": "id",
"type": "int"
},
{
"args": [
"n"
],
"dest": "v4.1",
"op": "id",
"type": "int"
},
{
"args": [
"v3.1",
"v4.1"
],
"dest": "v5.1",
"op": "le",
"type": "bool"
},
{
"args": [
"v5.1"
],
"labels": [
"for.body.1",
"for.end.1"
],
"op": "br"
},
{
"label": "for.body.1"
},
{
"args": [
"res.1"
],
"dest": "v6.1",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v7.1",
"op": "id",
"type": "int"
},
{
"args": [
"v6.1",
"v7.1"
],
"dest": "v8.1",
"op": "add",
"type": "int"
},
{
"args": [
"v8.1"
],
"dest": "res.2",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v9.1",
"op": "id",
"type": "int"
},
{
"dest": "v10.1",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v9.1",
"v10.1"
],
"dest": "v11.1",
"op": "add",
"type": "int"
},
{
"args": [
"v11.1"
],
"dest": "i.2",
"op": "id",
"type": "int"
},
{
"args": [
"i.1",
"i.2"
],
"op": "set"
},
{
"args": [
"res.1",
"res.2"
],
"op": "set"
},
{
"args": [
"v10.0",
"v10.1"
],
"op": "set"
},
{
"args": [
"v11.0",
"v11.1"
],
"op": "set"
},
{
"args": [
"v3.0",
"v3.1"
],
"op": "set"
},
{
"args": [
"v4.0",
"v4.1"
],
"op": "set"
},
{
"args": [
"v5.0",
"v5.1"
],
"op": "set"
},
{
"args": [
"v6.0",
"v6.1"
],
"op": "set"
},
{
"args": [
"v7.0",
"v7.1"
],
"op": "set"
},
{
"args": [
"v8.0",
"v8.1"
],
"op": "set"
},
{
"args": [
"v9.0",
"v9.1"
],
"op": "set"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.end.1"
},
{
"args": [
"res.1"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"res.1"
],
"dest": "v13.0",
"op": "id",
"type": "int"
},
{
"args": [
"v12.0",
"v13.0"
],
"dest": "v14.0",
"op": "mul",
"type": "int"
},
{
"args": [
"v14.0"
],
"dest": "square.0",
"op": "id",
"type": "int"
},
{
"args": [
"square.0"
],
"dest": "v15.0",
"op": "id",
"type": "int"
},
{
"args": [
"v15.0"
],
"op": "ret"
}
],
"name": "squareOfSum",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"n"
],
"dest": "v0.0",
"op": "id",
"type": "int"
},
{
"args": [
"v0.0"
],
"dest": "sum.0",
"funcs": [
"sumOfSquares"
],
"op": "call",
"type": "int"
},
{
"args": [
"sum.0"
],
"dest": "sum.1",
"op": "id",
"type": "int"
},
{
"args": [
"n"
],
"dest": "v1.0",
"op": "id",
"type": "int"
},
{
"args": [
"v1.0"
],
"dest": "square.0",
"funcs": [
"squareOfSum"
],
"op": "call",
"type": "int"
},
{
"args": [
"square.0"
],
"dest": "square.1",
"op": "id",
"type": "int"
},
{
"args": [
"square.1"
],
"dest": "v2.0",
"op": "id",
"type": "int"
},
{
"args": [
"sum.1"
],
"dest": "v3.0",
"op": "id",
"type": "int"
},
{
"args": [
"v2.0",
"v3.0"
],
"dest": "v4.0",
"op": "sub",
"type": "int"
},
{
"args": [
"v4.0"
],
"dest": "diff.0",
"op": "id",
"type": "int"
},
{
"args": [
"diff.0"
],
"dest": "v5.0",
"op": "id",
"type": "int"
},
{
"args": [
"v5.0"
],
"op": "print"
},
{
"dest": "v6.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"diff.0"
],
"dest": "v7.0",
"op": "id",
"type": "int"
},
{
"args": [],
"op": "ret"
}
],
"name": "main"
}
]
}
Congruence classes for function sumOfSquares:
Class arg_n: ['n']
Class const 0: ['v0.0.0']
Class id: ['v4.1.1']
Class const 1: ['v13.1.1', 'v2.0.0']
Class phi: ['v13.1.0']
Class get: ['i.1.1', 'res.1.1', 'sq.0.1', 'v10.0.1', 'v11.0.1', 'v12.0.1', 'v13.0.1', 'v14.0.1', 'v3.0.1', 'v4.0.1', 'v5.0.1', 'v6.0.1', 'v7.0.1', 'v8.0.1', 'v9.0.1']
Class le: ['v5.1.1']
Class mul: ['v8.1.1']
Class add: ['v14.1.1']
Class id_0: ['i.2.1']
Class phi_0: ['v14.1.0']
Class phi_1: ['i.2.0']
Class id_1: ['v10.1.1']
Class phi_2: ['v12.1.0', 'v3.1.0', 'v6.1.0', 'v7.1.0', 'v9.1.0']
Class add_0: ['v11.1.1']
Class id_0_0: ['res.2.1']
Class phi_0_0: ['v11.1.0']
Class phi_1_0: ['res.2.0']
Class phi_2_0: ['v10.1.0']
Class id_2: ['sq.1.1']
Class phi_3: ['v8.1.0']
Class phi_2_1: ['sq.1.0']
Class phi_4: ['v5.1.0']
Class id_3: ['v12.1.1', 'v15.0.0', 'v3.1.1', 'v6.1.1', 'v7.1.1', 'v9.1.1']
Class phi_5: ['i.1.0', 'res.1.0', 'sq.0.0', 'v10.0.0', 'v11.0.0', 'v12.0.0', 'v13.0.0', 'v14.0.0', 'v3.0.0', 'v4.0.0', 'v5.0.0', 'v6.0.0', 'v7.0.0', 'v8.0.0', 'v9.0.0']
Class phi_2_2: ['v4.1.0']
Class id_4: ['i.0.0']
Class id_5: ['res.0.0']
Congruence classes for function squareOfSum:
Class arg_n: ['n']
Class const 0: ['v0.0.0']
Class id: ['v4.1.1']
Class const 1: ['v10.1.1', 'v2.0.0']
Class get: ['i.1.1', 'res.1.1', 'v10.0.1', 'v11.0.1', 'v3.0.1', 'v4.0.1', 'v5.0.1', 'v6.0.1', 'v7.0.1', 'v8.0.1', 'v9.0.1']
Class le: ['v5.1.1']
Class add: ['v11.1.1']
Class mul: ['v14.0.0']
Class id_0: ['square.0.0']
Class id_1: ['v15.0.0']
Class id_2: ['v3.1.0', 'v6.1.0', 'v7.1.0', 'v9.1.0']
Class add_0: ['v8.1.1']
Class id_3: ['res.2.1', 'v8.1.0']
Class id_2_0: ['res.2.0']
Class id_4: ['i.2.1', 'v11.1.0']
Class id_2_1: ['i.2.0']
Class id_5: ['v5.1.0']
Class id_6: ['i.1.0', 'res.1.0', 'v10.0.0', 'v11.0.0', 'v12.0.0', 'v13.0.0', 'v3.0.0', 'v3.1.1', 'v4.0.0', 'v5.0.0', 'v6.0.0', 'v6.1.1', 'v7.0.0', 'v7.1.1', 'v8.0.0', 'v9.0.0', 'v9.1.1']
Class id_2_2: ['v4.1.0']
Class id_7: ['i.0.0', 'v10.1.0']
Class id_8: ['res.0.0']
Congruence classes for function main:
Class arg_n: ['n']
Class id: ['v0.0.0', 'v1.0.0']
Class call: ['square.0.0', 'sum.0.0']
Class sub: ['v4.0.0']
Class const 0: ['v6.0.0']
Class id_0: ['diff.0.0']
Class id_1: ['v5.0.0', 'v7.0.0']
Class id_2: ['v2.0.0', 'v3.0.0']
Class id_3: ['square.1.0', 'sum.1.0']
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py
resebril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | bril2txt
@sumOfSquares(n: int): int {
.b1:
v9.init: int = undef;
v8.init: int = undef;
v7.init: int = undef;
v6.init: int = undef;
v5.init: bool = undef;
v4.init: int = undef;
v3.init: int = undef;
v14.init: int = undef;
v13.init: int = undef;
v12.init: int = undef;
v11.init: int = undef;
v10.init: int = undef;
sq.init: int = undef;
v0.0: int = const 0;
res.0: int = id v0.0;
v2.0: int = const 1;
i.0: int = id v2.0;
set i.1 i.0;
set res.1 res.0;
set sq.0 sq.init;
set v10.0 v10.init;
set v11.0 v11.init;
set v12.0 v12.init;
set v13.0 v13.init;
set v14.0 v14.init;
set v3.0 v3.init;
set v4.0 v4.init;
set v5.0 v5.init;
set v6.0 v6.init;
set v7.0 v7.init;
set v8.0 v8.init;
set v9.0 v9.init;
jmp .for.cond.1;
.for.cond.1:
v9.0: int = get;
v8.0: int = get;
v7.0: int = get;
v6.0: int = get;
v5.0: bool = get;
v4.0: int = get;
v3.0: int = get;
v14.0: int = get;
v13.0: int = get;
v12.0: int = get;
v11.0: int = get;
v10.0: int = get;
sq.0: int = get;
res.1: int = get;
i.1: int = get;
v3.1: int = id i.1;
v4.1: int = id n;
v5.1: bool = le v3.1 v4.1;
br v5.1 .for.body.1 .for.end.1;
.for.body.1:
v6.1: int = id i.1;
v7.1: int = id i.1;
v8.1: int = mul v6.1 v7.1;
sq.1: int = id v8.1;
v9.1: int = id res.1;
v10.1: int = id sq.1;
v11.1: int = add v9.1 v10.1;
res.2: int = id v11.1;
v12.1: int = id i.1;
v13.1: int = const 1;
v14.1: int = add v12.1 v13.1;
i.2: int = id v14.1;
set i.1 i.2;
set res.1 res.2;
set sq.0 sq.1;
set v10.0 v10.1;
set v11.0 v11.1;
set v12.0 v12.1;
set v13.0 v13.1;
set v14.0 v14.1;
set v3.0 v3.1;
set v4.0 v4.1;
set v5.0 v5.1;
set v6.0 v6.1;
set v7.0 v7.1;
set v8.0 v8.1;
set v9.0 v9.1;
jmp .for.cond.1;
.for.end.1:
v15.0: int = id res.1;
ret v15.0;
}
@squareOfSum(n: int): int {
.b1:
v9.init: int = undef;
v8.init: int = undef;
v7.init: int = undef;
v6.init: int = undef;
v5.init: bool = undef;
v4.init: int = undef;
v3.init: int = undef;
v11.init: int = undef;
v10.init: int = undef;
v0.0: int = const 0;
res.0: int = id v0.0;
v2.0: int = const 1;
i.0: int = id v2.0;
set i.1 i.0;
set res.1 res.0;
set v10.0 v10.init;
set v11.0 v11.init;
set v3.0 v3.init;
set v4.0 v4.init;
set v5.0 v5.init;
set v6.0 v6.init;
set v7.0 v7.init;
set v8.0 v8.init;
set v9.0 v9.init;
jmp .for.cond.1;
.for.cond.1:
v9.0: int = get;
v8.0: int = get;
v7.0: int = get;
v6.0: int = get;
v5.0: bool = get;
v4.0: int = get;
v3.0: int = get;
v11.0: int = get;
v10.0: int = get;
res.1: int = get;
i.1: int = get;
v3.1: int = id i.1;
v4.1: int = id n;
v5.1: bool = le v3.1 v4.1;
br v5.1 .for.body.1 .for.end.1;
.for.body.1:
v6.1: int = id res.1;
v7.1: int = id i.1;
v8.1: int = add v6.1 v7.1;
res.2: int = id v8.1;
v9.1: int = id i.1;
v10.1: int = const 1;
v11.1: int = add v9.1 v10.1;
i.2: int = id v11.1;
set i.1 i.2;
set res.1 res.2;
set v10.0 v10.1;
set v11.0 v11.1;
set v3.0 v3.1;
set v4.0 v4.1;
set v5.0 v5.1;
set v6.0 v6.1;
set v7.0 v7.1;
set v8.0 v8.1;
set v9.0 v9.1;
jmp .for.cond.1;
.for.end.1:
v12.0: int = id res.1;
v13.0: int = id res.1;
v14.0: int = mul v12.0 v13.0;
square.0: int = id v14.0;
v15.0: int = id square.0;
ret v15.0;
}
@main(n: int) {
.b1:
v0.0: int = id n;
sum.0: int = call @sumOfSquares v0.0;
sum.1: int = id sum.0;
v1.0: int = id n;
square.0: int = call @squareOfSum v1.0;
square.1: int = id square.0;
v2.0: int = id square.1;
v3.0: int = id sum.1;
v4.0: int = sub v2.0 v3.0;
diff.0: int = id v4.0;
v5.0: int = id diff.0;
print v5.0;
v6.0: int = const 0;
v7.0: int = id diff.0;
ret;
}
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | bril2txt
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | bril2txt
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | bril2tx
Congruence classes for function sumOfSquares:
Class arg_n: ['n']
Class const 0: ['v0.0']
Class id: ['v4.1']
Class const 1: ['v13.1', 'v2.0']
Class phi: ['v13.0']
Class le: ['v5.1']
Class mul: ['v8.1']
Class add: ['v11.1']
Class id_0: ['res.2']
Class phi_0: ['v11.0']
Class id_1: ['v15.0', 'v9.1']
Class add_0: ['v14.1']
Class phi_1: ['v12.0', 'v3.0', 'v6.0', 'v7.0']
Class id_0_0: ['i.2']
Class phi_0_0: ['v14.0']
Class phi_2: ['i.1']
Class id_1_0: ['v12.1', 'v3.1', 'v6.1', 'v7.1']
Class phi_1_0: ['v9.0']
Class phi_3: ['res.1']
Class id_2: ['v10.1']
Class phi_4: ['v4.0']
Class phi_4_0: ['v10.0']
Class id_3: ['sq.1']
Class phi_5: ['v8.0']
Class phi_4_1: ['sq.0']
Class phi_6: ['v5.0']
Class id_4: ['i.0']
Class id_5: ['res.0']
Congruence classes for function squareOfSum:
Class arg_n: ['n']
Class const 0: ['v0.0']
Class id: ['v4.1']
Class const 1: ['v10.1', 'v2.0']
Class le: ['v5.1']
Class add: ['v11.1']
Class mul: ['v14.0']
Class id_0: ['square.0']
Class id_1: ['v15.0']
Class id_2: ['v3.0', 'v7.0', 'v9.0']
Class add_0: ['v8.1']
Class id_3: ['res.2', 'v8.0']
Class id_2_0: ['res.1']
Class id_2_1: ['v12.0', 'v13.0', 'v6.1']
Class id_2_2: ['v6.0']
Class id_2_3: ['v4.0']
Class id_2_4: ['v3.1', 'v7.1', 'v9.1']
Class id_4: ['i.2', 'v11.0']
Class id_2_3_0: ['i.1']
Class id_5: ['v5.0']
Class id_6: ['i.0', 'v10.0']
Class id_7: ['res.0']
Congruence classes for function main:
Class arg_n: ['n']
Class id: ['v0.0', 'v1.0']
Class call: ['square.0', 'sum.0']
Class sub: ['v4.0']
Class const 0: ['v6.0']
Class id_0: ['diff.0']
Class id_1: ['v5.0', 'v7.0']
Class id_2: ['v2.0', 'v3.0']
Class id_3: ['square.1', 'sum.1']
Bbril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | bril2txt
Traceback (most recent call last):
File "/home/nya1025/.local/bin/bril2txt", line 10, in <module>
sys.exit(bril2txt())
File "/home/nya1025/.local/share/uv/tools/briltxt/lib/python3.8/site-packages/briltxt.py", line 343, in bril2txt
print_prog(json.load(sys.stdin))
File "/usr/lib/python3.8/json/__init__.py", line 293, in load
return loads(fp.read(),
File "/usr/lib/python3.8/json/__init__.py", line 357, in loads
return _default_decoder.decode(s)
File "/usr/lib/python3.8/json/decoder.py", line 340, in decode
raise JSONDecodeError("Extra data", s, end)
json.decoder.JSONDecodeError: Extra data: line 954 column 1 (char 17717)
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | bril2tx
{
"functions": [
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "v9.init",
"op": "undef",
"type": "int"
},
{
"dest": "v8.init",
"op": "undef",
"type": "int"
},
{
"dest": "v7.init",
"op": "undef",
"type": "int"
},
{
"dest": "v6.init",
"op": "undef",
"type": "int"
},
{
"dest": "v5.init",
"op": "undef",
"type": "bool"
},
{
"dest": "v4.init",
"op": "undef",
"type": "int"
},
{
"dest": "v3.init",
"op": "undef",
"type": "int"
},
{
"dest": "v14.init",
"op": "undef",
"type": "int"
},
{
"dest": "v13.init",
"op": "undef",
"type": "int"
},
{
"dest": "v12.init",
"op": "undef",
"type": "int"
},
{
"dest": "v11.init",
"op": "undef",
"type": "int"
},
{
"dest": "v10.init",
"op": "undef",
"type": "int"
},
{
"dest": "sq.init",
"op": "undef",
"type": "int"
},
{
"dest": "v0.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"v0.0"
],
"dest": "res.0",
"op": "id",
"type": "int"
},
{
"dest": "v13.1",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v13.1"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.cond.1"
},
{
"args": [
"v9.init",
"v15.0",
"b1",
"for.body.1"
],
"dest": "v9.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v8.init",
"v8.1",
"b1",
"for.body.1"
],
"dest": "v8.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v7.init",
"v12.1",
"b1",
"for.body.1"
],
"dest": "v12.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v6.init",
"v12.1",
"b1",
"for.body.1"
],
"dest": "v12.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v5.init",
"v5.1",
"b1",
"for.body.1"
],
"dest": "v5.0",
"op": "phi",
"type": "bool"
},
{
"args": [
"v4.init",
"v4.1",
"b1",
"for.body.1"
],
"dest": "v4.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v3.init",
"v12.1",
"b1",
"for.body.1"
],
"dest": "v12.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v14.init",
"v14.1",
"b1",
"for.body.1"
],
"dest": "v14.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v13.init",
"v13.1",
"b1",
"for.body.1"
],
"dest": "v13.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v12.init",
"v12.1",
"b1",
"for.body.1"
],
"dest": "v12.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v11.init",
"v11.1",
"b1",
"for.body.1"
],
"dest": "v11.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v10.init",
"v10.1",
"b1",
"for.body.1"
],
"dest": "v10.0",
"op": "phi",
"type": "int"
},
{
"args": [
"sq.init",
"sq.1",
"b1",
"for.body.1"
],
"dest": "sq.0",
"op": "phi",
"type": "int"
},
{
"args": [
"res.0",
"res.2",
"b1",
"for.body.1"
],
"dest": "res.1",
"op": "phi",
"type": "int"
},
{
"args": [
"i.0",
"i.2",
"b1",
"for.body.1"
],
"dest": "i.1",
"op": "phi",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v12.1",
"op": "id",
"type": "int"
},
{
"args": [
"n"
],
"dest": "v4.1",
"op": "id",
"type": "int"
},
{
"args": [
"v12.1",
"v4.1"
],
"dest": "v5.1",
"op": "le",
"type": "bool"
},
{
"args": [
"v5.1"
],
"labels": [
"for.body.1",
"for.end.1"
],
"op": "br"
},
{
"label": "for.body.1"
},
{
"args": [
"i.1"
],
"dest": "v12.1",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v12.1",
"op": "id",
"type": "int"
},
{
"args": [
"v12.1",
"v12.1"
],
"dest": "v8.1",
"op": "mul",
"type": "int"
},
{
"args": [
"v8.1"
],
"dest": "sq.1",
"op": "id",
"type": "int"
},
{
"args": [
"res.1"
],
"dest": "v15.0",
"op": "id",
"type": "int"
},
{
"args": [
"sq.1"
],
"dest": "v10.1",
"op": "id",
"type": "int"
},
{
"args": [
"v10.1",
"v15.0"
],
"dest": "v11.1",
"op": "add",
"type": "int"
},
{
"args": [
"v11.1"
],
"dest": "res.2",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v12.1",
"op": "id",
"type": "int"
},
{
"dest": "v13.1",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v12.1",
"v13.1"
],
"dest": "v14.1",
"op": "add",
"type": "int"
},
{
"args": [
"v14.1"
],
"dest": "i.2",
"op": "id",
"type": "int"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.end.1"
},
{
"args": [
"res.1"
],
"dest": "v15.0",
"op": "id",
"type": "int"
},
{
"args": [
"v15.0"
],
"op": "ret"
}
],
"name": "sumOfSquares",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "v9.init",
"op": "undef",
"type": "int"
},
{
"dest": "v8.init",
"op": "undef",
"type": "int"
},
{
"dest": "v7.init",
"op": "undef",
"type": "int"
},
{
"dest": "v6.init",
"op": "undef",
"type": "int"
},
{
"dest": "v5.init",
"op": "undef",
"type": "bool"
},
{
"dest": "v4.init",
"op": "undef",
"type": "int"
},
{
"dest": "v3.init",
"op": "undef",
"type": "int"
},
{
"dest": "v11.init",
"op": "undef",
"type": "int"
},
{
"dest": "v10.init",
"op": "undef",
"type": "int"
},
{
"dest": "v0.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"v0.0"
],
"dest": "res.0",
"op": "id",
"type": "int"
},
{
"dest": "v2.0",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v2.0"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.cond.1"
},
{
"args": [
"v9.init",
"v9.1",
"b1",
"for.body.1"
],
"dest": "v9.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v8.init",
"v8.1",
"b1",
"for.body.1"
],
"dest": "v8.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v7.init",
"v7.1",
"b1",
"for.body.1"
],
"dest": "v7.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v6.init",
"v6.1",
"b1",
"for.body.1"
],
"dest": "v6.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v5.init",
"v5.1",
"b1",
"for.body.1"
],
"dest": "v5.0",
"op": "phi",
"type": "bool"
},
{
"args": [
"v4.init",
"v4.1",
"b1",
"for.body.1"
],
"dest": "v4.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v3.init",
"v3.1",
"b1",
"for.body.1"
],
"dest": "v3.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v11.init",
"v11.1",
"b1",
"for.body.1"
],
"dest": "v11.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v10.init",
"v10.1",
"b1",
"for.body.1"
],
"dest": "v10.0",
"op": "phi",
"type": "int"
},
{
"args": [
"res.0",
"res.2",
"b1",
"for.body.1"
],
"dest": "res.1",
"op": "phi",
"type": "int"
},
{
"args": [
"i.0",
"i.2",
"b1",
"for.body.1"
],
"dest": "i.1",
"op": "phi",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v3.1",
"op": "id",
"type": "int"
},
{
"args": [
"n"
],
"dest": "v4.1",
"op": "id",
"type": "int"
},
{
"args": [
"v3.1",
"v4.1"
],
"dest": "v5.1",
"op": "le",
"type": "bool"
},
{
"args": [
"v5.1"
],
"labels": [
"for.body.1",
"for.end.1"
],
"op": "br"
},
{
"label": "for.body.1"
},
{
"args": [
"res.1"
],
"dest": "v6.1",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v7.1",
"op": "id",
"type": "int"
},
{
"args": [
"v6.1",
"v7.1"
],
"dest": "v8.1",
"op": "add",
"type": "int"
},
{
"args": [
"v8.1"
],
"dest": "res.2",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v9.1",
"op": "id",
"type": "int"
},
{
"dest": "v10.1",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v9.1",
"v10.1"
],
"dest": "v11.1",
"op": "add",
"type": "int"
},
{
"args": [
"v11.1"
],
"dest": "i.2",
"op": "id",
"type": "int"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.end.1"
},
{
"args": [
"res.1"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"res.1"
],
"dest": "v13.0",
"op": "id",
"type": "int"
},
{
"args": [
"v12.0",
"v13.0"
],
"dest": "v14.0",
"op": "mul",
"type": "int"
},
{
"args": [
"v14.0"
],
"dest": "square.0",
"op": "id",
"type": "int"
},
{
"args": [
"square.0"
],
"dest": "v15.0",
"op": "id",
"type": "int"
},
{
"args": [
"v15.0"
],
"op": "ret"
}
],
"name": "squareOfSum",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"n"
],
"dest": "v0.0",
"op": "id",
"type": "int"
},
{
"args": [
"v0.0"
],
"dest": "sum.0",
"funcs": [
"sumOfSquares"
],
"op": "call",
"type": "int"
},
{
"args": [
"sum.0"
],
"dest": "sum.1",
"op": "id",
"type": "int"
},
{
"args": [
"n"
],
"dest": "v1.0",
"op": "id",
"type": "int"
},
{
"args": [
"v1.0"
],
"dest": "square.0",
"funcs": [
"squareOfSum"
],
"op": "call",
"type": "int"
},
{
"args": [
"square.0"
],
"dest": "square.1",
"op": "id",
"type": "int"
},
{
"args": [
"square.1"
],
"dest": "v2.0",
"op": "id",
"type": "int"
},
{
"args": [
"sum.1"
],
"dest": "v3.0",
"op": "id",
"type": "int"
},
{
"args": [
"v2.0",
"v3.0"
],
"dest": "v4.0",
"op": "sub",
"type": "int"
},
{
"args": [
"v4.0"
],
"dest": "diff.0",
"op": "id",
"type": "int"
},
{
"args": [
"diff.0"
],
"dest": "v5.0",
"op": "id",
"type": "int"
},
{
"args": [
"v5.0"
],
"op": "print"
},
{
"dest": "v6.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"diff.0"
],
"dest": "v7.0",
"op": "id",
"type": "int"
},
{
"args": [],
"op": "ret"
}
],
"name": "main"
}
]
}
{
"functions": [
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "v9.init",
"op": "undef",
"type": "int"
},
{
"dest": "v8.init",
"op": "undef",
"type": "int"
},
{
"dest": "v7.init",
"op": "undef",
"type": "int"
},
{
"dest": "v6.init",
"op": "undef",
"type": "int"
},
{
"dest": "v5.init",
"op": "undef",
"type": "bool"
},
{
"dest": "v4.init",
"op": "undef",
"type": "int"
},
{
"dest": "v3.init",
"op": "undef",
"type": "int"
},
{
"dest": "v14.init",
"op": "undef",
"type": "int"
},
{
"dest": "v13.init",
"op": "undef",
"type": "int"
},
{
"dest": "v12.init",
"op": "undef",
"type": "int"
},
{
"dest": "v11.init",
"op": "undef",
"type": "int"
},
{
"dest": "v10.init",
"op": "undef",
"type": "int"
},
{
"dest": "sq.init",
"op": "undef",
"type": "int"
},
{
"dest": "v0.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"v0.0"
],
"dest": "res.0",
"op": "id",
"type": "int"
},
{
"dest": "v13.1",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v13.1"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.cond.1"
},
{
"args": [
"v9.init",
"v15.0",
"b1",
"for.body.1"
],
"dest": "v9.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v8.init",
"v8.1",
"b1",
"for.body.1"
],
"dest": "v8.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v7.init",
"v12.1",
"b1",
"for.body.1"
],
"dest": "v12.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v6.init",
"v12.1",
"b1",
"for.body.1"
],
"dest": "v12.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v5.init",
"v5.1",
"b1",
"for.body.1"
],
"dest": "v5.0",
"op": "phi",
"type": "bool"
},
{
"args": [
"v4.init",
"v4.1",
"b1",
"for.body.1"
],
"dest": "v4.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v3.init",
"v12.1",
"b1",
"for.body.1"
],
"dest": "v12.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v14.init",
"v14.1",
"b1",
"for.body.1"
],
"dest": "v14.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v13.init",
"v13.1",
"b1",
"for.body.1"
],
"dest": "v13.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v12.init",
"v12.1",
"b1",
"for.body.1"
],
"dest": "v12.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v11.init",
"v11.1",
"b1",
"for.body.1"
],
"dest": "v11.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v10.init",
"v10.1",
"b1",
"for.body.1"
],
"dest": "v10.0",
"op": "phi",
"type": "int"
},
{
"args": [
"sq.init",
"sq.1",
"b1",
"for.body.1"
],
"dest": "sq.0",
"op": "phi",
"type": "int"
},
{
"args": [
"res.0",
"res.2",
"b1",
"for.body.1"
],
"dest": "res.1",
"op": "phi",
"type": "int"
},
{
"args": [
"i.0",
"i.2",
"b1",
"for.body.1"
],
"dest": "i.1",
"op": "phi",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v12.1",
"op": "id",
"type": "int"
},
{
"args": [
"n"
],
"dest": "v4.1",
"op": "id",
"type": "int"
},
{
"args": [
"v12.1",
"v4.1"
],
"dest": "v5.1",
"op": "le",
"type": "bool"
},
{
"args": [
"v5.1"
],
"labels": [
"for.body.1",
"for.end.1"
],
"op": "br"
},
{
"label": "for.body.1"
},
{
"args": [
"i.1"
],
"dest": "v12.1",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v12.1",
"op": "id",
"type": "int"
},
{
"args": [
"v12.1",
"v12.1"
],
"dest": "v8.1",
"op": "mul",
"type": "int"
},
{
"args": [
"v8.1"
],
"dest": "sq.1",
"op": "id",
"type": "int"
},
{
"args": [
"res.1"
],
"dest": "v15.0",
"op": "id",
"type": "int"
},
{
"args": [
"sq.1"
],
"dest": "v10.1",
"op": "id",
"type": "int"
},
{
"args": [
"v10.1",
"v15.0"
],
"dest": "v11.1",
"op": "add",
"type": "int"
},
{
"args": [
"v11.1"
],
"dest": "res.2",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v12.1",
"op": "id",
"type": "int"
},
{
"dest": "v13.1",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v12.1",
"v13.1"
],
"dest": "v14.1",
"op": "add",
"type": "int"
},
{
"args": [
"v14.1"
],
"dest": "i.2",
"op": "id",
"type": "int"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.end.1"
},
{
"args": [
"res.1"
],
"dest": "v15.0",
"op": "id",
"type": "int"
},
{
"args": [
"v15.0"
],
"op": "ret"
}
],
"name": "sumOfSquares",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "v9.init",
"op": "undef",
"type": "int"
},
{
"dest": "v8.init",
"op": "undef",
"type": "int"
},
{
"dest": "v7.init",
"op": "undef",
"type": "int"
},
{
"dest": "v6.init",
"op": "undef",
"type": "int"
},
{
"dest": "v5.init",
"op": "undef",
"type": "bool"
},
{
"dest": "v4.init",
"op": "undef",
"type": "int"
},
{
"dest": "v3.init",
"op": "undef",
"type": "int"
},
{
"dest": "v11.init",
"op": "undef",
"type": "int"
},
{
"dest": "v10.init",
"op": "undef",
"type": "int"
},
{
"dest": "v0.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"v0.0"
],
"dest": "res.0",
"op": "id",
"type": "int"
},
{
"dest": "v10.1",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v10.1"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.cond.1"
},
{
"args": [
"v9.init",
"v3.1",
"b1",
"for.body.1"
],
"dest": "v3.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v8.init",
"v8.1",
"b1",
"for.body.1"
],
"dest": "v8.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v7.init",
"v3.1",
"b1",
"for.body.1"
],
"dest": "v3.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v6.init",
"v12.0",
"b1",
"for.body.1"
],
"dest": "v6.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v5.init",
"v5.1",
"b1",
"for.body.1"
],
"dest": "v5.0",
"op": "phi",
"type": "bool"
},
{
"args": [
"v4.init",
"v4.1",
"b1",
"for.body.1"
],
"dest": "v4.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v3.init",
"v3.1",
"b1",
"for.body.1"
],
"dest": "v3.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v11.init",
"v11.1",
"b1",
"for.body.1"
],
"dest": "v11.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v10.init",
"v10.1",
"b1",
"for.body.1"
],
"dest": "v10.0",
"op": "phi",
"type": "int"
},
{
"args": [
"res.0",
"res.2",
"b1",
"for.body.1"
],
"dest": "res.1",
"op": "phi",
"type": "int"
},
{
"args": [
"i.0",
"i.2",
"b1",
"for.body.1"
],
"dest": "i.1",
"op": "phi",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v3.1",
"op": "id",
"type": "int"
},
{
"args": [
"n"
],
"dest": "v4.1",
"op": "id",
"type": "int"
},
{
"args": [
"v3.1",
"v4.1"
],
"dest": "v5.1",
"op": "le",
"type": "bool"
},
{
"args": [
"v5.1"
],
"labels": [
"for.body.1",
"for.end.1"
],
"op": "br"
},
{
"label": "for.body.1"
},
{
"args": [
"res.1"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v3.1",
"op": "id",
"type": "int"
},
{
"args": [
"v12.0",
"v3.1"
],
"dest": "v8.1",
"op": "add",
"type": "int"
},
{
"args": [
"v8.1"
],
"dest": "res.2",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v3.1",
"op": "id",
"type": "int"
},
{
"dest": "v10.1",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v10.1",
"v3.1"
],
"dest": "v11.1",
"op": "add",
"type": "int"
},
{
"args": [
"v11.1"
],
"dest": "i.2",
"op": "id",
"type": "int"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.end.1"
},
{
"args": [
"res.1"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"res.1"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"v12.0",
"v12.0"
],
"dest": "v14.0",
"op": "mul",
"type": "int"
},
{
"args": [
"v14.0"
],
"dest": "square.0",
"op": "id",
"type": "int"
},
{
"args": [
"square.0"
],
"dest": "v15.0",
"op": "id",
"type": "int"
},
{
"args": [
"v15.0"
],
"op": "ret"
}
],
"name": "squareOfSum",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"n"
],
"dest": "v0.0",
"op": "id",
"type": "int"
},
{
"args": [
"v0.0"
],
"dest": "sum.0",
"funcs": [
"sumOfSquares"
],
"op": "call",
"type": "int"
},
{
"args": [
"sum.0"
],
"dest": "sum.1",
"op": "id",
"type": "int"
},
{
"args": [
"n"
],
"dest": "v1.0",
"op": "id",
"type": "int"
},
{
"args": [
"v1.0"
],
"dest": "square.0",
"funcs": [
"squareOfSum"
],
"op": "call",
"type": "int"
},
{
"args": [
"square.0"
],
"dest": "square.1",
"op": "id",
"type": "int"
},
{
"args": [
"square.1"
],
"dest": "v2.0",
"op": "id",
"type": "int"
},
{
"args": [
"sum.1"
],
"dest": "v3.0",
"op": "id",
"type": "int"
},
{
"args": [
"v2.0",
"v3.0"
],
"dest": "v4.0",
"op": "sub",
"type": "int"
},
{
"args": [
"v4.0"
],
"dest": "diff.0",
"op": "id",
"type": "int"
},
{
"args": [
"diff.0"
],
"dest": "v5.0",
"op": "id",
"type": "int"
},
{
"args": [
"v5.0"
],
"op": "print"
},
{
"dest": "v6.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"diff.0"
],
"dest": "v7.0",
"op": "id",
"type": "int"
},
{
"args": [],
"op": "ret"
}
],
"name": "main"
}
]
}
{
"functions": [
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "v9.init",
"op": "undef",
"type": "int"
},
{
"dest": "v8.init",
"op": "undef",
"type": "int"
},
{
"dest": "v7.init",
"op": "undef",
"type": "int"
},
{
"dest": "v6.init",
"op": "undef",
"type": "int"
},
{
"dest": "v5.init",
"op": "undef",
"type": "bool"
},
{
"dest": "v4.init",
"op": "undef",
"type": "int"
},
{
"dest": "v3.init",
"op": "undef",
"type": "int"
},
{
"dest": "v14.init",
"op": "undef",
"type": "int"
},
{
"dest": "v13.init",
"op": "undef",
"type": "int"
},
{
"dest": "v12.init",
"op": "undef",
"type": "int"
},
{
"dest": "v11.init",
"op": "undef",
"type": "int"
},
{
"dest": "v10.init",
"op": "undef",
"type": "int"
},
{
"dest": "sq.init",
"op": "undef",
"type": "int"
},
{
"dest": "v0.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"v0.0"
],
"dest": "res.0",
"op": "id",
"type": "int"
},
{
"dest": "v13.1",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v13.1"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.cond.1"
},
{
"args": [
"v9.init",
"v15.0",
"b1",
"for.body.1"
],
"dest": "v9.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v8.init",
"v8.1",
"b1",
"for.body.1"
],
"dest": "v8.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v7.init",
"v12.1",
"b1",
"for.body.1"
],
"dest": "v12.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v6.init",
"v12.1",
"b1",
"for.body.1"
],
"dest": "v12.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v5.init",
"v5.1",
"b1",
"for.body.1"
],
"dest": "v5.0",
"op": "phi",
"type": "bool"
},
{
"args": [
"v4.init",
"v4.1",
"b1",
"for.body.1"
],
"dest": "v4.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v3.init",
"v12.1",
"b1",
"for.body.1"
],
"dest": "v12.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v14.init",
"v14.1",
"b1",
"for.body.1"
],
"dest": "v14.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v13.init",
"v13.1",
"b1",
"for.body.1"
],
"dest": "v13.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v12.init",
"v12.1",
"b1",
"for.body.1"
],
"dest": "v12.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v11.init",
"v11.1",
"b1",
"for.body.1"
],
"dest": "v11.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v10.init",
"v10.1",
"b1",
"for.body.1"
],
"dest": "v10.0",
"op": "phi",
"type": "int"
},
{
"args": [
"sq.init",
"sq.1",
"b1",
"for.body.1"
],
"dest": "sq.0",
"op": "phi",
"type": "int"
},
{
"args": [
"res.0",
"res.2",
"b1",
"for.body.1"
],
"dest": "res.1",
"op": "phi",
"type": "int"
},
{
"args": [
"i.0",
"i.2",
"b1",
"for.body.1"
],
"dest": "i.1",
"op": "phi",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v12.1",
"op": "id",
"type": "int"
},
{
"args": [
"n"
],
"dest": "v4.1",
"op": "id",
"type": "int"
},
{
"args": [
"v12.1",
"v4.1"
],
"dest": "v5.1",
"op": "le",
"type": "bool"
},
{
"args": [
"v5.1"
],
"labels": [
"for.body.1",
"for.end.1"
],
"op": "br"
},
{
"label": "for.body.1"
},
{
"args": [
"i.1"
],
"dest": "v12.1",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v12.1",
"op": "id",
"type": "int"
},
{
"args": [
"v12.1",
"v12.1"
],
"dest": "v8.1",
"op": "mul",
"type": "int"
},
{
"args": [
"v8.1"
],
"dest": "sq.1",
"op": "id",
"type": "int"
},
{
"args": [
"res.1"
],
"dest": "v15.0",
"op": "id",
"type": "int"
},
{
"args": [
"sq.1"
],
"dest": "v10.1",
"op": "id",
"type": "int"
},
{
"args": [
"v10.1",
"v15.0"
],
"dest": "v11.1",
"op": "add",
"type": "int"
},
{
"args": [
"v11.1"
],
"dest": "res.2",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v12.1",
"op": "id",
"type": "int"
},
{
"dest": "v13.1",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v12.1",
"v13.1"
],
"dest": "v14.1",
"op": "add",
"type": "int"
},
{
"args": [
"v14.1"
],
"dest": "i.2",
"op": "id",
"type": "int"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.end.1"
},
{
"args": [
"res.1"
],
"dest": "v15.0",
"op": "id",
"type": "int"
},
{
"args": [
"v15.0"
],
"op": "ret"
}
],
"name": "sumOfSquares",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "v9.init",
"op": "undef",
"type": "int"
},
{
"dest": "v8.init",
"op": "undef",
"type": "int"
},
{
"dest": "v7.init",
"op": "undef",
"type": "int"
},
{
"dest": "v6.init",
"op": "undef",
"type": "int"
},
{
"dest": "v5.init",
"op": "undef",
"type": "bool"
},
{
"dest": "v4.init",
"op": "undef",
"type": "int"
},
{
"dest": "v3.init",
"op": "undef",
"type": "int"
},
{
"dest": "v11.init",
"op": "undef",
"type": "int"
},
{
"dest": "v10.init",
"op": "undef",
"type": "int"
},
{
"dest": "v0.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"v0.0"
],
"dest": "res.0",
"op": "id",
"type": "int"
},
{
"dest": "v10.1",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v10.1"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.cond.1"
},
{
"args": [
"v9.init",
"v3.1",
"b1",
"for.body.1"
],
"dest": "v3.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v8.init",
"v8.1",
"b1",
"for.body.1"
],
"dest": "v8.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v7.init",
"v3.1",
"b1",
"for.body.1"
],
"dest": "v3.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v6.init",
"v12.0",
"b1",
"for.body.1"
],
"dest": "v6.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v5.init",
"v5.1",
"b1",
"for.body.1"
],
"dest": "v5.0",
"op": "phi",
"type": "bool"
},
{
"args": [
"v4.init",
"v4.1",
"b1",
"for.body.1"
],
"dest": "v4.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v3.init",
"v3.1",
"b1",
"for.body.1"
],
"dest": "v3.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v11.init",
"v11.1",
"b1",
"for.body.1"
],
"dest": "v11.0",
"op": "phi",
"type": "int"
},
{
"args": [
"v10.init",
"v10.1",
"b1",
"for.body.1"
],
"dest": "v10.0",
"op": "phi",
"type": "int"
},
{
"args": [
"res.0",
"res.2",
"b1",
"for.body.1"
],
"dest": "res.1",
"op": "phi",
"type": "int"
},
{
"args": [
"i.0",
"i.2",
"b1",
"for.body.1"
],
"dest": "i.1",
"op": "phi",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v3.1",
"op": "id",
"type": "int"
},
{
"args": [
"n"
],
"dest": "v4.1",
"op": "id",
"type": "int"
},
{
"args": [
"v3.1",
"v4.1"
],
"dest": "v5.1",
"op": "le",
"type": "bool"
},
{
"args": [
"v5.1"
],
"labels": [
"for.body.1",
"for.end.1"
],
"op": "br"
},
{
"label": "for.body.1"
},
{
"args": [
"res.1"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v3.1",
"op": "id",
"type": "int"
},
{
"args": [
"v12.0",
"v3.1"
],
"dest": "v8.1",
"op": "add",
"type": "int"
},
{
"args": [
"v8.1"
],
"dest": "res.2",
"op": "id",
"type": "int"
},
{
"args": [
"i.1"
],
"dest": "v3.1",
"op": "id",
"type": "int"
},
{
"dest": "v10.1",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"v10.1",
"v3.1"
],
"dest": "v11.1",
"op": "add",
"type": "int"
},
{
"args": [
"v11.1"
],
"dest": "i.2",
"op": "id",
"type": "int"
},
{
"labels": [
"for.cond.1"
],
"op": "jmp"
},
{
"label": "for.end.1"
},
{
"args": [
"res.1"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"res.1"
],
"dest": "v12.0",
"op": "id",
"type": "int"
},
{
"args": [
"v12.0",
"v12.0"
],
"dest": "v14.0",
"op": "mul",
"type": "int"
},
{
"args": [
"v14.0"
],
"dest": "square.0",
"op": "id",
"type": "int"
},
{
"args": [
"square.0"
],
"dest": "v15.0",
"op": "id",
"type": "int"
},
{
"args": [
"v15.0"
],
"op": "ret"
}
],
"name": "squareOfSum",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"n"
],
"dest": "v0.0",
"op": "id",
"type": "int"
},
{
"args": [
"v0.0"
],
"dest": "square.0",
"funcs": [
"sumOfSquares"
],
"op": "call",
"type": "int"
},
{
"args": [
"square.0"
],
"dest": "square.1",
"op": "id",
"type": "int"
},
{
"args": [
"n"
],
"dest": "v0.0",
"op": "id",
"type": "int"
},
{
"args": [
"v0.0"
],
"dest": "square.0",
"funcs": [
"squareOfSum"
],
"op": "call",
"type": "int"
},
{
"args": [
"square.0"
],
"dest": "square.1",
"op": "id",
"type": "int"
},
{
"args": [
"square.1"
],
"dest": "v2.0",
"op": "id",
"type": "int"
},
{
"args": [
"square.1"
],
"dest": "v2.0",
"op": "id",
"type": "int"
},
{
"args": [
"v2.0",
"v2.0"
],
"dest": "v4.0",
"op": "sub",
"type": "int"
},
{
"args": [
"v4.0"
],
"dest": "diff.0",
"op": "id",
"type": "int"
},
{
"args": [
"diff.0"
],
"dest": "v5.0",
"op": "id",
"type": "int"
},
{
"args": [
"v5.0"
],
"op": "print"
},
{
"dest": "v6.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"diff.0"
],
"dest": "v5.0",
"op": "id",
"type": "int"
},
{
"args": [],
"op": "ret"
}
],
"name": "main"
}
]
}
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | bril2txt
Traceback (most recent call last):
File "/home/nya1025/.local/bin/bril2txt", line 10, in <module>
sys.exit(bril2txt())
File "/home/nya1025/.local/share/uv/tools/briltxt/lib/python3.8/site-packages/briltxt.py", line 343, in bril2txt
print_prog(json.load(sys.stdin))
File "/usr/lib/python3.8/json/__init__.py", line 293, in load
return loads(fp.read(),
File "/usr/lib/python3.8/json/__init__.py", line 357, in loads
return _default_decoder.decode(s)
File "/usr/lib/python3.8/json/decoder.py", line 340, in decode
raise JSONDecodeError("Extra data", s, end)
json.decoder.JSONDecodeError: Extra data: line 1084 column 1 (char 19809)
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | bril2txt
Traceback (most recent call last):
File "/home/nya1025/.local/bin/bril2txt", line 10, in <module>
sys.exit(bril2txt())
File "/home/nya1025/.local/share/uv/tools/briltxt/lib/python3.8/site-packages/briltxt.py", line 343, in bril2txt
print_prog(json.load(sys.stdin))
File "/usr/lib/python3.8/json/__init__.py", line 293, in load
return loads(fp.read(),
File "/usr/lib/python3.8/json/__init__.py", line 357, in loads
return _default_decoder.decode(s)
File "/usr/lib/python3.8/json/decoder.py", line 340, in decode
raise JSONDecodeError("Extra data", s, end)
json.decoder.JSONDecodeError: Extra data: line 1084 column 1 (char 19809)
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | bril2txt
@sumOfSquares(n: int): int {
.b1:
v9.init: int = undef;
v8.init: int = undef;
v7.init: int = undef;
v6.init: int = undef;
v5.init: bool = undef;
v4.init: int = undef;
v3.init: int = undef;
v14.init: int = undef;
v13.init: int = undef;
v12.init: int = undef;
v11.init: int = undef;
v10.init: int = undef;
sq.init: int = undef;
v0.0: int = const 0;
res.0: int = id v0.0;
v13.1: int = const 1;
i.0: int = id v13.1;
v9.0: int = id v9.init;
v8.0: int = id v8.init;
v12.0: int = id v7.init;
v12.0: int = id v6.init;
v5.0: bool = id v5.init;
v4.0: int = id v4.init;
v12.0: int = id v3.init;
v14.0: int = id v14.init;
v13.0: int = id v13.init;
v12.0: int = id v12.init;
v11.0: int = id v11.init;
v10.0: int = id v10.init;
sq.0: int = id sq.init;
res.1: int = id res.0;
i.1: int = id i.0;
jmp .for.cond.1;
.for.cond.1:
v12.1: int = id i.1;
v4.1: int = id n;
v5.1: bool = le v12.1 v4.1;
br v5.1 .for.body.1 .for.end.1;
.for.body.1:
v12.1: int = id i.1;
v12.1: int = id i.1;
v8.1: int = mul v12.1 v12.1;
sq.1: int = id v8.1;
v15.0: int = id res.1;
v10.1: int = id sq.1;
v11.1: int = add v10.1 v15.0;
res.2: int = id v11.1;
v12.1: int = id i.1;
v13.1: int = const 1;
v14.1: int = add v12.1 v13.1;
i.2: int = id v14.1;
v9.0: int = id v15.0;
v8.0: int = id v8.1;
v12.0: int = id v12.1;
v12.0: int = id v12.1;
v5.0: bool = id v5.1;
v4.0: int = id v4.1;
v12.0: int = id v12.1;
v14.0: int = id v14.1;
v13.0: int = id v13.1;
v12.0: int = id v12.1;
v11.0: int = id v11.1;
v10.0: int = id v10.1;
sq.0: int = id sq.1;
res.1: int = id res.2;
i.1: int = id i.2;
jmp .for.cond.1;
.for.end.1:
v15.0: int = id res.1;
ret v15.0;
}
@squareOfSum(n: int): int {
.b1:
v9.init: int = undef;
v8.init: int = undef;
v7.init: int = undef;
v6.init: int = undef;
v5.init: bool = undef;
v4.init: int = undef;
v3.init: int = undef;
v11.init: int = undef;
v10.init: int = undef;
v0.0: int = const 0;
res.0: int = id v0.0;
v10.1: int = const 1;
i.0: int = id v10.1;
v3.0: int = id v9.init;
v8.0: int = id v8.init;
v3.0: int = id v7.init;
v6.0: int = id v6.init;
v5.0: bool = id v5.init;
v4.0: int = id v4.init;
v3.0: int = id v3.init;
v11.0: int = id v11.init;
v10.0: int = id v10.init;
res.1: int = id res.0;
i.1: int = id i.0;
jmp .for.cond.1;
.for.cond.1:
v3.1: int = id i.1;
v4.1: int = id n;
v5.1: bool = le v3.1 v4.1;
br v5.1 .for.body.1 .for.end.1;
.for.body.1:
v12.0: int = id res.1;
v3.1: int = id i.1;
v8.1: int = add v12.0 v3.1;
res.2: int = id v8.1;
v3.1: int = id i.1;
v10.1: int = const 1;
v11.1: int = add v10.1 v3.1;
i.2: int = id v11.1;
v3.0: int = id v3.1;
v8.0: int = id v8.1;
v3.0: int = id v3.1;
v6.0: int = id v12.0;
v5.0: bool = id v5.1;
v4.0: int = id v4.1;
v3.0: int = id v3.1;
v11.0: int = id v11.1;
v10.0: int = id v10.1;
res.1: int = id res.2;
i.1: int = id i.2;
jmp .for.cond.1;
.for.end.1:
v12.0: int = id res.1;
v12.0: int = id res.1;
v14.0: int = mul v12.0 v12.0;
square.0: int = id v14.0;
v15.0: int = id square.0;
ret v15.0;
}
@main(n: int) {
.b1:
v0.0: int = id n;
square.0: int = call @sumOfSquares v0.0;
square.1: int = id square.0;
v0.0: int = id n;
square.0: int = call @squareOfSum v0.0;
square.1: int = id square.0;
v2.0: int = id square.1;
v2.0: int = id square.1;
v4.0: int = sub v2.0 v2.0;
diff.0: int = id v4.0;
v5.0: int = id diff.0;
print v5.0;
v6.0: int = const 0;
v5.0: int = id diff.0;
ret;
}
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | bril2tx | bril2tx | bril2tx | bril2tx
resebril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | bril2txt
git commit -m "add renaming, brokenadd bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | brili -p 102 4
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.bril
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | brili -p 2 100
git add bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | brili -p 100
0
total_dyn_inst: 5689
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | brili -p 102txi -p 100
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | brili -p 102tx | bril2tx | bril2tx
resebril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | bril2txt
git commit -m "add renaming, brokenadd bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | brili -p 102 4
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.briltotiensum-sq-diff
25164150
0
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.bril
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | brili -p 10
25164150
total_dyn_inst: 3038
bril2json < benchmarks/core/sum-sq-diff.bril | brili -p 100
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.bril
25164150
25164150
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.bril
bril2json < benchmarks/core/sum-sq-diff.bril | brili -p 100
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.bril
bril2json < benchmarks/core/sum-sq-diff.bril | brili -p 100
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.bril
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | brili -p 102tx | bril2tx | bril2tx
resebril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | bril2txt
git commit -m "add renaming, brokenadd bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | brili -p 102 4
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.briltotienup-arroperfecgvn.shsingle.sh benchmarks/core/ackermann.brigvn.sh
benchmarks/core/ackermann.bril
FAIL (out) benchmarks/core/ackermann.bril 509 7
benchmarks/core/armstrong.bril
FAIL (out) benchmarks/core/armstrong.bril true
benchmarks/core/bbs.bril
benchmarks/core/binary-fmt.bril
benchmarks/core/binpow.bril
FAIL (out) benchmarks/core/binpow.bril 2048 8
benchmarks/core/bitshift.bril
benchmarks/core/bitwise-ops.bril
benchmarks/core/catalan.bril
benchmarks/core/check-primes.bril
benchmarks/core/collatz.bril
benchmarks/core/combination.bril
benchmarks/core/delannoy.bril
benchmarks/core/digital-root.bril
benchmarks/core/euclid.bril
benchmarks/core/fact.bril
benchmarks/core/factors.bril
FAIL (out) benchmarks/core/factors.bril 2
2
3
5 29
29
benchmarks/core/fib_recursive.bril
benchmarks/core/fitsinside.bril
benchmarks/core/fizz-buzz.bril
benchmarks/core/gcd.bril
benchmarks/core/gebmm.bril
^C
sh cs6120/final/test_gvn.shsingle.sh benchmarks/core/sum-sq-diff.briackermann.bril
509
7
sh cs6120/final/test_single.sh benchmarks/core/ackermann.brilgvn.shsingle.sh benchmarks/core/sum-sq-diff.bril
bril2json < benchmarks/core/sum-sq-diff.bril | brili -p 100
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.bril
bril2json < benchmarks/core/sum-sq-diff.bril | brili -p 100
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.bril
bril2json < benchmarks/core/sum-sq-diff.bril | brili -p 103 ackermann.
509
total_dyn_inst: 1464231
bril2json < benchmarks/core/ackermann.bril | brili -p 3 6
sh cs6120/final/test_single.sh benchmarks/core/ackermann.brilgvn.shsingle.sh benchmarks/core/sum-sq-diff.bril
bril2json < benchmarks/core/sum-sq-diff.bril | brili -p 100
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.bril
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | brili -p 103 ackermann
7
total_dyn_inst: 412
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | brili -p 3 brili -p 3 python cs6120/final/gvn.py |
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | brili -p 3 2txt
@ack(m: int, n: int): int {
.b1:
one.0: int = const 0;
one.0: int = const 1;
cond_m.0: bool = eq m one.0;
br cond_m.0 .m_zero .m_nonzero;
.m_zero:
tmp.1: int = add n one.0;
ret tmp.1;
.m_nonzero:
cond_n.0: bool = eq n one.0;
br cond_n.0 .n_zero .n_nonzero;
.n_zero:
m1.0: int = sub m one.0;
tmp.0: int = call @ack m1.0 one.0;
ret tmp.0;
.n_nonzero:
m1.0: int = sub m one.0;
n1.0: int = sub n one.0;
t1.0: int = call @ack m n1.0;
t2.0: int = call @ack m1.0 t1.0;
ret t2.0;
}
@main(m: int, n: int) {
.b1:
tmp.0: int = call @ack m n;
print tmp.0;
ret;
}
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | bril2txt
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | bril2tx
Congruence classes for function ack:
Class arg_m: ['m']
Class arg_n: ['n']
Class const 0: ['zero.0']
Class const 1: ['one.0']
Class eq: ['cond_m.0']
Class add: ['tmp.1']
Class sub: ['m1.0', 'm1.1']
Class call ack: ['t1.0']
Class call ack_0: ['t2.0']
Class call ack_1: ['tmp.0']
Class eq_0: ['cond_n.0']
Class sub_0: ['n1.0']
Congruence classes for function main:
Class arg_m: ['m']
Class arg_n: ['n']
Class call ack: ['tmp.0']
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py
{'m': 'm', 'n': 'n', 'zero.0': 'zero.0', 'one.0': 'one.0', 'cond_m.0': 'cond_m.0', 'tmp.1': 'tmp.1', 'm1.0': 'm1.0', 'm1.1': 'm1.0', 't1.0': 't1.0', 't2.0': 't2.0', 'tmp.0': 'tmp.0', 'cond_n.0': 'cond_n.0', 'n1.0': 'n1.0'}
Congruence classes for function ack:
Class arg_m: ['m']
Class arg_n: ['n']
Class const 0: ['zero.0']
Class const 1: ['one.0']
Class eq: ['cond_m.0']
Class add: ['tmp.1']
Class sub: ['m1.0', 'm1.1']
Class call ack: ['t1.0']
Class call ack_0: ['t2.0']
Class call ack_1: ['tmp.0']
Class eq_0: ['cond_n.0']
Class sub_0: ['n1.0']
{'m': 'm', 'n': 'n', 'tmp.0': 'tmp.0'}
Congruence classes for function main:
Class arg_m: ['m']
Class arg_n: ['n']
Class call ack: ['tmp.0']
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py
{'dest': 'zero.0', 'op': 'const', 'type': 'int', 'value': 0}
zero.0
{'dest': 'one.0', 'op': 'const', 'type': 'int', 'value': 1}
one.0
{'args': ['m', 'zero.0'], 'dest': 'cond_m.0', 'op': 'eq', 'type': 'bool'}
cond_m.0
{'args': ['n', 'one.0'], 'dest': 'tmp.1', 'op': 'add', 'type': 'int'}
tmp.1
{'args': ['n', 'zero.0'], 'dest': 'cond_n.0', 'op': 'eq', 'type': 'bool'}
cond_n.0
{'args': ['m', 'one.0'], 'dest': 'm1.1', 'op': 'sub', 'type': 'int'}
m1.0
{'args': ['m1.1', 'one.0'], 'dest': 'tmp.0', 'funcs': ['ack'], 'op': 'call', 'type': 'int'}
tmp.0
{'args': ['m', 'one.0'], 'dest': 'm1.0', 'op': 'sub', 'type': 'int'}
m1.0
{'args': ['n', 'one.0'], 'dest': 'n1.0', 'op': 'sub', 'type': 'int'}
n1.0
{'args': ['m', 'n1.0'], 'dest': 't1.0', 'funcs': ['ack'], 'op': 'call', 'type': 'int'}
t1.0
{'args': ['m1.0', 't1.0'], 'dest': 't2.0', 'funcs': ['ack'], 'op': 'call', 'type': 'int'}
t2.0
Congruence classes for function ack:
Class arg_m: ['m']
Class arg_n: ['n']
Class const 0: ['zero.0']
Class const 1: ['one.0']
Class eq: ['cond_m.0']
Class add: ['tmp.1']
Class sub: ['m1.0', 'm1.1']
Class call ack: ['t1.0']
Class call ack_0: ['t2.0']
Class call ack_1: ['tmp.0']
Class eq_0: ['cond_n.0']
Class sub_0: ['n1.0']
{'args': ['m', 'n'], 'dest': 'tmp.0', 'funcs': ['ack'], 'op': 'call', 'type': 'int'}
tmp.0
Congruence classes for function main:
Class arg_m: ['m']
Class arg_n: ['n']
Class call ack: ['tmp.0']
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | bril2txt
Traceback (most recent call last):
File "/home/nya1025/.local/bin/bril2txt", line 10, in <module>
sys.exit(bril2txt())
File "/home/nya1025/.local/share/uv/tools/briltxt/lib/python3.8/site-packages/briltxt.py", line 343, in bril2txt
print_prog(json.load(sys.stdin))
File "/usr/lib/python3.8/json/__init__.py", line 293, in load
return loads(fp.read(),
File "/usr/lib/python3.8/json/__init__.py", line 357, in loads
return _default_decoder.decode(s)
File "/usr/lib/python3.8/json/decoder.py", line 337, in decode
obj, end = self.raw_decode(s, idx=_w(s, 0).end())
File "/usr/lib/python3.8/json/decoder.py", line 353, in raw_decode
obj, end = self.scan_once(s, idx)
json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | bril2txt
@ack(m: int, n: int): int {
.b1:
zero.0: int = const 0;
one.0: int = const 1;
cond_m.0: bool = eq m zero.0;
br cond_m.0 .m_zero .m_nonzero;
.m_zero:
tmp.1: int = add n one.0;
ret tmp.1;
.m_nonzero:
cond_n.0: bool = eq n zero.0;
br cond_n.0 .n_zero .n_nonzero;
.n_zero:
m1.0: int = sub m one.0;
tmp.0: int = call @ack m1.0 one.0;
ret tmp.0;
.n_nonzero:
m1.0: int = sub m one.0;
n1.0: int = sub n one.0;
t1.0: int = call @ack m n1.0;
t2.0: int = call @ack m1.0 t1.0;
ret t2.0;
}
@main(m: int, n: int) {
.b1:
tmp.0: int = call @ack m n;
print tmp.0;
ret;
}
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | bril2txt
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | bril2tx | bril2txi -p 3 brili -p 3 6
sh cs6120/final/test_single.sh benchmarks/core/ackermann.brilgvn.shsingle.sh benchmarks/core/sum-sq-diff.brigvn.shsingle.sh benchmarks/core/sum-sq-diff.bril
bril2json < benchmarks/core/sum-sq-diff.bril | brili -p 100
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.bril
bril2json < benchmarks/core/sum-sq-diff.bril | brili -p 100
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.bril
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | brili -p 100
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.bril
bril2json < benchmarks/core/sum-sq-diff.bril | brili -p 100
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.brilgvn.shsingle.sh benchmarks/core/ackermann.bril
bril2json < benchmarks/core/ackermann.bril | brili -p 3 python cs6120/final/gvn.py |
509
total_dyn_inst: 1464232
bril2json < benchmarks/core/ackermann.bril | python cs6120/final/gvn.py | brili -p 3 2tx | bril2txi -p 3 brili -p 3 6
509
total_dyn_inst: 1464231
bril2json < benchmarks/core/ackermann.bril | brili -p 3 python cs6120/final/gvn.py |2tx | bril2txi -p 3 brili -p 3 6
sh cs6120/final/test_single.sh benchmarks/core/ackermann.brilgvn.shsingle.sh benchmarks/core/sum-sq-diff.bri
bril2json < benchmarks/core/sum-sq-diff.bril | brili -p 100
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.bril
bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | brili -p 102tx | bril2tx | bril2tx
resebril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py
resebril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | bril2txt
git commit -m "add renaming, brokenadd bril2json < benchmarks/core/sum-sq-diff.bril | python cs6120/final/gvn.py | brili -p 102 4
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.briltotienup-arroperfecgvn.sh
benchmarks/core/ackermann.bril
benchmarks/core/armstrong.bril
benchmarks/core/bbs.bril
benchmarks/core/binary-fmt.bril
benchmarks/core/binpow.bril
benchmarks/core/bitshift.bril
benchmarks/core/bitwise-ops.bril
benchmarks/core/catalan.bril
benchmarks/core/check-primes.bril
benchmarks/core/collatz.bril
benchmarks/core/combination.bril
benchmarks/core/delannoy.bril
benchmarks/core/digital-root.bril
benchmarks/core/euclid.bril
benchmarks/core/fact.bril
benchmarks/core/factors.bril
benchmarks/core/fib_recursive.bril
benchmarks/core/fitsinside.bril
benchmarks/core/fizz-buzz.bril
benchmarks/core/gcd.bril
benchmarks/core/gebmm.bril
c^C
sh cs6120/final/test_gvn.shbril2json < benchmarks/core/ackermann.bril | brili -p 3 python cs6120/final/gvn.py |2tx | bril2txi -p 3 brili -p 3 6
sh cs6120/final/test_single.sh benchmarks/core/ackermann.brilgvn.shsingle.sh benchmarks/core/sum-sq-diff.brigvn.shsingle.sh benchmarks/core/sum-sq-diff.bricore/up-arrow.bril
65536
65536
sh cs6120/final/test_single.sh benchmarks/core/up-arrow.briltotient.
2023
1632
2023
1632
sh cs6120/final/test_single.sh benchmarks/core/totient.brilsum-sq-diff.
25164150
25164150
sh cs6120/final/test_single.sh benchmarks/core/sum-sq-diff.brildivisors
1
100
2
50
4
25
5
20
10
217
1
100
2
50
4
25
5
20
10
217
sh cs6120/final/test_single.sh benchmarks/core/sum-divisors.brilgits
45
45
sh cs6120/final/test_single.sh benchmarks/core/sum-digits.brilcheck
500500
500500
true
500500
500500
true
sh cs6120/final/test_single.sh benchmarks/core/sum-check.brilbits
3
3
sh cs6120/final/test_single.sh benchmarks/core/sum-bits.brilqrt_bin_search
6120
6120
sh cs6120/final/test_single.sh benchmarks/core/sqrt_bin_search.brilrot13.
23
23
sh cs6120/final/test_single.sh benchmarks/core/rot13.brilreverse.
321
321
sh cs6120/final/test_single.sh benchmarks/core/reverse.brillative-primes
19
17
13
11
9
7
3
1
19
17
13
11
9
7
3
1
sh cs6120/final/test_single.sh benchmarks/core/relative-primes.brilctangles-area-difference.
50
78
28
50
78
28
sh cs6120/final/test_single.sh benchmarks/core/rectangles-area-difference.brilfact.
40320
40320
sh cs6120/final/test_single.sh benchmarks/core/recfact.brilquadratic
-1
3
-1
3
sh cs6120/final/test_single.sh benchmarks/core/quadratic.brilpythagorean_triple
75 100
44 117
35 120
75 100
44 117
35 120
sh cs6120/final/test_single.sh benchmarks/core/pythagorean_triple.brilquadratirecfactangles-area-differenclative-primeversot1sqrt_bin_searcum-bitchecdigitvisosq-diftotienup-arrogvn.shbril2json < benchmarks/core/ackermann.bril | brili -p 3 6
sh cs6120/final/test_gvn.sh
benchmarks/core/ackermann.bril
benchmarks/core/armstrong.bril
benchmarks/core/bbs.bril
benchmarks/core/binary-fmt.bril
benchmarks/core/binpow.bril
benchmarks/core/bitshift.bril
benchmarks/core/bitwise-ops.bril
benchmarks/core/catalan.bril
benchmarks/core/check-primes.bril
benchmarks/core/collatz.bril
benchmarks/core/combination.bril
benchmarks/core/delannoy.bril
benchmarks/core/digital-root.bril
benchmarks/core/euclid.bril
benchmarks/core/fact.bril
benchmarks/core/factors.bril
benchmarks/core/fib_recursive.bril
benchmarks/core/fitsinside.bril
benchmarks/core/fizz-buzz.bril
benchmarks/core/gcd.bril
benchmarks/core/gebmm.bril
FAIL (out) benchmarks/core/gebmm.bril 188
benchmarks/core/geometric-sum.bril
benchmarks/core/hamming.bril
benchmarks/core/hanoi.bril
benchmarks/core/is-decreasing.bril
benchmarks/core/karatsuba.bril
benchmarks/core/lcm.bril
benchmarks/core/loopfact.bril
benchmarks/core/mccarthy91.bril
benchmarks/core/mod_inv.bril
benchmarks/core/mod_pow.bril
benchmarks/core/montgomery.bril
benchmarks/core/orders.bril
benchmarks/core/palindrome.bril
benchmarks/core/pascals-row.bril
benchmarks/core/perfect.bril
benchmarks/core/permutation.bril
benchmarks/core/primes-between.bril
benchmarks/core/pythagorean_triple.bril
benchmarks/core/quadratic.bril
benchmarks/core/recfact.bril
benchmarks/core/rectangles-area-difference.bril
benchmarks/core/relative-primes.bril
benchmarks/core/reverse.bril
benchmarks/core/rot13.bril
benchmarks/core/sqrt_bin_search.bril
benchmarks/core/sum-bits.bril
benchmarks/core/sum-check.bril
benchmarks/core/sum-digits.bril
benchmarks/core/sum-divisors.bril
benchmarks/core/sum-sq-diff.bril
benchmarks/core/totient.bril
benchmarks/core/up-arrow.bril
sh cs6120/final/test_gvn.shgit add .
git commit -m "works on everything, times out n geon gebmm"
[main e0d2d8d] works on everything, times out on gebmm
3 files changed, 25 insertions(+), 22 deletions(-)
git push
Enter passphrase for key '/home/nya1025/.ssh/normal_id':
Enumerating objects: 40, done.
Counting objects:   2% (1/40)
Counting objects:   5% (2/40)
Counting objects:   7% (3/40)
Counting objects:  10% (4/40)
Counting objects:  12% (5/40)
Counting objects:  15% (6/40)
Counting objects:  17% (7/40)
Counting objects:  20% (8/40)
Counting objects:  22% (9/40)
Counting objects:  25% (10/40)
Counting objects:  27% (11/40)
Counting objects:  30% (12/40)
Counting objects:  32% (13/40)
Counting objects:  35% (14/40)
Counting objects:  37% (15/40)
Counting objects:  40% (16/40)
Counting objects:  42% (17/40)
Counting objects:  45% (18/40)
Counting objects:  47% (19/40)
Counting objects:  50% (20/40)
Counting objects:  52% (21/40)
Counting objects:  55% (22/40)
Counting objects:  57% (23/40)
Counting objects:  60% (24/40)
Counting objects:  62% (25/40)
Counting objects:  65% (26/40)
Counting objects:  67% (27/40)
Counting objects:  70% (28/40)
Counting objects:  72% (29/40)
Counting objects:  75% (30/40)
Counting objects:  77% (31/40)
Counting objects:  80% (32/40)
Counting objects:  82% (33/40)
Counting objects:  85% (34/40)
Counting objects:  87% (35/40)
Counting objects:  90% (36/40)
Counting objects:  92% (37/40)
Counting objects:  95% (38/40)
Counting objects:  97% (39/40)
Counting objects: 100% (40/40)
Counting objects: 100% (40/40), done.
Delta compression using up to 16 threads
Compressing objects:   3% (1/26)
Compressing objects:   7% (2/26)
Compressing objects:  11% (3/26)
Compressing objects:  15% (4/26)
Compressing objects:  19% (5/26)
Compressing objects:  23% (6/26)
Compressing objects:  26% (7/26)
Compressing objects:  30% (8/26)
Compressing objects:  34% (9/26)
Compressing objects:  38% (10/26)
Compressing objects:  42% (11/26)
Compressing objects:  46% (12/26)
Compressing objects:  50% (13/26)
Compressing objects:  53% (14/26)
Compressing objects:  57% (15/26)
Compressing objects:  61% (16/26)
Compressing objects:  65% (17/26)
Compressing objects:  69% (18/26)
Compressing objects:  73% (19/26)
Compressing objects:  76% (20/26)
Compressing objects:  80% (21/26)
Compressing objects:  84% (22/26)
Compressing objects:  88% (23/26)
Compressing objects:  92% (24/26)
Compressing objects:  96% (25/26)
Compressing objects: 100% (26/26)
Compressing objects: 100% (26/26), done.
Writing objects:   3% (1/26)
Writing objects:   7% (2/26)
Writing objects:  11% (3/26)
Writing objects:  15% (4/26)
Writing objects:  19% (5/26)
Writing objects:  23% (6/26)
Writing objects:  30% (8/26)
Writing objects:  34% (9/26)
Writing objects:  38% (10/26)
Writing objects:  42% (11/26)
Writing objects:  46% (12/26)
Writing objects:  50% (13/26)
Writing objects:  53% (14/26)
Writing objects:  57% (15/26)
Writing objects:  61% (16/26)
Writing objects:  65% (17/26)
Writing objects:  69% (18/26)
Writing objects:  73% (19/26)
Writing objects:  76% (20/26)
Writing objects:  80% (21/26)
Writing objects:  84% (22/26)
Writing objects:  88% (23/26)
Writing objects:  92% (24/26)
Writing objects:  96% (25/26)
Writing objects: 100% (26/26)
Writing objects: 100% (26/26), 6.30 KiB | 2.10 MiB/s, done.
Total 26 (delta 18), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas:   0% (0/18)
remote: Resolving deltas:   5% (1/18)
remote: Resolving deltas:  11% (2/18)
remote: Resolving deltas:  16% (3/18)
remote: Resolving deltas:  22% (4/18)
remote: Resolving deltas:  27% (5/18)
remote: Resolving deltas:  33% (6/18)
remote: Resolving deltas:  38% (7/18)
remote: Resolving deltas:  44% (8/18)
remote: Resolving deltas:  50% (9/18)
remote: Resolving deltas:  55% (10/18)
remote: Resolving deltas:  61% (11/18)
remote: Resolving deltas:  66% (12/18)
remote: Resolving deltas:  72% (13/18)
remote: Resolving deltas:  77% (14/18)
remote: Resolving deltas:  83% (15/18)
remote: Resolving deltas:  88% (16/18)
remote: Resolving deltas:  94% (17/18)
remote: Resolving deltas: 100% (18/18)
remote: Resolving deltas: 100% (18/18), completed with 10 local objects.
To github.com:aw578/bril.git
ad0520e..e0d2d8d  main -> main
git puscommit -m "works on everything, times out on gebmm"
add sh cs6120/final/test_gvn.shsingle.sh benchmarks/core/pythagorean_triple.brigebmm.
cs6120/final/test_single.sh: 10: cannot open benchmarks/core/gebmm.: No such file
cs6120/final/test_single.sh: 20: cannot open benchmarks/core/gebmm.: No such file
cs6120/final/test_single.sh: 21: cannot open benchmarks/core/gebmm.: No such file
/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (2.2.3) or chardet (3.0.4) doesn't match a supported version!
warnings.warn("urllib3 ({}) or chardet ({}) doesn't match a supported "
Traceback (most recent call last):
File "cs6120/final/gvn.py", line 118, in <module>
main()
File "cs6120/final/gvn.py", line 77, in main
bril_program = json.loads(program_str)
File "/usr/lib/python3.8/json/__init__.py", line 357, in loads
return _default_decoder.decode(s)
File "/usr/lib/python3.8/json/decoder.py", line 337, in decode
obj, end = self.raw_decode(s, idx=_w(s, 0).end())
File "/usr/lib/python3.8/json/decoder.py", line 355, in raw_decode
raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
sh cs6120/final/test_single.sh benchmarks/core/gebmm. bril
188
^C
sh cs6120/final/test_single.sh benchmarks/core/gebmm.bril
git puscommit -m "works on everything, times out on gebmm"
add sh cs6120/final/test_gvn.shsingle.sh benchmarks/core/pythagorean_triple.briquadratirecfactangles-area-differenclative-primeversot1sqrt_bin_searcum-bitchecdigitvisosq-diftotienup-arrogvn.shbril2json < benchmarks/core/ackermann.bril | brili -p 3 | python cs6120/final/gvn.py | brili -p 3 gebmm.2txt
@main(a: int, b: int, dim1: int, dim2: int, dim3: int) {
.b1:
k_lt_dim2.init: bool = undef;
k.init: int = undef;
j_lt_dim3.init: bool = undef;
j.init: int = undef;
index.init: int = undef;
i_lt_dim1.init: bool = undef;
dp_bit.init: int = undef;
dot_product_odd.init: bool = undef;
dot_product.init: int = undef;
b_bit.init: int = undef;
a_bit_b_bit.init: int = undef;
a_bit.init: int = undef;
one.0: int = const 1;
i.0: int = const -1;
dot_product.2: int = const 0;
output.1: int = id dot_product.2;
k_lt_dim2.0: bool = id k_lt_dim2.init;
k.0: int = id k.init;
j_lt_dim3.0: bool = id j_lt_dim3.init;
j.0: int = id j.init;
index.0: int = id index.init;
i_lt_dim1.0: bool = id i_lt_dim1.init;
i.1: int = id i.0;
dp_bit.0: int = id dp_bit.init;
dot_product_odd.0: bool = id dot_product_odd.init;
dot_product.0: int = id dot_product.init;
b_bit.0: int = id b_bit.init;
a_bit_b_bit.0: int = id a_bit_b_bit.init;
a_bit.0: int = id a_bit.init;
jmp .row_loop;
.row_loop:
i.0: int = const -1;
i.2: int = add i.1 one.0;
i_lt_dim1.1: bool = lt i.2 dim1;
output.2: int = id output.1;
k_lt_dim2.1: bool = id k_lt_dim2.0;
k.1: int = id k.0;
j_lt_dim3.1: bool = id j_lt_dim3.0;
j.2: int = id i.0;
index.1: int = id index.0;
dp_bit.1: int = id dp_bit.0;
dot_product_odd.1: bool = id dot_product_odd.0;
dot_product.1: int = id dot_product.0;
b_bit.1: int = id b_bit.0;
a_bit_b_bit.1: int = id a_bit_b_bit.0;
a_bit.1: int = id a_bit.0;
br i_lt_dim1.1 .col_loop .return;
.col_loop:
i.0: int = const -1;
j.3: int = add j.2 one.0;
dot_product.2: int = const 0;
j_lt_dim3.2: bool = lt j.3 dim3;
output.1: int = id output.2;
k_lt_dim2.0: bool = id k_lt_dim2.1;
k.0: int = id i.0;
j_lt_dim3.0: bool = id j_lt_dim3.2;
j.0: int = id j.3;
index.0: int = id index.1;
i_lt_dim1.0: bool = id i_lt_dim1.1;
i.1: int = id i.2;
dp_bit.0: int = id dp_bit.1;
dot_product_odd.0: bool = id dot_product_odd.1;
dot_product.0: int = id dot_product.2;
b_bit.0: int = id b_bit.1;
a_bit_b_bit.0: int = id a_bit_b_bit.1;
a_bit.0: int = id a_bit.1;
k_lt_dim2.2: bool = id k_lt_dim2.1;
i.1: int = id i.0;
dot_product.3: int = id dot_product.2;
b_bit.2: int = id b_bit.1;
a_bit_b_bit.2: int = id a_bit_b_bit.1;
a_bit.2: int = id a_bit.1;
br j_lt_dim3.2 .inner_loop .row_loop;
.inner_loop:
i.2: int = add i.1 one.0;
k_lt_dim2.3: bool = lt i.2 dim2;
br k_lt_dim2.3 .multiply .end_col;
.multiply:
a_bit.3: int = call @mat_bitsel a dim2 i.2 i.2;
b_bit.3: int = call @mat_bitsel b dim3 i.2 j.3;
a_bit_b_bit.3: int = mul a_bit.3 b_bit.3;
dot_product.4: int = add a_bit_b_bit.3 dot_product.3;
k_lt_dim2.2: bool = id k_lt_dim2.3;
i.1: int = id i.2;
dot_product.3: int = id dot_product.4;
b_bit.2: int = id b_bit.3;
a_bit_b_bit.2: int = id a_bit_b_bit.3;
a_bit.2: int = id a_bit.3;
jmp .inner_loop;
.end_col:
dot_product_odd.2: bool = call @is_odd dot_product.3;
output.2: int = id output.2;
k_lt_dim2.1: bool = id k_lt_dim2.3;
k.1: int = id i.2;
j_lt_dim3.1: bool = id j_lt_dim3.2;
j.2: int = id j.3;
index.1: int = id index.1;
dp_bit.1: int = id dp_bit.1;
dot_product_odd.1: bool = id dot_product_odd.2;
dot_product.1: int = id dot_product.3;
b_bit.1: int = id b_bit.2;
a_bit_b_bit.1: int = id a_bit_b_bit.2;
a_bit.1: int = id a_bit.2;
br dot_product_odd.2 .add_dp .col_loop;
.add_dp:
index.2: int = call @mat_packed_index i.2 j.3 dim3;
dp_bit.2: int = call @pow2 index.2;
output.3: int = add dp_bit.2 output.2;
output.2: int = id output.3;
k_lt_dim2.1: bool = id k_lt_dim2.3;
k.1: int = id i.2;
j_lt_dim3.1: bool = id j_lt_dim3.2;
j.2: int = id j.3;
index.1: int = id index.2;
dp_bit.1: int = id dp_bit.2;
dot_product_odd.1: bool = id dot_product_odd.2;
dot_product.1: int = id dot_product.3;
b_bit.1: int = id b_bit.2;
a_bit_b_bit.1: int = id a_bit_b_bit.2;
a_bit.1: int = id a_bit.2;
jmp .col_loop;
.return:
print output.1;
ret;
}
@mat_bitsel(m: int, cols: int, i: int, j: int): int {
.b1:
index.0: int = call @mat_packed_index i j cols;
ret_val.0: bool = call @bitsel m index.0;
br ret_val.0 .ret_one .ret_zero;
.ret_one:
one.0: int = const 1;
ret one.0;
.ret_zero:
zero.0: int = const 0;
ret zero.0;
}
@mat_packed_index(i: int, j: int, cols: int): int {
.b1:
index.0: int = mul cols i;
index.1: int = add index.0 j;
ret index.1;
}
@pow2(n: int): int {
.b1:
i_lt_n.init: bool = undef;
one.0: int = const 1;
two.0: int = const 2;
i.0: int = const 0;
one.0: int = const 1;
result.1: int = id one.0;
i_lt_n.0: bool = id i_lt_n.init;
i.1: int = id i.0;
jmp .loop;
.loop:
i_lt_n.1: bool = lt i.1 n;
br i_lt_n.1 .multiply .return;
.multiply:
result.2: int = mul result.1 two.0;
i.2: int = add i.1 one.0;
result.1: int = id result.2;
i_lt_n.0: bool = id i_lt_n.1;
i.1: int = id i.2;
jmp .loop;
.return:
ret result.1;
}
@bitsel(m: int, i: int): bool {
.b1:
i_eq_zero.init: bool = undef;
zero.0: int = const 0;
one.0: int = const 1;
two.0: int = const 2;
m.0: int = id m;
i_eq_zero.0: bool = id i_eq_zero.init;
i.0: int = id i;
jmp .loop;
.loop:
i_eq_zero.1: bool = eq i.0 zero.0;
br i_eq_zero.1 .return .divide;
.divide:
m.1: int = div m.0 two.0;
i.1: int = sub i.0 one.0;
m.0: int = id m.1;
i_eq_zero.0: bool = id i_eq_zero.1;
i.0: int = id i.1;
jmp .loop;
.return:
m_bit.0: bool = call @is_odd m.0;
ret m_bit.0;
}
@abs(n: int): int {
.b1:
zero.0: int = const 0;
is_neg.0: bool = lt n zero.0;
n.1: int = id n;
br is_neg.0 .negative .positive;
.negative:
n.0: int = sub zero.0 n;
n.1: int = id n.0;
jmp .positive;
.positive:
ret n.1;
}
@is_even(n: int): bool {
.b1:
n0.0: int = call @abs n;
one.0: int = const 1;
two.0: int = const 2;
np1.0: int = add n0.0 one.0;
half.0: int = div n0.0 two.0;
np1_half.0: int = div np1.0 two.0;
ret_val.0: bool = eq half.0 np1_half.0;
ret ret_val.0;
}
@is_odd(n: int): bool {
.b1:
is_even.0: bool = call @is_even n;
ret_val.0: bool = not is_even.0;
ret ret_val.0;
}
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | bril2txtemp_ssa.p
sh cs6120/final/test_single.sh benchmarks/core/gebmm.bril
git pussh cs6120/final/test_single.sh benchmarks/core/gebmm.
git puscommit -m "works on everything, times out on gebmm"
add sh cs6120/final/test_gvn.shsingle.sh benchmarks/core/pythagorean_triple.briquadratipythagorean_triplgvn.shgit add commit -m "works on everything, times out on gebmm"
pussh cs6120/final/test_single.sh benchmarks/core/gebmm.bril
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | bril2txi -p 2791 57 4 3 2
188
total_dyn_inst: 5859
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | brili -p 2791 57 4 3 2xtxt
@main(a: int, b: int, dim1: int, dim2: int, dim3: int) {
.b1:
k_lt_dim2.init: bool = undef;
k.init: int = undef;
j_lt_dim3.init: bool = undef;
j.init: int = undef;
index.init: int = undef;
i_lt_dim1.init: bool = undef;
dp_bit.init: int = undef;
dot_product_odd.init: bool = undef;
dot_product.init: int = undef;
b_bit.init: int = undef;
a_bit_b_bit.init: int = undef;
a_bit.init: int = undef;
one.0: int = const 1;
i.0: int = const -1;
output.0: int = const 0;
set a_bit.0 a_bit.init;
set a_bit_b_bit.0 a_bit_b_bit.init;
set b_bit.0 b_bit.init;
set dot_product.0 dot_product.init;
set dot_product_odd.0 dot_product_odd.init;
set dp_bit.0 dp_bit.init;
set i.1 i.0;
set i_lt_dim1.0 i_lt_dim1.init;
set index.0 index.init;
set j.0 j.init;
set j_lt_dim3.0 j_lt_dim3.init;
set k.0 k.init;
set k_lt_dim2.0 k_lt_dim2.init;
set output.1 output.0;
jmp .row_loop;
.row_loop:
output.1: int = get;
k_lt_dim2.0: bool = get;
k.0: int = get;
j_lt_dim3.0: bool = get;
j.0: int = get;
index.0: int = get;
i_lt_dim1.0: bool = get;
i.1: int = get;
dp_bit.0: int = get;
dot_product_odd.0: bool = get;
dot_product.0: int = get;
b_bit.0: int = get;
a_bit_b_bit.0: int = get;
a_bit.0: int = get;
j.1: int = const -1;
i.2: int = add i.1 one.0;
i_lt_dim1.1: bool = lt i.2 dim1;
set a_bit.1 a_bit.0;
set a_bit_b_bit.1 a_bit_b_bit.0;
set b_bit.1 b_bit.0;
set dot_product.1 dot_product.0;
set dot_product_odd.1 dot_product_odd.0;
set dp_bit.1 dp_bit.0;
set index.1 index.0;
set j.2 j.1;
set j_lt_dim3.1 j_lt_dim3.0;
set k.1 k.0;
set k_lt_dim2.1 k_lt_dim2.0;
set output.2 output.1;
br i_lt_dim1.1 .col_loop .return;
.col_loop:
output.2: int = get;
k_lt_dim2.1: bool = get;
k.1: int = get;
j_lt_dim3.1: bool = get;
j.2: int = get;
index.1: int = get;
dp_bit.1: int = get;
dot_product_odd.1: bool = get;
dot_product.1: int = get;
b_bit.1: int = get;
a_bit_b_bit.1: int = get;
a_bit.1: int = get;
k.2: int = const -1;
j.3: int = add j.2 one.0;
dot_product.2: int = const 0;
j_lt_dim3.2: bool = lt j.3 dim3;
set a_bit.2 a_bit.1;
set a_bit_b_bit.2 a_bit_b_bit.1;
set b_bit.2 b_bit.1;
set dot_product.3 dot_product.2;
set k.3 k.2;
set k_lt_dim2.2 k_lt_dim2.1;
set a_bit.0 a_bit.1;
set a_bit_b_bit.0 a_bit_b_bit.1;
set b_bit.0 b_bit.1;
set dot_product.0 dot_product.2;
set dot_product_odd.0 dot_product_odd.1;
set dp_bit.0 dp_bit.1;
set i.1 i.2;
set i_lt_dim1.0 i_lt_dim1.1;
set index.0 index.1;
set j.0 j.3;
set j_lt_dim3.0 j_lt_dim3.2;
set k.0 k.2;
set k_lt_dim2.0 k_lt_dim2.1;
set output.1 output.2;
br j_lt_dim3.2 .inner_loop .row_loop;
.inner_loop:
k_lt_dim2.2: bool = get;
k.3: int = get;
dot_product.3: int = get;
b_bit.2: int = get;
a_bit_b_bit.2: int = get;
a_bit.2: int = get;
k.4: int = add k.3 one.0;
k_lt_dim2.3: bool = lt k.4 dim2;
br k_lt_dim2.3 .multiply .end_col;
.multiply:
a_bit.3: int = call @mat_bitsel a dim2 i.2 k.4;
b_bit.3: int = call @mat_bitsel b dim3 k.4 j.3;
a_bit_b_bit.3: int = mul a_bit.3 b_bit.3;
dot_product.4: int = add dot_product.3 a_bit_b_bit.3;
set a_bit.2 a_bit.3;
set a_bit_b_bit.2 a_bit_b_bit.3;
set b_bit.2 b_bit.3;
set dot_product.3 dot_product.4;
set k.3 k.4;
set k_lt_dim2.2 k_lt_dim2.3;
jmp .inner_loop;
.end_col:
dot_product_odd.2: bool = call @is_odd dot_product.3;
set a_bit.1 a_bit.2;
set a_bit_b_bit.1 a_bit_b_bit.2;
set b_bit.1 b_bit.2;
set dot_product.1 dot_product.3;
set dot_product_odd.1 dot_product_odd.2;
set dp_bit.1 dp_bit.1;
set index.1 index.1;
set j.2 j.3;
set j_lt_dim3.1 j_lt_dim3.2;
set k.1 k.4;
set k_lt_dim2.1 k_lt_dim2.3;
set output.2 output.2;
br dot_product_odd.2 .add_dp .col_loop;
.add_dp:
index.2: int = call @mat_packed_index i.2 j.3 dim3;
dp_bit.2: int = call @pow2 index.2;
output.3: int = add output.2 dp_bit.2;
set a_bit.1 a_bit.2;
set a_bit_b_bit.1 a_bit_b_bit.2;
set b_bit.1 b_bit.2;
set dot_product.1 dot_product.3;
set dot_product_odd.1 dot_product_odd.2;
set dp_bit.1 dp_bit.2;
set index.1 index.2;
set j.2 j.3;
set j_lt_dim3.1 j_lt_dim3.2;
set k.1 k.4;
set k_lt_dim2.1 k_lt_dim2.3;
set output.2 output.3;
jmp .col_loop;
.return:
print output.1;
ret;
}
@mat_bitsel(m: int, cols: int, i: int, j: int): int {
.b1:
index.0: int = call @mat_packed_index i j cols;
ret_val.0: bool = call @bitsel m index.0;
br ret_val.0 .ret_one .ret_zero;
.ret_one:
one.0: int = const 1;
ret one.0;
.ret_zero:
zero.0: int = const 0;
ret zero.0;
}
@mat_packed_index(i: int, j: int, cols: int): int {
.b1:
index.0: int = mul i cols;
index.1: int = add index.0 j;
ret index.1;
}
@pow2(n: int): int {
.b1:
i_lt_n.init: bool = undef;
one.0: int = const 1;
two.0: int = const 2;
i.0: int = const 0;
result.0: int = const 1;
set i.1 i.0;
set i_lt_n.0 i_lt_n.init;
set result.1 result.0;
jmp .loop;
.loop:
result.1: int = get;
i_lt_n.0: bool = get;
i.1: int = get;
i_lt_n.1: bool = lt i.1 n;
br i_lt_n.1 .multiply .return;
.multiply:
result.2: int = mul result.1 two.0;
i.2: int = add i.1 one.0;
set i.1 i.2;
set i_lt_n.0 i_lt_n.1;
set result.1 result.2;
jmp .loop;
.return:
ret result.1;
}
@bitsel(m: int, i: int): bool {
.b1:
i_eq_zero.init: bool = undef;
zero.0: int = const 0;
one.0: int = const 1;
two.0: int = const 2;
set i.0 i;
set i_eq_zero.0 i_eq_zero.init;
set m.0 m;
jmp .loop;
.loop:
m.0: int = get;
i_eq_zero.0: bool = get;
i.0: int = get;
i_eq_zero.1: bool = eq i.0 zero.0;
br i_eq_zero.1 .return .divide;
.divide:
m.1: int = div m.0 two.0;
i.1: int = sub i.0 one.0;
set i.0 i.1;
set i_eq_zero.0 i_eq_zero.1;
set m.0 m.1;
jmp .loop;
.return:
m_bit.0: bool = call @is_odd m.0;
ret m_bit.0;
}
@abs(n: int): int {
.b1:
zero.0: int = const 0;
is_neg.0: bool = lt n zero.0;
set n.1 n;
br is_neg.0 .negative .positive;
.negative:
n.0: int = sub zero.0 n;
set n.1 n.0;
jmp .positive;
.positive:
n.1: int = get;
ret n.1;
}
@is_even(n: int): bool {
.b1:
n0.0: int = call @abs n;
one.0: int = const 1;
two.0: int = const 2;
np1.0: int = add n0.0 one.0;
half.0: int = div n0.0 two.0;
np1_half.0: int = div np1.0 two.0;
ret_val.0: bool = eq half.0 np1_half.0;
ret ret_val.0;
}
@is_odd(n: int): bool {
.b1:
is_even.0: bool = call @is_even n;
ret_val.0: bool = not is_even.0;
ret ret_val.0;
}
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | bril2txi -p 2791 57 4 3 gvn.py | bril2txt
sh cs6120/final/test_single.sh benchmarks/core/gebmm.bril
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | bril2txt
sh cs6120/final/test_single.sh benchmarks/core/gebmm.bril
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | bril2txi -p 2971 57 4 3 2
159
total_dyn_inst: 4598
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2971 57 4 3 temp_ssa.py | bril2txi -p 2791 57 4 3 2
188
total_dyn_inst: 5859
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | brili -p 2791 57 4 3 gvn.py | brili -p 292txt
@main(a: int, b: int, dim1: int, dim2: int, dim3: int) {
.b1:
k_lt_dim2.init: bool = undef;
k.init: int = undef;
j_lt_dim3.init: bool = undef;
j.init: int = undef;
index.init: int = undef;
i_lt_dim1.init: bool = undef;
dp_bit.init: int = undef;
dot_product_odd.init: bool = undef;
dot_product.init: int = undef;
b_bit.init: int = undef;
a_bit_b_bit.init: int = undef;
a_bit.init: int = undef;
one.0: int = const 1;
i.0: int = const -1;
output.0: int = const 0;
output.1: int = id output.0;
k_lt_dim2.0: bool = id k_lt_dim2.init;
k.0: int = id k.init;
j_lt_dim3.0: bool = id j_lt_dim3.init;
j.0: int = id j.init;
index.0: int = id index.init;
i_lt_dim1.0: bool = id i_lt_dim1.init;
i.1: int = id i.0;
dp_bit.0: int = id dp_bit.init;
dot_product_odd.0: bool = id dot_product_odd.init;
dot_product.0: int = id dot_product.init;
b_bit.0: int = id b_bit.init;
a_bit_b_bit.0: int = id a_bit_b_bit.init;
a_bit.0: int = id a_bit.init;
jmp .row_loop;
.row_loop:
j.1: int = const -1;
i.2: int = add i.1 one.0;
i_lt_dim1.1: bool = lt i.2 dim1;
output.2: int = id output.1;
k_lt_dim2.1: bool = id k_lt_dim2.0;
k.1: int = id k.0;
j_lt_dim3.1: bool = id j_lt_dim3.0;
j.2: int = id j.1;
index.1: int = id index.0;
dp_bit.1: int = id dp_bit.0;
dot_product_odd.1: bool = id dot_product_odd.0;
dot_product.1: int = id dot_product.0;
b_bit.1: int = id b_bit.0;
a_bit_b_bit.1: int = id a_bit_b_bit.0;
a_bit.1: int = id a_bit.0;
br i_lt_dim1.1 .col_loop .return;
.col_loop:
k.2: int = const -1;
j.3: int = add j.2 one.0;
dot_product.2: int = const 0;
j_lt_dim3.2: bool = lt j.3 dim3;
output.1: int = id output.2;
k_lt_dim2.0: bool = id k_lt_dim2.1;
k.0: int = id k.2;
j_lt_dim3.0: bool = id j_lt_dim3.2;
j.0: int = id j.3;
index.0: int = id index.1;
i_lt_dim1.0: bool = id i_lt_dim1.1;
i.1: int = id i.2;
dp_bit.0: int = id dp_bit.1;
dot_product_odd.0: bool = id dot_product_odd.1;
dot_product.0: int = id dot_product.2;
b_bit.0: int = id b_bit.1;
a_bit_b_bit.0: int = id a_bit_b_bit.1;
a_bit.0: int = id a_bit.1;
k_lt_dim2.2: bool = id k_lt_dim2.1;
k.3: int = id k.2;
dot_product.3: int = id dot_product.2;
b_bit.2: int = id b_bit.1;
a_bit_b_bit.2: int = id a_bit_b_bit.1;
a_bit.2: int = id a_bit.1;
br j_lt_dim3.2 .inner_loop .row_loop;
.inner_loop:
k.4: int = add k.3 one.0;
k_lt_dim2.3: bool = lt k.4 dim2;
br k_lt_dim2.3 .multiply .end_col;
.multiply:
a_bit.3: int = call @mat_bitsel a dim2 i.2 k.4;
b_bit.3: int = call @mat_bitsel b dim3 k.4 j.3;
a_bit_b_bit.3: int = mul a_bit.3 b_bit.3;
dot_product.4: int = add a_bit_b_bit.3 dot_product.3;
k_lt_dim2.2: bool = id k_lt_dim2.3;
k.3: int = id k.4;
dot_product.3: int = id dot_product.4;
b_bit.2: int = id b_bit.3;
a_bit_b_bit.2: int = id a_bit_b_bit.3;
a_bit.2: int = id a_bit.3;
jmp .inner_loop;
.end_col:
dot_product_odd.2: bool = call @is_odd dot_product.3;
output.2: int = id output.2;
k_lt_dim2.1: bool = id k_lt_dim2.3;
k.1: int = id k.4;
j_lt_dim3.1: bool = id j_lt_dim3.2;
j.2: int = id j.3;
index.1: int = id index.1;
dp_bit.1: int = id dp_bit.1;
dot_product_odd.1: bool = id dot_product_odd.2;
dot_product.1: int = id dot_product.3;
b_bit.1: int = id b_bit.2;
a_bit_b_bit.1: int = id a_bit_b_bit.2;
a_bit.1: int = id a_bit.2;
br dot_product_odd.2 .add_dp .col_loop;
.add_dp:
index.2: int = call @mat_packed_index i.2 j.3 dim3;
dp_bit.2: int = call @pow2 index.2;
output.3: int = add dp_bit.2 output.2;
output.2: int = id output.3;
k_lt_dim2.1: bool = id k_lt_dim2.3;
k.1: int = id k.4;
j_lt_dim3.1: bool = id j_lt_dim3.2;
j.2: int = id j.3;
index.1: int = id index.2;
dp_bit.1: int = id dp_bit.2;
dot_product_odd.1: bool = id dot_product_odd.2;
dot_product.1: int = id dot_product.3;
b_bit.1: int = id b_bit.2;
a_bit_b_bit.1: int = id a_bit_b_bit.2;
a_bit.1: int = id a_bit.2;
jmp .col_loop;
.return:
print output.1;
ret;
}
@mat_bitsel(m: int, cols: int, i: int, j: int): int {
.b1:
index.0: int = call @mat_packed_index i j cols;
ret_val.0: bool = call @bitsel m index.0;
br ret_val.0 .ret_one .ret_zero;
.ret_one:
one.0: int = const 1;
ret one.0;
.ret_zero:
zero.0: int = const 0;
ret zero.0;
}
@mat_packed_index(i: int, j: int, cols: int): int {
.b1:
index.0: int = mul cols i;
index.1: int = add index.0 j;
ret index.1;
}
@pow2(n: int): int {
.b1:
i_lt_n.init: bool = undef;
one.0: int = const 1;
two.0: int = const 2;
i.0: int = const 0;
result.0: int = const 1;
result.1: int = id result.0;
i_lt_n.0: bool = id i_lt_n.init;
i.1: int = id i.0;
jmp .loop;
.loop:
i_lt_n.1: bool = lt i.1 n;
br i_lt_n.1 .multiply .return;
.multiply:
result.2: int = mul result.1 two.0;
i.2: int = add i.1 one.0;
result.1: int = id result.2;
i_lt_n.0: bool = id i_lt_n.1;
i.1: int = id i.2;
jmp .loop;
.return:
ret result.1;
}
@bitsel(m: int, i: int): bool {
.b1:
i_eq_zero.init: bool = undef;
zero.0: int = const 0;
one.0: int = const 1;
two.0: int = const 2;
m.0: int = id m;
i_eq_zero.0: bool = id i_eq_zero.init;
i.0: int = id i;
jmp .loop;
.loop:
i_eq_zero.1: bool = eq i.0 zero.0;
br i_eq_zero.1 .return .divide;
.divide:
m.1: int = div m.0 two.0;
i.1: int = sub i.0 one.0;
m.0: int = id m.1;
i_eq_zero.0: bool = id i_eq_zero.1;
i.0: int = id i.1;
jmp .loop;
.return:
m_bit.0: bool = call @is_odd m.0;
ret m_bit.0;
}
@abs(n: int): int {
.b1:
zero.0: int = const 0;
is_neg.0: bool = lt n zero.0;
n.1: int = id n;
br is_neg.0 .negative .positive;
.negative:
n.0: int = sub zero.0 n;
n.1: int = id n.0;
jmp .positive;
.positive:
ret n.1;
}
@is_even(n: int): bool {
.b1:
n0.0: int = call @abs n;
one.0: int = const 1;
two.0: int = const 2;
np1.0: int = add n0.0 one.0;
half.0: int = div n0.0 two.0;
np1_half.0: int = div np1.0 two.0;
ret_val.0: bool = eq half.0 np1_half.0;
ret ret_val.0;
}
@is_odd(n: int): bool {
.b1:
is_even.0: bool = call @is_even n;
ret_val.0: bool = not is_even.0;
ret ret_val.0;
}
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | bril2txtemp_ssa.py | brili -p 2791 57 4 3 gvn.py | brili -p 29temp_ssa.py | bril2txt
@main(a: int, b: int, dim1: int, dim2: int, dim3: int) {
.b1:
k_lt_dim2.init: bool = undef;
k.init: int = undef;
j_lt_dim3.init: bool = undef;
j.init: int = undef;
index.init: int = undef;
i_lt_dim1.init: bool = undef;
dp_bit.init: int = undef;
dot_product_odd.init: bool = undef;
dot_product.init: int = undef;
b_bit.init: int = undef;
a_bit_b_bit.init: int = undef;
a_bit.init: int = undef;
one.0: int = const 1;
i.0: int = const -1;
output.0: int = const 0;
set a_bit.0 a_bit.init;
set a_bit_b_bit.0 a_bit_b_bit.init;
set b_bit.0 b_bit.init;
set dot_product.0 dot_product.init;
set dot_product_odd.0 dot_product_odd.init;
set dp_bit.0 dp_bit.init;
set i.1 i.0;
set i_lt_dim1.0 i_lt_dim1.init;
set index.0 index.init;
set j.0 j.init;
set j_lt_dim3.0 j_lt_dim3.init;
set k.0 k.init;
set k_lt_dim2.0 k_lt_dim2.init;
set output.1 output.0;
jmp .row_loop;
.row_loop:
output.1: int = get;
k_lt_dim2.0: bool = get;
k.0: int = get;
j_lt_dim3.0: bool = get;
j.0: int = get;
index.0: int = get;
i_lt_dim1.0: bool = get;
i.1: int = get;
dp_bit.0: int = get;
dot_product_odd.0: bool = get;
dot_product.0: int = get;
b_bit.0: int = get;
a_bit_b_bit.0: int = get;
a_bit.0: int = get;
j.1: int = const -1;
i.2: int = add i.1 one.0;
i_lt_dim1.1: bool = lt i.2 dim1;
set a_bit.1 a_bit.0;
set a_bit_b_bit.1 a_bit_b_bit.0;
set b_bit.1 b_bit.0;
set dot_product.1 dot_product.0;
set dot_product_odd.1 dot_product_odd.0;
set dp_bit.1 dp_bit.0;
set index.1 index.0;
set j.2 j.1;
set j_lt_dim3.1 j_lt_dim3.0;
set k.1 k.0;
set k_lt_dim2.1 k_lt_dim2.0;
set output.2 output.1;
br i_lt_dim1.1 .col_loop .return;
.col_loop:
output.2: int = get;
k_lt_dim2.1: bool = get;
k.1: int = get;
j_lt_dim3.1: bool = get;
j.2: int = get;
index.1: int = get;
dp_bit.1: int = get;
dot_product_odd.1: bool = get;
dot_product.1: int = get;
b_bit.1: int = get;
a_bit_b_bit.1: int = get;
a_bit.1: int = get;
k.2: int = const -1;
j.3: int = add j.2 one.0;
dot_product.2: int = const 0;
j_lt_dim3.2: bool = lt j.3 dim3;
set a_bit.2 a_bit.1;
set a_bit_b_bit.2 a_bit_b_bit.1;
set b_bit.2 b_bit.1;
set dot_product.3 dot_product.2;
set k.3 k.2;
set k_lt_dim2.2 k_lt_dim2.1;
set a_bit.0 a_bit.1;
set a_bit_b_bit.0 a_bit_b_bit.1;
set b_bit.0 b_bit.1;
set dot_product.0 dot_product.2;
set dot_product_odd.0 dot_product_odd.1;
set dp_bit.0 dp_bit.1;
set i.1 i.2;
set i_lt_dim1.0 i_lt_dim1.1;
set index.0 index.1;
set j.0 j.3;
set j_lt_dim3.0 j_lt_dim3.2;
set k.0 k.2;
set k_lt_dim2.0 k_lt_dim2.1;
set output.1 output.2;
br j_lt_dim3.2 .inner_loop .row_loop;
.inner_loop:
k_lt_dim2.2: bool = get;
k.3: int = get;
dot_product.3: int = get;
b_bit.2: int = get;
a_bit_b_bit.2: int = get;
a_bit.2: int = get;
k.4: int = add k.3 one.0;
k_lt_dim2.3: bool = lt k.4 dim2;
br k_lt_dim2.3 .multiply .end_col;
.multiply:
a_bit.3: int = call @mat_bitsel a dim2 i.2 k.4;
b_bit.3: int = call @mat_bitsel b dim3 k.4 j.3;
a_bit_b_bit.3: int = mul a_bit.3 b_bit.3;
dot_product.4: int = add dot_product.3 a_bit_b_bit.3;
set a_bit.2 a_bit.3;
set a_bit_b_bit.2 a_bit_b_bit.3;
set b_bit.2 b_bit.3;
set dot_product.3 dot_product.4;
set k.3 k.4;
set k_lt_dim2.2 k_lt_dim2.3;
jmp .inner_loop;
.end_col:
dot_product_odd.2: bool = call @is_odd dot_product.3;
set a_bit.1 a_bit.2;
set a_bit_b_bit.1 a_bit_b_bit.2;
set b_bit.1 b_bit.2;
set dot_product.1 dot_product.3;
set dot_product_odd.1 dot_product_odd.2;
set dp_bit.1 dp_bit.1;
set index.1 index.1;
set j.2 j.3;
set j_lt_dim3.1 j_lt_dim3.2;
set k.1 k.4;
set k_lt_dim2.1 k_lt_dim2.3;
set output.2 output.2;
br dot_product_odd.2 .add_dp .col_loop;
.add_dp:
index.2: int = call @mat_packed_index i.2 j.3 dim3;
dp_bit.2: int = call @pow2 index.2;
output.3: int = add output.2 dp_bit.2;
set a_bit.1 a_bit.2;
set a_bit_b_bit.1 a_bit_b_bit.2;
set b_bit.1 b_bit.2;
set dot_product.1 dot_product.3;
set dot_product_odd.1 dot_product_odd.2;
set dp_bit.1 dp_bit.2;
set index.1 index.2;
set j.2 j.3;
set j_lt_dim3.1 j_lt_dim3.2;
set k.1 k.4;
set k_lt_dim2.1 k_lt_dim2.3;
set output.2 output.3;
jmp .col_loop;
.return:
print output.1;
ret;
}
@mat_bitsel(m: int, cols: int, i: int, j: int): int {
.b1:
index.0: int = call @mat_packed_index i j cols;
ret_val.0: bool = call @bitsel m index.0;
br ret_val.0 .ret_one .ret_zero;
.ret_one:
one.0: int = const 1;
ret one.0;
.ret_zero:
zero.0: int = const 0;
ret zero.0;
}
@mat_packed_index(i: int, j: int, cols: int): int {
.b1:
index.0: int = mul i cols;
index.1: int = add index.0 j;
ret index.1;
}
@pow2(n: int): int {
.b1:
i_lt_n.init: bool = undef;
one.0: int = const 1;
two.0: int = const 2;
i.0: int = const 0;
result.0: int = const 1;
set i.1 i.0;
set i_lt_n.0 i_lt_n.init;
set result.1 result.0;
jmp .loop;
.loop:
result.1: int = get;
i_lt_n.0: bool = get;
i.1: int = get;
i_lt_n.1: bool = lt i.1 n;
br i_lt_n.1 .multiply .return;
.multiply:
result.2: int = mul result.1 two.0;
i.2: int = add i.1 one.0;
set i.1 i.2;
set i_lt_n.0 i_lt_n.1;
set result.1 result.2;
jmp .loop;
.return:
ret result.1;
}
@bitsel(m: int, i: int): bool {
.b1:
i_eq_zero.init: bool = undef;
zero.0: int = const 0;
one.0: int = const 1;
two.0: int = const 2;
set i.0 i;
set i_eq_zero.0 i_eq_zero.init;
set m.0 m;
jmp .loop;
.loop:
m.0: int = get;
i_eq_zero.0: bool = get;
i.0: int = get;
i_eq_zero.1: bool = eq i.0 zero.0;
br i_eq_zero.1 .return .divide;
.divide:
m.1: int = div m.0 two.0;
i.1: int = sub i.0 one.0;
set i.0 i.1;
set i_eq_zero.0 i_eq_zero.1;
set m.0 m.1;
jmp .loop;
.return:
m_bit.0: bool = call @is_odd m.0;
ret m_bit.0;
}
@abs(n: int): int {
.b1:
zero.0: int = const 0;
is_neg.0: bool = lt n zero.0;
set n.1 n;
br is_neg.0 .negative .positive;
.negative:
n.0: int = sub zero.0 n;
set n.1 n.0;
jmp .positive;
.positive:
n.1: int = get;
ret n.1;
}
@is_even(n: int): bool {
.b1:
n0.0: int = call @abs n;
one.0: int = const 1;
two.0: int = const 2;
np1.0: int = add n0.0 one.0;
half.0: int = div n0.0 two.0;
np1_half.0: int = div np1.0 two.0;
ret_val.0: bool = eq half.0 np1_half.0;
ret ret_val.0;
}
@is_odd(n: int): bool {
.b1:
is_even.0: bool = call @is_even n;
ret_val.0: bool = not is_even.0;
ret ret_val.0;
}
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | bril2txt
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | bril2txt
/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (2.2.3) or chardet (3.0.4) doesn't match a supported version!
warnings.warn("urllib3 ({}) or chardet ({}) doesn't match a supported "
Traceback (most recent call last):
File "cs6120/final/temp_ssa.py", line 225, in <module>
print(json.dumps(fake_from_ssa(fake_to_ssa(json.load(sys.stdin))), indent=2, sort_keys=True))
File "cs6120/final/temp_ssa.py", line 166, in fake_to_ssa
func_to_ssa(func)
File "cs6120/final/temp_ssa.py", line 158, in func_to_ssa
insert_sets_and_gets(blocks, sets, get_dests, types)
File "cs6120/final/temp_ssa.py", line 116, in insert_sets_and_gets
"type": types[old_var],
KeyError: 'a_bit'
Traceback (most recent call last):
File "/home/nya1025/.local/bin/bril2txt", line 10, in <module>
sys.exit(bril2txt())
File "/home/nya1025/.local/share/uv/tools/briltxt/lib/python3.8/site-packages/briltxt.py", line 343, in bril2txt
print_prog(json.load(sys.stdin))
File "/usr/lib/python3.8/json/__init__.py", line 293, in load
return loads(fp.read(),
File "/usr/lib/python3.8/json/__init__.py", line 357, in loads
return _default_decoder.decode(s)
File "/usr/lib/python3.8/json/decoder.py", line 337, in decode
obj, end = self.raw_decode(s, idx=_w(s, 0).end())
File "/usr/lib/python3.8/json/decoder.py", line 355, in raw_decode
raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | bril2txt
/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (2.2.3) or chardet (3.0.4) doesn't match a supported version!
warnings.warn("urllib3 ({}) or chardet ({}) doesn't match a supported "
Traceback (most recent call last):
File "cs6120/final/temp_ssa.py", line 225, in <module>
first = json.dumps(fake_to_ssa(json.load(sys.stdin)), indent=2, sort_keys=True)
File "cs6120/final/temp_ssa.py", line 166, in fake_to_ssa
func_to_ssa(func)
File "cs6120/final/temp_ssa.py", line 158, in func_to_ssa
insert_sets_and_gets(blocks, sets, get_dests, types)
File "cs6120/final/temp_ssa.py", line 116, in insert_sets_and_gets
"type": types[old_var],
KeyError: 'a_bit'
Traceback (most recent call last):
File "/home/nya1025/.local/bin/bril2txt", line 10, in <module>
sys.exit(bril2txt())
File "/home/nya1025/.local/share/uv/tools/briltxt/lib/python3.8/site-packages/briltxt.py", line 343, in bril2txt
print_prog(json.load(sys.stdin))
File "/usr/lib/python3.8/json/__init__.py", line 293, in load
return loads(fp.read(),
File "/usr/lib/python3.8/json/__init__.py", line 357, in loads
return _default_decoder.decode(s)
File "/usr/lib/python3.8/json/decoder.py", line 337, in decode
obj, end = self.raw_decode(s, idx=_w(s, 0).end())
File "/usr/lib/python3.8/json/decoder.py", line 355, in raw_decode
raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | bril2txt
/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (2.2.3) or chardet (3.0.4) doesn't match a supported version!
warnings.warn("urllib3 ({}) or chardet ({}) doesn't match a supported "
Traceback (most recent call last):
File "cs6120/final/temp_ssa.py", line 221, in <module>
first = json.dumps(fake_to_ssa(json.load(sys.stdin)), indent=2, sort_keys=True)
File "cs6120/final/temp_ssa.py", line 166, in fake_to_ssa
func_to_ssa(func)
File "cs6120/final/temp_ssa.py", line 158, in func_to_ssa
insert_sets_and_gets(blocks, sets, get_dests, types)
File "cs6120/final/temp_ssa.py", line 116, in insert_sets_and_gets
"type": types[old_var],
KeyError: 'a_bit'
Traceback (most recent call last):
File "/home/nya1025/.local/bin/bril2txt", line 10, in <module>
sys.exit(bril2txt())
File "/home/nya1025/.local/share/uv/tools/briltxt/lib/python3.8/site-packages/briltxt.py", line 343, in bril2txt
print_prog(json.load(sys.stdin))
File "/usr/lib/python3.8/json/__init__.py", line 293, in load
return loads(fp.read(),
File "/usr/lib/python3.8/json/__init__.py", line 357, in loads
return _default_decoder.decode(s)
File "/usr/lib/python3.8/json/decoder.py", line 337, in decode
obj, end = self.raw_decode(s, idx=_w(s, 0).end())
File "/usr/lib/python3.8/json/decoder.py", line 355, in raw_decode
raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | bril2txt
/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (2.2.3) or chardet (3.0.4) doesn't match a supported version!
warnings.warn("urllib3 ({}) or chardet ({}) doesn't match a supported "
Traceback (most recent call last):
File "cs6120/final/temp_ssa.py", line 221, in <module>
first = json.dumps(fake_to_ssa(json.load(sys.stdin)), indent=2, sort_keys=True)
File "cs6120/final/temp_ssa.py", line 166, in fake_to_ssa
func_to_ssa(func)
File "cs6120/final/temp_ssa.py", line 158, in func_to_ssa
insert_sets_and_gets(blocks, sets, get_dests, types)
File "cs6120/final/temp_ssa.py", line 116, in insert_sets_and_gets
"type": types[old_var],
KeyError: 'a_bit'
Traceback (most recent call last):
File "/home/nya1025/.local/bin/bril2txt", line 10, in <module>
sys.exit(bril2txt())
File "/home/nya1025/.local/share/uv/tools/briltxt/lib/python3.8/site-packages/briltxt.py", line 343, in bril2txt
print_prog(json.load(sys.stdin))
File "/usr/lib/python3.8/json/__init__.py", line 293, in load
return loads(fp.read(),
File "/usr/lib/python3.8/json/__init__.py", line 357, in loads
return _default_decoder.decode(s)
File "/usr/lib/python3.8/json/decoder.py", line 337, in decode
obj, end = self.raw_decode(s, idx=_w(s, 0).end())
File "/usr/lib/python3.8/json/decoder.py", line 355, in raw_decode
raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | bril2txt
/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (2.2.3) or chardet (3.0.4) doesn't match a supported version!
warnings.warn("urllib3 ({}) or chardet ({}) doesn't match a supported "
Traceback (most recent call last):
File "cs6120/final/temp_ssa.py", line 219, in <module>
print(json.dumps(fake_to_ssa(json.load(sys.stdin)), indent=2, sort_keys=True))
File "cs6120/final/temp_ssa.py", line 166, in fake_to_ssa
func_to_ssa(func)
File "cs6120/final/temp_ssa.py", line 158, in func_to_ssa
insert_sets_and_gets(blocks, sets, get_dests, types)
File "cs6120/final/temp_ssa.py", line 116, in insert_sets_and_gets
"type": types[old_var],
KeyError: 'a_bit'
Traceback (most recent call last):
File "/home/nya1025/.local/bin/bril2txt", line 10, in <module>
sys.exit(bril2txt())
File "/home/nya1025/.local/share/uv/tools/briltxt/lib/python3.8/site-packages/briltxt.py", line 343, in bril2txt
print_prog(json.load(sys.stdin))
File "/usr/lib/python3.8/json/__init__.py", line 293, in load
return loads(fp.read(),
File "/usr/lib/python3.8/json/__init__.py", line 357, in loads
return _default_decoder.decode(s)
File "/usr/lib/python3.8/json/decoder.py", line 337, in decode
obj, end = self.raw_decode(s, idx=_w(s, 0).end())
File "/usr/lib/python3.8/json/decoder.py", line 355, in raw_decode
raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | bril2txgvtemp_ssa.py | brili -p 2791 57 4 3 gvn.py | brili -p 29temp_ssa.py | bril2txi -p 2791 57 4 3 2
/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (2.2.3) or chardet (3.0.4) doesn't match a supported version!
warnings.warn("urllib3 ({}) or chardet ({}) doesn't match a supported "
Traceback (most recent call last):
File "cs6120/final/temp_ssa.py", line 219, in <module>
print(json.dumps(fake_to_ssa(json.load(sys.stdin)), indent=2, sort_keys=True))
File "cs6120/final/temp_ssa.py", line 166, in fake_to_ssa
func_to_ssa(func)
File "cs6120/final/temp_ssa.py", line 158, in func_to_ssa
insert_sets_and_gets(blocks, sets, get_dests, types)
File "cs6120/final/temp_ssa.py", line 116, in insert_sets_and_gets
"type": types[old_var],
KeyError: 'a_bit'
error: Uncaught (in promise) SyntaxError: Unexpected end of JSON input
const prog = JSON.parse(await readStdin()) as bril.Program;
^
at JSON.parse (<anonymous>)
at main (file:///home/nya1025/bril/brili.ts:1020:23)
at eventLoopTick (ext:core/01_core.js:177:7)
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | brili -p 2791 57 4 3 2txt
@main(a: int, b: int, dim1: int, dim2: int, dim3: int) {
.b1:
k_lt_dim2.init: bool = undef;
k.init: int = undef;
j_lt_dim3.init: bool = undef;
j.init: int = undef;
index.init: int = undef;
i_lt_dim1.init: bool = undef;
dp_bit.init: int = undef;
dot_product_odd.init: bool = undef;
dot_product.init: int = undef;
b_bit.init: int = undef;
a_bit_b_bit.init: int = undef;
a_bit.init: int = undef;
one.0: int = const 1;
i.0: int = const -1;
output.0: int = const 0;
set a_bit.0 a_bit.init;
set a_bit_b_bit.0 a_bit_b_bit.init;
set b_bit.0 b_bit.init;
set dot_product.0 dot_product.init;
set dot_product_odd.0 dot_product_odd.init;
set dp_bit.0 dp_bit.init;
set i.1 i.0;
set i_lt_dim1.0 i_lt_dim1.init;
set index.0 index.init;
set j.0 j.init;
set j_lt_dim3.0 j_lt_dim3.init;
set k.0 k.init;
set k_lt_dim2.0 k_lt_dim2.init;
set output.1 output.0;
jmp .row_loop;
.row_loop:
output.1: int = get;
k_lt_dim2.0: bool = get;
k.0: int = get;
j_lt_dim3.0: bool = get;
j.0: int = get;
index.0: int = get;
i_lt_dim1.0: bool = get;
i.1: int = get;
dp_bit.0: int = get;
dot_product_odd.0: bool = get;
dot_product.0: int = get;
b_bit.0: int = get;
a_bit_b_bit.0: int = get;
a_bit.0: int = get;
j.1: int = const -1;
i.2: int = add i.1 one.0;
i_lt_dim1.1: bool = lt i.2 dim1;
set a_bit.1 a_bit.0;
set a_bit_b_bit.1 a_bit_b_bit.0;
set b_bit.1 b_bit.0;
set dot_product.1 dot_product.0;
set dot_product_odd.1 dot_product_odd.0;
set dp_bit.1 dp_bit.0;
set index.1 index.0;
set j.2 j.1;
set j_lt_dim3.1 j_lt_dim3.0;
set k.1 k.0;
set k_lt_dim2.1 k_lt_dim2.0;
set output.2 output.1;
br i_lt_dim1.1 .col_loop .return;
.col_loop:
output.2: int = get;
k_lt_dim2.1: bool = get;
k.1: int = get;
j_lt_dim3.1: bool = get;
j.2: int = get;
index.1: int = get;
dp_bit.1: int = get;
dot_product_odd.1: bool = get;
dot_product.1: int = get;
b_bit.1: int = get;
a_bit_b_bit.1: int = get;
a_bit.1: int = get;
k.2: int = const -1;
j.3: int = add j.2 one.0;
dot_product.2: int = const 0;
j_lt_dim3.2: bool = lt j.3 dim3;
set a_bit.2 a_bit.1;
set a_bit_b_bit.2 a_bit_b_bit.1;
set b_bit.2 b_bit.1;
set dot_product.3 dot_product.2;
set k.3 k.2;
set k_lt_dim2.2 k_lt_dim2.1;
set a_bit.0 a_bit.1;
set a_bit_b_bit.0 a_bit_b_bit.1;
set b_bit.0 b_bit.1;
set dot_product.0 dot_product.2;
set dot_product_odd.0 dot_product_odd.1;
set dp_bit.0 dp_bit.1;
set i.1 i.2;
set i_lt_dim1.0 i_lt_dim1.1;
set index.0 index.1;
set j.0 j.3;
set j_lt_dim3.0 j_lt_dim3.2;
set k.0 k.2;
set k_lt_dim2.0 k_lt_dim2.1;
set output.1 output.2;
br j_lt_dim3.2 .inner_loop .row_loop;
.inner_loop:
k_lt_dim2.2: bool = get;
k.3: int = get;
dot_product.3: int = get;
b_bit.2: int = get;
a_bit_b_bit.2: int = get;
a_bit.2: int = get;
k.4: int = add k.3 one.0;
k_lt_dim2.3: bool = lt k.4 dim2;
br k_lt_dim2.3 .multiply .end_col;
.multiply:
a_bit.3: int = call @mat_bitsel a dim2 i.2 k.4;
b_bit.3: int = call @mat_bitsel b dim3 k.4 j.3;
a_bit_b_bit.3: int = mul a_bit.3 b_bit.3;
dot_product.4: int = add dot_product.3 a_bit_b_bit.3;
set a_bit.2 a_bit.3;
set a_bit_b_bit.2 a_bit_b_bit.3;
set b_bit.2 b_bit.3;
set dot_product.3 dot_product.4;
set k.3 k.4;
set k_lt_dim2.2 k_lt_dim2.3;
jmp .inner_loop;
.end_col:
dot_product_odd.2: bool = call @is_odd dot_product.3;
set a_bit.1 a_bit.2;
set a_bit_b_bit.1 a_bit_b_bit.2;
set b_bit.1 b_bit.2;
set dot_product.1 dot_product.3;
set dot_product_odd.1 dot_product_odd.2;
set dp_bit.1 dp_bit.1;
set index.1 index.1;
set j.2 j.3;
set j_lt_dim3.1 j_lt_dim3.2;
set k.1 k.4;
set k_lt_dim2.1 k_lt_dim2.3;
set output.2 output.2;
br dot_product_odd.2 .add_dp .col_loop;
.add_dp:
index.2: int = call @mat_packed_index i.2 j.3 dim3;
dp_bit.2: int = call @pow2 index.2;
output.3: int = add output.2 dp_bit.2;
set a_bit.1 a_bit.2;
set a_bit_b_bit.1 a_bit_b_bit.2;
set b_bit.1 b_bit.2;
set dot_product.1 dot_product.3;
set dot_product_odd.1 dot_product_odd.2;
set dp_bit.1 dp_bit.2;
set index.1 index.2;
set j.2 j.3;
set j_lt_dim3.1 j_lt_dim3.2;
set k.1 k.4;
set k_lt_dim2.1 k_lt_dim2.3;
set output.2 output.3;
jmp .col_loop;
.return:
print output.1;
ret;
}
@mat_bitsel(m: int, cols: int, i: int, j: int): int {
.b1:
index.0: int = call @mat_packed_index i j cols;
ret_val.0: bool = call @bitsel m index.0;
br ret_val.0 .ret_one .ret_zero;
.ret_one:
one.0: int = const 1;
ret one.0;
.ret_zero:
zero.0: int = const 0;
ret zero.0;
}
@mat_packed_index(i: int, j: int, cols: int): int {
.b1:
index.0: int = mul i cols;
index.1: int = add index.0 j;
ret index.1;
}
@pow2(n: int): int {
.b1:
i_lt_n.init: bool = undef;
one.0: int = const 1;
two.0: int = const 2;
i.0: int = const 0;
result.0: int = const 1;
set i.1 i.0;
set i_lt_n.0 i_lt_n.init;
set result.1 result.0;
jmp .loop;
.loop:
result.1: int = get;
i_lt_n.0: bool = get;
i.1: int = get;
i_lt_n.1: bool = lt i.1 n;
br i_lt_n.1 .multiply .return;
.multiply:
result.2: int = mul result.1 two.0;
i.2: int = add i.1 one.0;
set i.1 i.2;
set i_lt_n.0 i_lt_n.1;
set result.1 result.2;
jmp .loop;
.return:
ret result.1;
}
@bitsel(m: int, i: int): bool {
.b1:
i_eq_zero.init: bool = undef;
zero.0: int = const 0;
one.0: int = const 1;
two.0: int = const 2;
set i.0 i;
set i_eq_zero.0 i_eq_zero.init;
set m.0 m;
jmp .loop;
.loop:
m.0: int = get;
i_eq_zero.0: bool = get;
i.0: int = get;
i_eq_zero.1: bool = eq i.0 zero.0;
br i_eq_zero.1 .return .divide;
.divide:
m.1: int = div m.0 two.0;
i.1: int = sub i.0 one.0;
set i.0 i.1;
set i_eq_zero.0 i_eq_zero.1;
set m.0 m.1;
jmp .loop;
.return:
m_bit.0: bool = call @is_odd m.0;
ret m_bit.0;
}
@abs(n: int): int {
.b1:
zero.0: int = const 0;
is_neg.0: bool = lt n zero.0;
set n.1 n;
br is_neg.0 .negative .positive;
.negative:
n.0: int = sub zero.0 n;
set n.1 n.0;
jmp .positive;
.positive:
n.1: int = get;
ret n.1;
}
@is_even(n: int): bool {
.b1:
n0.0: int = call @abs n;
one.0: int = const 1;
two.0: int = const 2;
np1.0: int = add n0.0 one.0;
half.0: int = div n0.0 two.0;
np1_half.0: int = div np1.0 two.0;
ret_val.0: bool = eq half.0 np1_half.0;
ret ret_val.0;
}
@is_odd(n: int): bool {
.b1:
is_even.0: bool = call @is_even n;
ret_val.0: bool = not is_even.0;
ret ret_val.0;
}
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | bril2txt
/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (2.2.3) or chardet (3.0.4) doesn't match a supported version!
warnings.warn("urllib3 ({}) or chardet ({}) doesn't match a supported "
Traceback (most recent call last):
File "cs6120/final/temp_ssa.py", line 219, in <module>
print(json.dumps(from_ssa(json.load(first)), indent=2, sort_keys=True))
File "/usr/lib/python3.8/json/__init__.py", line 293, in load
return loads(fp.read(),
AttributeError: 'str' object has no attribute 'read'
Traceback (most recent call last):
File "/home/nya1025/.local/bin/bril2txt", line 10, in <module>
sys.exit(bril2txt())
File "/home/nya1025/.local/share/uv/tools/briltxt/lib/python3.8/site-packages/briltxt.py", line 343, in bril2txt
print_prog(json.load(sys.stdin))
File "/usr/lib/python3.8/json/__init__.py", line 293, in load
return loads(fp.read(),
File "/usr/lib/python3.8/json/__init__.py", line 357, in loads
return _default_decoder.decode(s)
File "/usr/lib/python3.8/json/decoder.py", line 337, in decode
obj, end = self.raw_decode(s, idx=_w(s, 0).end())
File "/usr/lib/python3.8/json/decoder.py", line 355, in raw_decode
raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | bril2txt
@main(a: int, b: int, dim1: int, dim2: int, dim3: int) {
.b1:
k_lt_dim2.init: bool = undef;
k.init: int = undef;
j_lt_dim3.init: bool = undef;
j.init: int = undef;
index.init: int = undef;
i_lt_dim1.init: bool = undef;
dp_bit.init: int = undef;
dot_product_odd.init: bool = undef;
dot_product.init: int = undef;
b_bit.init: int = undef;
a_bit_b_bit.init: int = undef;
a_bit.init: int = undef;
one.0: int = const 1;
i.0: int = const -1;
output.0: int = const 0;
shadow.a_bit.0: int = id a_bit.init;
shadow.a_bit_b_bit.0: int = id a_bit_b_bit.init;
shadow.b_bit.0: int = id b_bit.init;
shadow.dot_product.0: int = id dot_product.init;
shadow.dot_product_odd.0: bool = id dot_product_odd.init;
shadow.dp_bit.0: int = id dp_bit.init;
shadow.i.1: int = id i.0;
shadow.i_lt_dim1.0: bool = id i_lt_dim1.init;
shadow.index.0: int = id index.init;
shadow.j.0: int = id j.init;
shadow.j_lt_dim3.0: bool = id j_lt_dim3.init;
shadow.k.0: int = id k.init;
shadow.k_lt_dim2.0: bool = id k_lt_dim2.init;
shadow.output.1: int = id output.0;
jmp .row_loop;
.row_loop:
output.1: int = id shadow.output.1;
k_lt_dim2.0: bool = id shadow.k_lt_dim2.0;
k.0: int = id shadow.k.0;
j_lt_dim3.0: bool = id shadow.j_lt_dim3.0;
j.0: int = id shadow.j.0;
index.0: int = id shadow.index.0;
i_lt_dim1.0: bool = id shadow.i_lt_dim1.0;
i.1: int = id shadow.i.1;
dp_bit.0: int = id shadow.dp_bit.0;
dot_product_odd.0: bool = id shadow.dot_product_odd.0;
dot_product.0: int = id shadow.dot_product.0;
b_bit.0: int = id shadow.b_bit.0;
a_bit_b_bit.0: int = id shadow.a_bit_b_bit.0;
a_bit.0: int = id shadow.a_bit.0;
j.1: int = const -1;
i.2: int = add i.1 one.0;
i_lt_dim1.1: bool = lt i.2 dim1;
shadow.a_bit.1: int = id a_bit.0;
shadow.a_bit_b_bit.1: int = id a_bit_b_bit.0;
shadow.b_bit.1: int = id b_bit.0;
shadow.dot_product.1: int = id dot_product.0;
shadow.dot_product_odd.1: bool = id dot_product_odd.0;
shadow.dp_bit.1: int = id dp_bit.0;
shadow.index.1: int = id index.0;
shadow.j.2: int = id j.1;
shadow.j_lt_dim3.1: bool = id j_lt_dim3.0;
shadow.k.1: int = id k.0;
shadow.k_lt_dim2.1: bool = id k_lt_dim2.0;
shadow.output.2: int = id output.1;
br i_lt_dim1.1 .col_loop .return;
.col_loop:
output.2: int = id shadow.output.2;
k_lt_dim2.1: bool = id shadow.k_lt_dim2.1;
k.1: int = id shadow.k.1;
j_lt_dim3.1: bool = id shadow.j_lt_dim3.1;
j.2: int = id shadow.j.2;
index.1: int = id shadow.index.1;
dp_bit.1: int = id shadow.dp_bit.1;
dot_product_odd.1: bool = id shadow.dot_product_odd.1;
dot_product.1: int = id shadow.dot_product.1;
b_bit.1: int = id shadow.b_bit.1;
a_bit_b_bit.1: int = id shadow.a_bit_b_bit.1;
a_bit.1: int = id shadow.a_bit.1;
k.2: int = const -1;
j.3: int = add j.2 one.0;
dot_product.2: int = const 0;
j_lt_dim3.2: bool = lt j.3 dim3;
shadow.a_bit.2: int = id a_bit.1;
shadow.a_bit_b_bit.2: int = id a_bit_b_bit.1;
shadow.b_bit.2: int = id b_bit.1;
shadow.dot_product.3: int = id dot_product.2;
shadow.k.3: int = id k.2;
shadow.k_lt_dim2.2: bool = id k_lt_dim2.1;
shadow.a_bit.0: int = id a_bit.1;
shadow.a_bit_b_bit.0: int = id a_bit_b_bit.1;
shadow.b_bit.0: int = id b_bit.1;
shadow.dot_product.0: int = id dot_product.2;
shadow.dot_product_odd.0: bool = id dot_product_odd.1;
shadow.dp_bit.0: int = id dp_bit.1;
shadow.i.1: int = id i.2;
shadow.i_lt_dim1.0: bool = id i_lt_dim1.1;
shadow.index.0: int = id index.1;
shadow.j.0: int = id j.3;
shadow.j_lt_dim3.0: bool = id j_lt_dim3.2;
shadow.k.0: int = id k.2;
shadow.k_lt_dim2.0: bool = id k_lt_dim2.1;
shadow.output.1: int = id output.2;
br j_lt_dim3.2 .inner_loop .row_loop;
.inner_loop:
k_lt_dim2.2: bool = id shadow.k_lt_dim2.2;
k.3: int = id shadow.k.3;
dot_product.3: int = id shadow.dot_product.3;
b_bit.2: int = id shadow.b_bit.2;
a_bit_b_bit.2: int = id shadow.a_bit_b_bit.2;
a_bit.2: int = id shadow.a_bit.2;
k.4: int = add k.3 one.0;
k_lt_dim2.3: bool = lt k.4 dim2;
br k_lt_dim2.3 .multiply .end_col;
.multiply:
a_bit.3: int = call @mat_bitsel a dim2 i.2 k.4;
b_bit.3: int = call @mat_bitsel b dim3 k.4 j.3;
a_bit_b_bit.3: int = mul a_bit.3 b_bit.3;
dot_product.4: int = add dot_product.3 a_bit_b_bit.3;
shadow.a_bit.2: int = id a_bit.3;
shadow.a_bit_b_bit.2: int = id a_bit_b_bit.3;
shadow.b_bit.2: int = id b_bit.3;
shadow.dot_product.3: int = id dot_product.4;
shadow.k.3: int = id k.4;
shadow.k_lt_dim2.2: bool = id k_lt_dim2.3;
jmp .inner_loop;
.end_col:
dot_product_odd.2: bool = call @is_odd dot_product.3;
shadow.a_bit.1: int = id a_bit.2;
shadow.a_bit_b_bit.1: int = id a_bit_b_bit.2;
shadow.b_bit.1: int = id b_bit.2;
shadow.dot_product.1: int = id dot_product.3;
shadow.dot_product_odd.1: bool = id dot_product_odd.2;
shadow.dp_bit.1: int = id dp_bit.1;
shadow.index.1: int = id index.1;
shadow.j.2: int = id j.3;
shadow.j_lt_dim3.1: bool = id j_lt_dim3.2;
shadow.k.1: int = id k.4;
shadow.k_lt_dim2.1: bool = id k_lt_dim2.3;
shadow.output.2: int = id output.2;
br dot_product_odd.2 .add_dp .col_loop;
.add_dp:
index.2: int = call @mat_packed_index i.2 j.3 dim3;
dp_bit.2: int = call @pow2 index.2;
output.3: int = add output.2 dp_bit.2;
shadow.a_bit.1: int = id a_bit.2;
shadow.a_bit_b_bit.1: int = id a_bit_b_bit.2;
shadow.b_bit.1: int = id b_bit.2;
shadow.dot_product.1: int = id dot_product.3;
shadow.dot_product_odd.1: bool = id dot_product_odd.2;
shadow.dp_bit.1: int = id dp_bit.2;
shadow.index.1: int = id index.2;
shadow.j.2: int = id j.3;
shadow.j_lt_dim3.1: bool = id j_lt_dim3.2;
shadow.k.1: int = id k.4;
shadow.k_lt_dim2.1: bool = id k_lt_dim2.3;
shadow.output.2: int = id output.3;
jmp .col_loop;
.return:
print output.1;
ret;
}
@mat_bitsel(m: int, cols: int, i: int, j: int): int {
.b1:
index.0: int = call @mat_packed_index i j cols;
ret_val.0: bool = call @bitsel m index.0;
br ret_val.0 .ret_one .ret_zero;
.ret_one:
one.0: int = const 1;
ret one.0;
.ret_zero:
zero.0: int = const 0;
ret zero.0;
}
@mat_packed_index(i: int, j: int, cols: int): int {
.b1:
index.0: int = mul i cols;
index.1: int = add index.0 j;
ret index.1;
}
@pow2(n: int): int {
.b1:
i_lt_n.init: bool = undef;
one.0: int = const 1;
two.0: int = const 2;
i.0: int = const 0;
result.0: int = const 1;
shadow.i.1: int = id i.0;
shadow.i_lt_n.0: bool = id i_lt_n.init;
shadow.result.1: int = id result.0;
jmp .loop;
.loop:
result.1: int = id shadow.result.1;
i_lt_n.0: bool = id shadow.i_lt_n.0;
i.1: int = id shadow.i.1;
i_lt_n.1: bool = lt i.1 n;
br i_lt_n.1 .multiply .return;
.multiply:
result.2: int = mul result.1 two.0;
i.2: int = add i.1 one.0;
shadow.i.1: int = id i.2;
shadow.i_lt_n.0: bool = id i_lt_n.1;
shadow.result.1: int = id result.2;
jmp .loop;
.return:
ret result.1;
}
@bitsel(m: int, i: int): bool {
.b1:
i_eq_zero.init: bool = undef;
zero.0: int = const 0;
one.0: int = const 1;
two.0: int = const 2;
shadow.i.0: int = id i;
shadow.i_eq_zero.0: bool = id i_eq_zero.init;
shadow.m.0: int = id m;
jmp .loop;
.loop:
m.0: int = id shadow.m.0;
i_eq_zero.0: bool = id shadow.i_eq_zero.0;
i.0: int = id shadow.i.0;
i_eq_zero.1: bool = eq i.0 zero.0;
br i_eq_zero.1 .return .divide;
.divide:
m.1: int = div m.0 two.0;
i.1: int = sub i.0 one.0;
shadow.i.0: int = id i.1;
shadow.i_eq_zero.0: bool = id i_eq_zero.1;
shadow.m.0: int = id m.1;
jmp .loop;
.return:
m_bit.0: bool = call @is_odd m.0;
ret m_bit.0;
}
@abs(n: int): int {
.b1:
zero.0: int = const 0;
is_neg.0: bool = lt n zero.0;
shadow.n.1: int = id n;
br is_neg.0 .negative .positive;
.negative:
n.0: int = sub zero.0 n;
shadow.n.1: int = id n.0;
jmp .positive;
.positive:
n.1: int = id shadow.n.1;
ret n.1;
}
@is_even(n: int): bool {
.b1:
n0.0: int = call @abs n;
one.0: int = const 1;
two.0: int = const 2;
np1.0: int = add n0.0 one.0;
half.0: int = div n0.0 two.0;
np1_half.0: int = div np1.0 two.0;
ret_val.0: bool = eq half.0 np1_half.0;
ret ret_val.0;
}
@is_odd(n: int): bool {
.b1:
is_even.0: bool = call @is_even n;
ret_val.0: bool = not is_even.0;
ret ret_val.0;
}
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | bril2txi -p 2791 57 4 3 2
188
total_dyn_inst: 5859
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | brili -p 2791 57 4 3 gvn
188
total_dyn_inst: 4599
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3 2
^C
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3
{'dest': 'one.0', 'op': 'const', 'type': 'int', 'value': 1}
one.0
{'dest': 'i.0', 'op': 'const', 'type': 'int', 'value': -1}
i.0
{'dest': 'output.0', 'op': 'const', 'type': 'int', 'value': 0}
dot_product.2
{'op': 'phi', 'dest': 'output.1', 'type': 'int', 'args': ['output.0', 'output.2', 'b1', 'col_loop']}
output.1
{'op': 'phi', 'dest': 'k_lt_dim2.0', 'type': 'bool', 'args': ['k_lt_dim2.init', 'k_lt_dim2.1', 'b1', 'col_loop']}
k_lt_dim2.0
{'op': 'phi', 'dest': 'k.0', 'type': 'int', 'args': ['k.init', 'k.2', 'b1', 'col_loop']}
k.0
{'op': 'phi', 'dest': 'j_lt_dim3.0', 'type': 'bool', 'args': ['j_lt_dim3.init', 'j_lt_dim3.2', 'b1', 'col_loop']}
j_lt_dim3.0
{'op': 'phi', 'dest': 'j.0', 'type': 'int', 'args': ['j.init', 'j.3', 'b1', 'col_loop']}
j.0
{'op': 'phi', 'dest': 'index.0', 'type': 'int', 'args': ['index.init', 'index.1', 'b1', 'col_loop']}
index.0
{'op': 'phi', 'dest': 'i_lt_dim1.0', 'type': 'bool', 'args': ['i_lt_dim1.init', 'i_lt_dim1.1', 'b1', 'col_loop']}
i_lt_dim1.0
{'op': 'phi', 'dest': 'i.1', 'type': 'int', 'args': ['i.0', 'i.2', 'b1', 'col_loop']}
i.1
{'op': 'phi', 'dest': 'dp_bit.0', 'type': 'int', 'args': ['dp_bit.init', 'dp_bit.1', 'b1', 'col_loop']}
dp_bit.0
{'op': 'phi', 'dest': 'dot_product_odd.0', 'type': 'bool', 'args': ['dot_product_odd.init', 'dot_product_odd.1', 'b1', 'col_loop']}
dot_product_odd.0
{'op': 'phi', 'dest': 'dot_product.0', 'type': 'int', 'args': ['dot_product.init', 'dot_product.2', 'b1', 'col_loop']}
dot_product.0
{'op': 'phi', 'dest': 'b_bit.0', 'type': 'int', 'args': ['b_bit.init', 'b_bit.1', 'b1', 'col_loop']}
b_bit.0
{'op': 'phi', 'dest': 'a_bit_b_bit.0', 'type': 'int', 'args': ['a_bit_b_bit.init', 'a_bit_b_bit.1', 'b1', 'col_loop']}
a_bit_b_bit.0
{'op': 'phi', 'dest': 'a_bit.0', 'type': 'int', 'args': ['a_bit.init', 'a_bit.1', 'b1', 'col_loop']}
a_bit.0
{'dest': 'j.1', 'op': 'const', 'type': 'int', 'value': -1}
i.0
{'args': ['i.1', 'one.0'], 'dest': 'i.2', 'op': 'add', 'type': 'int'}
i.2
{'args': ['i.2', 'dim1'], 'dest': 'i_lt_dim1.1', 'op': 'lt', 'type': 'bool'}
i_lt_dim1.1
{'op': 'phi', 'dest': 'output.2', 'type': 'int', 'args': ['output.3', 'output.2', 'output.1', 'add_dp', 'end_col', 'row_loop']}
output.2
{'op': 'phi', 'dest': 'k_lt_dim2.1', 'type': 'bool', 'args': ['k_lt_dim2.3', 'k_lt_dim2.3', 'k_lt_dim2.0', 'add_dp', 'end_col', 'row_loop']}
k_lt_dim2.1
{'op': 'phi', 'dest': 'k.1', 'type': 'int', 'args': ['k.4', 'k.4', 'k.0', 'add_dp', 'end_col', 'row_loop']}
k.1
{'op': 'phi', 'dest': 'j_lt_dim3.1', 'type': 'bool', 'args': ['j_lt_dim3.2', 'j_lt_dim3.2', 'j_lt_dim3.0', 'add_dp', 'end_col', 'row_loop']}
j_lt_dim3.1
{'op': 'phi', 'dest': 'j.2', 'type': 'int', 'args': ['j.3', 'j.3', 'j.1', 'add_dp', 'end_col', 'row_loop']}
j.2
{'op': 'phi', 'dest': 'index.1', 'type': 'int', 'args': ['index.2', 'index.1', 'index.0', 'add_dp', 'end_col', 'row_loop']}
index.1
{'op': 'phi', 'dest': 'dp_bit.1', 'type': 'int', 'args': ['dp_bit.2', 'dp_bit.1', 'dp_bit.0', 'add_dp', 'end_col', 'row_loop']}
dp_bit.1
{'op': 'phi', 'dest': 'dot_product_odd.1', 'type': 'bool', 'args': ['dot_product_odd.2', 'dot_product_odd.2', 'dot_product_odd.0', 'add_dp', 'end_col', 'row_loop']}
dot_product_odd.1
{'op': 'phi', 'dest': 'dot_product.1', 'type': 'int', 'args': ['dot_product.3', 'dot_product.3', 'dot_product.0', 'add_dp', 'end_col', 'row_loop']}
dot_product.1
{'op': 'phi', 'dest': 'b_bit.1', 'type': 'int', 'args': ['b_bit.2', 'b_bit.2', 'b_bit.0', 'add_dp', 'end_col', 'row_loop']}
b_bit.1
{'op': 'phi', 'dest': 'a_bit_b_bit.1', 'type': 'int', 'args': ['a_bit_b_bit.2', 'a_bit_b_bit.2', 'a_bit_b_bit.0', 'add_dp', 'end_col', 'row_loop']}
a_bit_b_bit.1
{'op': 'phi', 'dest': 'a_bit.1', 'type': 'int', 'args': ['a_bit.2', 'a_bit.2', 'a_bit.0', 'add_dp', 'end_col', 'row_loop']}
a_bit.1
{'dest': 'k.2', 'op': 'const', 'type': 'int', 'value': -1}
i.0
{'args': ['j.2', 'one.0'], 'dest': 'j.3', 'op': 'add', 'type': 'int'}
j.3
{'dest': 'dot_product.2', 'op': 'const', 'type': 'int', 'value': 0}
dot_product.2
{'args': ['j.3', 'dim3'], 'dest': 'j_lt_dim3.2', 'op': 'lt', 'type': 'bool'}
j_lt_dim3.2
{'op': 'phi', 'dest': 'k_lt_dim2.2', 'type': 'bool', 'args': ['k_lt_dim2.1', 'k_lt_dim2.3', 'col_loop', 'multiply']}
k_lt_dim2.2
{'op': 'phi', 'dest': 'k.3', 'type': 'int', 'args': ['k.2', 'k.4', 'col_loop', 'multiply']}
i.1
{'op': 'phi', 'dest': 'dot_product.3', 'type': 'int', 'args': ['dot_product.2', 'dot_product.4', 'col_loop', 'multiply']}
dot_product.3
{'op': 'phi', 'dest': 'b_bit.2', 'type': 'int', 'args': ['b_bit.1', 'b_bit.3', 'col_loop', 'multiply']}
b_bit.2
{'op': 'phi', 'dest': 'a_bit_b_bit.2', 'type': 'int', 'args': ['a_bit_b_bit.1', 'a_bit_b_bit.3', 'col_loop', 'multiply']}
a_bit_b_bit.2
{'op': 'phi', 'dest': 'a_bit.2', 'type': 'int', 'args': ['a_bit.1', 'a_bit.3', 'col_loop', 'multiply']}
a_bit.2
{'args': ['k.3', 'one.0'], 'dest': 'k.4', 'op': 'add', 'type': 'int'}
i.2
{'args': ['k.4', 'dim2'], 'dest': 'k_lt_dim2.3', 'op': 'lt', 'type': 'bool'}
k_lt_dim2.3
{'args': ['a', 'dim2', 'i.2', 'k.4'], 'dest': 'a_bit.3', 'funcs': ['mat_bitsel'], 'op': 'call', 'type': 'int'}
a_bit.3
{'args': ['b', 'dim3', 'k.4', 'j.3'], 'dest': 'b_bit.3', 'funcs': ['mat_bitsel'], 'op': 'call', 'type': 'int'}
b_bit.3
{'args': ['a_bit.3', 'b_bit.3'], 'dest': 'a_bit_b_bit.3', 'op': 'mul', 'type': 'int'}
a_bit_b_bit.3
{'args': ['a_bit_b_bit.3', 'dot_product.3'], 'dest': 'dot_product.4', 'op': 'add', 'type': 'int'}
dot_product.4
{'args': ['dot_product.3'], 'dest': 'dot_product_odd.2', 'funcs': ['is_odd'], 'op': 'call', 'type': 'bool'}
dot_product_odd.2
{'args': ['i.2', 'j.3', 'dim3'], 'dest': 'index.2', 'funcs': ['mat_packed_index'], 'op': 'call', 'type': 'int'}
index.2
{'args': ['index.2'], 'dest': 'dp_bit.2', 'funcs': ['pow2'], 'op': 'call', 'type': 'int'}
dp_bit.2
{'args': ['dp_bit.2', 'output.2'], 'dest': 'output.3', 'op': 'add', 'type': 'int'}
output.3
Congruence classes for function main:
Class arg_a: ['a']
Class arg_b: ['b']
Class arg_dim1: ['dim1']
Class arg_dim2: ['dim2']
Class arg_dim3: ['dim3']
Class const 1: ['one.0']
Class const -1: ['i.0', 'j.1', 'k.2']
Class const 0: ['dot_product.2', 'output.0']
Class phi: ['k.0']
Class add: ['dot_product.4']
Class lt: ['i_lt_dim1.1']
Class call mat_bitsel: ['a_bit.3']
Class mul: ['a_bit_b_bit.3']
Class call is_odd: ['dot_product_odd.2']
Class call mat_packed_index: ['index.2']
Class call pow2: ['dp_bit.2']
Class phi_0: ['dp_bit.1']
Class add_0: ['output.3']
Class phi_1: ['output.2']
Class phi_2: ['output.1']
Class phi_3: ['a_bit_b_bit.2']
Class add_1: ['j.3']
Class phi_4: ['a_bit_b_bit.0']
Class phi_3_0: ['dot_product.1']
Class phi_5: ['j_lt_dim3.1']
Class phi_4_0: ['index.1']
Class phi_4_1: ['index.0']
Class phi_3_0_0: ['a_bit_b_bit.1']
Class phi_5_0: ['dot_product_odd.1']
Class phi_3_1: ['k_lt_dim2.2']
Class phi_4_2: ['dot_product_odd.0']
Class phi_6: ['j.2']
Class phi_5_1: ['k.1']
Class phi_7: ['i.1', 'k.3']
Class add_1_0: ['i.2', 'k.4']
Class lt_0: ['j_lt_dim3.2']
Class phi_7_0: ['j.0']
Class call mat_bitsel_0: ['b_bit.3']
Class phi_3_2: ['b_bit.2']
Class phi_3_0_0_0: ['b_bit.1']
Class phi_4_3: ['b_bit.0']
Class phi_3_3: ['a_bit.2']
Class phi_3_0_0_1: ['a_bit.1']
Class phi_4_4: ['a_bit.0']
Class phi_8: ['j_lt_dim3.0']
Class phi_5_0_0: ['k_lt_dim2.1']
Class phi_9: ['i_lt_dim1.0']
Class phi_4_2_0: ['k_lt_dim2.0']
Class phi_10: ['dot_product.3']
Class phi_11: ['dp_bit.0']
Class phi_12: ['dot_product.0']
Class lt_1: ['k_lt_dim2.3']
{'args': ['i', 'j', 'cols'], 'dest': 'index.0', 'funcs': ['mat_packed_index'], 'op': 'call', 'type': 'int'}
index.0
{'args': ['m', 'index.0'], 'dest': 'ret_val.0', 'funcs': ['bitsel'], 'op': 'call', 'type': 'bool'}
ret_val.0
{'dest': 'one.0', 'op': 'const', 'type': 'int', 'value': 1}
one.0
{'dest': 'zero.0', 'op': 'const', 'type': 'int', 'value': 0}
zero.0
Congruence classes for function mat_bitsel:
Class arg_m: ['m']
Class arg_cols: ['cols']
Class arg_i: ['i']
Class arg_j: ['j']
Class call mat_packed_index: ['index.0']
Class call bitsel: ['ret_val.0']
Class const 1: ['one.0']
Class const 0: ['zero.0']
{'args': ['cols', 'i'], 'dest': 'index.0', 'op': 'mul', 'type': 'int'}
index.0
{'args': ['index.0', 'j'], 'dest': 'index.1', 'op': 'add', 'type': 'int'}
index.1
Congruence classes for function mat_packed_index:
Class arg_i: ['i']
Class arg_j: ['j']
Class arg_cols: ['cols']
Class mul: ['index.0']
Class add: ['index.1']
{'dest': 'one.0', 'op': 'const', 'type': 'int', 'value': 1}
one.0
{'dest': 'two.0', 'op': 'const', 'type': 'int', 'value': 2}
two.0
{'dest': 'i.0', 'op': 'const', 'type': 'int', 'value': 0}
i.0
{'dest': 'result.0', 'op': 'const', 'type': 'int', 'value': 1}
one.0
{'op': 'phi', 'dest': 'result.1', 'type': 'int', 'args': ['result.0', 'result.2', 'b1', 'multiply']}
result.1
{'op': 'phi', 'dest': 'i_lt_n.0', 'type': 'bool', 'args': ['i_lt_n.init', 'i_lt_n.1', 'b1', 'multiply']}
i_lt_n.0
{'op': 'phi', 'dest': 'i.1', 'type': 'int', 'args': ['i.0', 'i.2', 'b1', 'multiply']}
i.1
{'args': ['i.1', 'n'], 'dest': 'i_lt_n.1', 'op': 'lt', 'type': 'bool'}
i_lt_n.1
{'args': ['result.1', 'two.0'], 'dest': 'result.2', 'op': 'mul', 'type': 'int'}
result.2
{'args': ['i.1', 'one.0'], 'dest': 'i.2', 'op': 'add', 'type': 'int'}
i.2
Congruence classes for function pow2:
Class arg_n: ['n']
Class const 1: ['one.0', 'result.0']
Class const 2: ['two.0']
Class const 0: ['i.0']
Class phi: ['i_lt_n.0']
Class lt: ['i_lt_n.1']
Class mul: ['result.2']
Class add: ['i.2']
Class phi_0: ['i.1']
Class phi_1: ['result.1']
{'dest': 'zero.0', 'op': 'const', 'type': 'int', 'value': 0}
zero.0
{'dest': 'one.0', 'op': 'const', 'type': 'int', 'value': 1}
one.0
{'dest': 'two.0', 'op': 'const', 'type': 'int', 'value': 2}
two.0
{'op': 'phi', 'dest': 'm.0', 'type': 'int', 'args': ['m', 'm.1', 'b1', 'divide']}
m.0
{'op': 'phi', 'dest': 'i_eq_zero.0', 'type': 'bool', 'args': ['i_eq_zero.init', 'i_eq_zero.1', 'b1', 'divide']}
i_eq_zero.0
{'op': 'phi', 'dest': 'i.0', 'type': 'int', 'args': ['i', 'i.1', 'b1', 'divide']}
i.0
{'args': ['i.0', 'zero.0'], 'dest': 'i_eq_zero.1', 'op': 'eq', 'type': 'bool'}
i_eq_zero.1
{'args': ['m.0', 'two.0'], 'dest': 'm.1', 'op': 'div', 'type': 'int'}
m.1
{'args': ['i.0', 'one.0'], 'dest': 'i.1', 'op': 'sub', 'type': 'int'}
i.1
{'args': ['m.0'], 'dest': 'm_bit.0', 'funcs': ['is_odd'], 'op': 'call', 'type': 'bool'}
m_bit.0
Congruence classes for function bitsel:
Class arg_m: ['m']
Class arg_i: ['i']
Class const 0: ['zero.0']
Class const 1: ['one.0']
Class const 2: ['two.0']
Class phi: ['i_eq_zero.0']
Class eq: ['i_eq_zero.1']
Class div: ['m.1']
Class sub: ['i.1']
Class call is_odd: ['m_bit.0']
Class phi_0: ['i.0']
Class phi_1: ['m.0']
{'dest': 'zero.0', 'op': 'const', 'type': 'int', 'value': 0}
zero.0
{'args': ['n', 'zero.0'], 'dest': 'is_neg.0', 'op': 'lt', 'type': 'bool'}
is_neg.0
{'args': ['zero.0', 'n'], 'dest': 'n.0', 'op': 'sub', 'type': 'int'}
n.0
{'op': 'phi', 'dest': 'n.1', 'type': 'int', 'args': ['n', 'n.0', 'b1', 'negative']}
n.1
Congruence classes for function abs:
Class arg_n: ['n']
Class const 0: ['zero.0']
Class lt: ['is_neg.0']
Class sub: ['n.0']
Class phi: ['n.1']
{'args': ['n'], 'dest': 'n0.0', 'funcs': ['abs'], 'op': 'call', 'type': 'int'}
n0.0
{'dest': 'one.0', 'op': 'const', 'type': 'int', 'value': 1}
one.0
{'dest': 'two.0', 'op': 'const', 'type': 'int', 'value': 2}
two.0
{'args': ['n0.0', 'one.0'], 'dest': 'np1.0', 'op': 'add', 'type': 'int'}
np1.0
{'args': ['n0.0', 'two.0'], 'dest': 'half.0', 'op': 'div', 'type': 'int'}
half.0
{'args': ['np1.0', 'two.0'], 'dest': 'np1_half.0', 'op': 'div', 'type': 'int'}
np1_half.0
{'args': ['half.0', 'np1_half.0'], 'dest': 'ret_val.0', 'op': 'eq', 'type': 'bool'}
ret_val.0
Congruence classes for function is_even:
Class arg_n: ['n']
Class call abs: ['n0.0']
Class const 1: ['one.0']
Class const 2: ['two.0']
Class add: ['np1.0']
Class div: ['half.0']
Class eq: ['ret_val.0']
Class div_0: ['np1_half.0']
{'args': ['n'], 'dest': 'is_even.0', 'funcs': ['is_even'], 'op': 'call', 'type': 'bool'}
is_even.0
{'args': ['is_even.0'], 'dest': 'ret_val.0', 'op': 'not', 'type': 'bool'}
ret_val.0
Congruence classes for function is_odd:
Class arg_n: ['n']
Class call is_even: ['is_even.0']
Class not: ['ret_val.0']
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | python cexamples/is_ssa.py
no
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | python examples/is_ssa.pytemp_ssa.p
no
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | python examples/is_ssa.py
no
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | python examples/is_ssa.py
{'args': ['a_bit.1'], 'dest': 'shadow.a_bit.0', 'op': 'id', 'type': 'int'}
no
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/temp_ssa.py | python examples/is_ssa.pygvn
yes
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | python examples/is_ssa.py
{'dest': 'i.0', 'op': 'const', 'type': 'int', 'value': -1}
no
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | python examples/is_ssa.py
{'dest': 'i.0', 'op': 'const', 'type': 'int', 'value': -1}
{'dest': 'i.0', 'op': 'const', 'type': 'int', 'value': -1}
no
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | python examples/is_ssa.py
main
{'dest': 'i.0', 'op': 'const', 'type': 'int', 'value': -1}
{'dest': 'i.0', 'op': 'const', 'type': 'int', 'value': -1}
no
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | python examples/is_ssa.pytemp_ssgv | brili -p 2791 57 4 3 2
188
total_dyn_inst: 4599
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3 python examples/is_ssa.pybrili -p 2791 57 4 3
{'dest': 'one.0', 'op': 'const', 'type': 'int', 'value': 1}
one.0
{'dest': 'i.0', 'op': 'const', 'type': 'int', 'value': -1}
i.0
{'dest': 'output.0', 'op': 'const', 'type': 'int', 'value': 0}
dot_product.2
{'op': 'phi', 'dest': 'output.1', 'type': 'int', 'args': ['output.0', 'output.2', 'b1', 'col_loop']}
output.1
{'op': 'phi', 'dest': 'k_lt_dim2.0', 'type': 'bool', 'args': ['k_lt_dim2.init', 'k_lt_dim2.1', 'b1', 'col_loop']}
k_lt_dim2.0
{'op': 'phi', 'dest': 'k.0', 'type': 'int', 'args': ['k.init', 'k.2', 'b1', 'col_loop']}
k.0
{'op': 'phi', 'dest': 'j_lt_dim3.0', 'type': 'bool', 'args': ['j_lt_dim3.init', 'j_lt_dim3.2', 'b1', 'col_loop']}
j_lt_dim3.0
{'op': 'phi', 'dest': 'j.0', 'type': 'int', 'args': ['j.init', 'j.3', 'b1', 'col_loop']}
j.0
{'op': 'phi', 'dest': 'index.0', 'type': 'int', 'args': ['index.init', 'index.1', 'b1', 'col_loop']}
index.0
{'op': 'phi', 'dest': 'i_lt_dim1.0', 'type': 'bool', 'args': ['i_lt_dim1.init', 'i_lt_dim1.1', 'b1', 'col_loop']}
i_lt_dim1.0
{'op': 'phi', 'dest': 'i.1', 'type': 'int', 'args': ['i.0', 'i.2', 'b1', 'col_loop']}
i.1
{'op': 'phi', 'dest': 'dp_bit.0', 'type': 'int', 'args': ['dp_bit.init', 'dp_bit.1', 'b1', 'col_loop']}
dp_bit.0
{'op': 'phi', 'dest': 'dot_product_odd.0', 'type': 'bool', 'args': ['dot_product_odd.init', 'dot_product_odd.1', 'b1', 'col_loop']}
dot_product_odd.0
{'op': 'phi', 'dest': 'dot_product.0', 'type': 'int', 'args': ['dot_product.init', 'dot_product.2', 'b1', 'col_loop']}
dot_product.0
{'op': 'phi', 'dest': 'b_bit.0', 'type': 'int', 'args': ['b_bit.init', 'b_bit.1', 'b1', 'col_loop']}
b_bit.0
{'op': 'phi', 'dest': 'a_bit_b_bit.0', 'type': 'int', 'args': ['a_bit_b_bit.init', 'a_bit_b_bit.1', 'b1', 'col_loop']}
a_bit_b_bit.0
{'op': 'phi', 'dest': 'a_bit.0', 'type': 'int', 'args': ['a_bit.init', 'a_bit.1', 'b1', 'col_loop']}
a_bit.0
{'dest': 'j.1', 'op': 'const', 'type': 'int', 'value': -1}
i.0
{'args': ['i.1', 'one.0'], 'dest': 'i.2', 'op': 'add', 'type': 'int'}
i.2
{'args': ['i.2', 'dim1'], 'dest': 'i_lt_dim1.1', 'op': 'lt', 'type': 'bool'}
i_lt_dim1.1
{'op': 'phi', 'dest': 'output.2', 'type': 'int', 'args': ['output.3', 'output.2', 'output.1', 'add_dp', 'end_col', 'row_loop']}
output.2
{'op': 'phi', 'dest': 'k_lt_dim2.1', 'type': 'bool', 'args': ['k_lt_dim2.3', 'k_lt_dim2.3', 'k_lt_dim2.0', 'add_dp', 'end_col', 'row_loop']}
k_lt_dim2.1
{'op': 'phi', 'dest': 'k.1', 'type': 'int', 'args': ['k.4', 'k.4', 'k.0', 'add_dp', 'end_col', 'row_loop']}
k.1
{'op': 'phi', 'dest': 'j_lt_dim3.1', 'type': 'bool', 'args': ['j_lt_dim3.2', 'j_lt_dim3.2', 'j_lt_dim3.0', 'add_dp', 'end_col', 'row_loop']}
j_lt_dim3.1
{'op': 'phi', 'dest': 'j.2', 'type': 'int', 'args': ['j.3', 'j.3', 'j.1', 'add_dp', 'end_col', 'row_loop']}
j.2
{'op': 'phi', 'dest': 'index.1', 'type': 'int', 'args': ['index.2', 'index.1', 'index.0', 'add_dp', 'end_col', 'row_loop']}
index.1
{'op': 'phi', 'dest': 'dp_bit.1', 'type': 'int', 'args': ['dp_bit.2', 'dp_bit.1', 'dp_bit.0', 'add_dp', 'end_col', 'row_loop']}
dp_bit.1
{'op': 'phi', 'dest': 'dot_product_odd.1', 'type': 'bool', 'args': ['dot_product_odd.2', 'dot_product_odd.2', 'dot_product_odd.0', 'add_dp', 'end_col', 'row_loop']}
dot_product_odd.1
{'op': 'phi', 'dest': 'dot_product.1', 'type': 'int', 'args': ['dot_product.3', 'dot_product.3', 'dot_product.0', 'add_dp', 'end_col', 'row_loop']}
dot_product.1
{'op': 'phi', 'dest': 'b_bit.1', 'type': 'int', 'args': ['b_bit.2', 'b_bit.2', 'b_bit.0', 'add_dp', 'end_col', 'row_loop']}
b_bit.1
{'op': 'phi', 'dest': 'a_bit_b_bit.1', 'type': 'int', 'args': ['a_bit_b_bit.2', 'a_bit_b_bit.2', 'a_bit_b_bit.0', 'add_dp', 'end_col', 'row_loop']}
a_bit_b_bit.1
{'op': 'phi', 'dest': 'a_bit.1', 'type': 'int', 'args': ['a_bit.2', 'a_bit.2', 'a_bit.0', 'add_dp', 'end_col', 'row_loop']}
a_bit.1
{'dest': 'k.2', 'op': 'const', 'type': 'int', 'value': -1}
i.0
{'args': ['j.2', 'one.0'], 'dest': 'j.3', 'op': 'add', 'type': 'int'}
j.3
{'dest': 'dot_product.2', 'op': 'const', 'type': 'int', 'value': 0}
dot_product.2
{'args': ['j.3', 'dim3'], 'dest': 'j_lt_dim3.2', 'op': 'lt', 'type': 'bool'}
j_lt_dim3.2
{'op': 'phi', 'dest': 'k_lt_dim2.2', 'type': 'bool', 'args': ['k_lt_dim2.1', 'k_lt_dim2.3', 'col_loop', 'multiply']}
k_lt_dim2.2
{'op': 'phi', 'dest': 'k.3', 'type': 'int', 'args': ['k.2', 'k.4', 'col_loop', 'multiply']}
i.1
{'op': 'phi', 'dest': 'dot_product.3', 'type': 'int', 'args': ['dot_product.2', 'dot_product.4', 'col_loop', 'multiply']}
dot_product.3
{'op': 'phi', 'dest': 'b_bit.2', 'type': 'int', 'args': ['b_bit.1', 'b_bit.3', 'col_loop', 'multiply']}
b_bit.2
{'op': 'phi', 'dest': 'a_bit_b_bit.2', 'type': 'int', 'args': ['a_bit_b_bit.1', 'a_bit_b_bit.3', 'col_loop', 'multiply']}
a_bit_b_bit.2
{'op': 'phi', 'dest': 'a_bit.2', 'type': 'int', 'args': ['a_bit.1', 'a_bit.3', 'col_loop', 'multiply']}
a_bit.2
{'args': ['k.3', 'one.0'], 'dest': 'k.4', 'op': 'add', 'type': 'int'}
i.2
{'args': ['k.4', 'dim2'], 'dest': 'k_lt_dim2.3', 'op': 'lt', 'type': 'bool'}
k_lt_dim2.3
{'args': ['a', 'dim2', 'i.2', 'k.4'], 'dest': 'a_bit.3', 'funcs': ['mat_bitsel'], 'op': 'call', 'type': 'int'}
a_bit.3
{'args': ['b', 'dim3', 'k.4', 'j.3'], 'dest': 'b_bit.3', 'funcs': ['mat_bitsel'], 'op': 'call', 'type': 'int'}
b_bit.3
{'args': ['a_bit.3', 'b_bit.3'], 'dest': 'a_bit_b_bit.3', 'op': 'mul', 'type': 'int'}
a_bit_b_bit.3
{'args': ['a_bit_b_bit.3', 'dot_product.3'], 'dest': 'dot_product.4', 'op': 'add', 'type': 'int'}
dot_product.4
{'args': ['dot_product.3'], 'dest': 'dot_product_odd.2', 'funcs': ['is_odd'], 'op': 'call', 'type': 'bool'}
dot_product_odd.2
{'args': ['i.2', 'j.3', 'dim3'], 'dest': 'index.2', 'funcs': ['mat_packed_index'], 'op': 'call', 'type': 'int'}
index.2
{'args': ['index.2'], 'dest': 'dp_bit.2', 'funcs': ['pow2'], 'op': 'call', 'type': 'int'}
dp_bit.2
{'args': ['dp_bit.2', 'output.2'], 'dest': 'output.3', 'op': 'add', 'type': 'int'}
output.3
Congruence classes for function main:
Class arg_a: ['a']
Class arg_b: ['b']
Class arg_dim1: ['dim1']
Class arg_dim2: ['dim2']
Class arg_dim3: ['dim3']
Class const 1: ['one.0']
Class const -1: ['i.0', 'j.1', 'k.2']
Class const 0: ['dot_product.2', 'output.0']
Class phi: ['k.0']
Class add: ['dot_product.4']
Class lt: ['i_lt_dim1.1']
Class call mat_bitsel: ['a_bit.3']
Class mul: ['a_bit_b_bit.3']
Class call is_odd: ['dot_product_odd.2']
Class call mat_packed_index: ['index.2']
Class call pow2: ['dp_bit.2']
Class phi_0: ['dp_bit.1']
Class add_0: ['output.3']
Class phi_1: ['output.2']
Class phi_2: ['output.1']
Class phi_3: ['a_bit_b_bit.2']
Class add_1: ['j.3']
Class phi_4: ['a_bit_b_bit.0']
Class phi_3_0: ['dot_product.1']
Class phi_5: ['j_lt_dim3.1']
Class phi_4_0: ['index.1']
Class phi_4_1: ['index.0']
Class phi_3_0_0: ['a_bit_b_bit.1']
Class phi_5_0: ['dot_product_odd.1']
Class phi_3_1: ['k_lt_dim2.2']
Class phi_4_2: ['dot_product_odd.0']
Class phi_6: ['j.2']
Class phi_5_1: ['k.1']
Class phi_7: ['i.1', 'k.3']
Class add_1_0: ['i.2', 'k.4']
Class lt_0: ['j_lt_dim3.2']
Class phi_7_0: ['j.0']
Class call mat_bitsel_0: ['b_bit.3']
Class phi_3_2: ['b_bit.2']
Class phi_3_0_0_0: ['b_bit.1']
Class phi_4_3: ['b_bit.0']
Class phi_3_3: ['a_bit.2']
Class phi_3_0_0_1: ['a_bit.1']
Class phi_4_4: ['a_bit.0']
Class phi_8: ['j_lt_dim3.0']
Class phi_5_0_0: ['k_lt_dim2.1']
Class phi_9: ['i_lt_dim1.0']
Class phi_4_2_0: ['k_lt_dim2.0']
Class phi_10: ['dot_product.3']
Class phi_11: ['dp_bit.0']
Class phi_12: ['dot_product.0']
Class lt_1: ['k_lt_dim2.3']
{'args': ['i', 'j', 'cols'], 'dest': 'index.0', 'funcs': ['mat_packed_index'], 'op': 'call', 'type': 'int'}
index.0
{'args': ['m', 'index.0'], 'dest': 'ret_val.0', 'funcs': ['bitsel'], 'op': 'call', 'type': 'bool'}
ret_val.0
{'dest': 'one.0', 'op': 'const', 'type': 'int', 'value': 1}
one.0
{'dest': 'zero.0', 'op': 'const', 'type': 'int', 'value': 0}
zero.0
Congruence classes for function mat_bitsel:
Class arg_m: ['m']
Class arg_cols: ['cols']
Class arg_i: ['i']
Class arg_j: ['j']
Class call mat_packed_index: ['index.0']
Class call bitsel: ['ret_val.0']
Class const 1: ['one.0']
Class const 0: ['zero.0']
{'args': ['cols', 'i'], 'dest': 'index.0', 'op': 'mul', 'type': 'int'}
index.0
{'args': ['index.0', 'j'], 'dest': 'index.1', 'op': 'add', 'type': 'int'}
index.1
Congruence classes for function mat_packed_index:
Class arg_i: ['i']
Class arg_j: ['j']
Class arg_cols: ['cols']
Class mul: ['index.0']
Class add: ['index.1']
{'dest': 'one.0', 'op': 'const', 'type': 'int', 'value': 1}
one.0
{'dest': 'two.0', 'op': 'const', 'type': 'int', 'value': 2}
two.0
{'dest': 'i.0', 'op': 'const', 'type': 'int', 'value': 0}
i.0
{'dest': 'result.0', 'op': 'const', 'type': 'int', 'value': 1}
one.0
{'op': 'phi', 'dest': 'result.1', 'type': 'int', 'args': ['result.0', 'result.2', 'b1', 'multiply']}
result.1
{'op': 'phi', 'dest': 'i_lt_n.0', 'type': 'bool', 'args': ['i_lt_n.init', 'i_lt_n.1', 'b1', 'multiply']}
i_lt_n.0
{'op': 'phi', 'dest': 'i.1', 'type': 'int', 'args': ['i.0', 'i.2', 'b1', 'multiply']}
i.1
{'args': ['i.1', 'n'], 'dest': 'i_lt_n.1', 'op': 'lt', 'type': 'bool'}
i_lt_n.1
{'args': ['result.1', 'two.0'], 'dest': 'result.2', 'op': 'mul', 'type': 'int'}
result.2
{'args': ['i.1', 'one.0'], 'dest': 'i.2', 'op': 'add', 'type': 'int'}
i.2
Congruence classes for function pow2:
Class arg_n: ['n']
Class const 1: ['one.0', 'result.0']
Class const 2: ['two.0']
Class const 0: ['i.0']
Class phi: ['i_lt_n.0']
Class lt: ['i_lt_n.1']
Class mul: ['result.2']
Class add: ['i.2']
Class phi_0: ['i.1']
Class phi_1: ['result.1']
{'dest': 'zero.0', 'op': 'const', 'type': 'int', 'value': 0}
zero.0
{'dest': 'one.0', 'op': 'const', 'type': 'int', 'value': 1}
one.0
{'dest': 'two.0', 'op': 'const', 'type': 'int', 'value': 2}
two.0
{'op': 'phi', 'dest': 'm.0', 'type': 'int', 'args': ['m', 'm.1', 'b1', 'divide']}
m.0
{'op': 'phi', 'dest': 'i_eq_zero.0', 'type': 'bool', 'args': ['i_eq_zero.init', 'i_eq_zero.1', 'b1', 'divide']}
i_eq_zero.0
{'op': 'phi', 'dest': 'i.0', 'type': 'int', 'args': ['i', 'i.1', 'b1', 'divide']}
i.0
{'args': ['i.0', 'zero.0'], 'dest': 'i_eq_zero.1', 'op': 'eq', 'type': 'bool'}
i_eq_zero.1
{'args': ['m.0', 'two.0'], 'dest': 'm.1', 'op': 'div', 'type': 'int'}
m.1
{'args': ['i.0', 'one.0'], 'dest': 'i.1', 'op': 'sub', 'type': 'int'}
i.1
{'args': ['m.0'], 'dest': 'm_bit.0', 'funcs': ['is_odd'], 'op': 'call', 'type': 'bool'}
m_bit.0
Congruence classes for function bitsel:
Class arg_m: ['m']
Class arg_i: ['i']
Class const 0: ['zero.0']
Class const 1: ['one.0']
Class const 2: ['two.0']
Class phi: ['i_eq_zero.0']
Class eq: ['i_eq_zero.1']
Class div: ['m.1']
Class sub: ['i.1']
Class call is_odd: ['m_bit.0']
Class phi_0: ['i.0']
Class phi_1: ['m.0']
{'dest': 'zero.0', 'op': 'const', 'type': 'int', 'value': 0}
zero.0
{'args': ['n', 'zero.0'], 'dest': 'is_neg.0', 'op': 'lt', 'type': 'bool'}
is_neg.0
{'args': ['zero.0', 'n'], 'dest': 'n.0', 'op': 'sub', 'type': 'int'}
n.0
{'op': 'phi', 'dest': 'n.1', 'type': 'int', 'args': ['n', 'n.0', 'b1', 'negative']}
n.1
Congruence classes for function abs:
Class arg_n: ['n']
Class const 0: ['zero.0']
Class lt: ['is_neg.0']
Class sub: ['n.0']
Class phi: ['n.1']
{'args': ['n'], 'dest': 'n0.0', 'funcs': ['abs'], 'op': 'call', 'type': 'int'}
n0.0
{'dest': 'one.0', 'op': 'const', 'type': 'int', 'value': 1}
one.0
{'dest': 'two.0', 'op': 'const', 'type': 'int', 'value': 2}
two.0
{'args': ['n0.0', 'one.0'], 'dest': 'np1.0', 'op': 'add', 'type': 'int'}
np1.0
{'args': ['n0.0', 'two.0'], 'dest': 'half.0', 'op': 'div', 'type': 'int'}
half.0
{'args': ['np1.0', 'two.0'], 'dest': 'np1_half.0', 'op': 'div', 'type': 'int'}
np1_half.0
{'args': ['half.0', 'np1_half.0'], 'dest': 'ret_val.0', 'op': 'eq', 'type': 'bool'}
ret_val.0
Congruence classes for function is_even:
Class arg_n: ['n']
Class call abs: ['n0.0']
Class const 1: ['one.0']
Class const 2: ['two.0']
Class add: ['np1.0']
Class div: ['half.0']
Class eq: ['ret_val.0']
Class div_0: ['np1_half.0']
{'args': ['n'], 'dest': 'is_even.0', 'funcs': ['is_even'], 'op': 'call', 'type': 'bool'}
is_even.0
{'args': ['is_even.0'], 'dest': 'ret_val.0', 'op': 'not', 'type': 'bool'}
ret_val.0
Congruence classes for function is_odd:
Class arg_n: ['n']
Class call is_even: ['is_even.0']
Class not: ['ret_val.0']
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3 2
/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (2.2.3) or chardet (3.0.4) doesn't match a supported version!
warnings.warn("urllib3 ({}) or chardet ({}) doesn't match a supported "
Traceback (most recent call last):
File "cs6120/final/gvn.py", line 118, in <module>
main()
File "cs6120/final/gvn.py", line 85, in main
ssa_program = to_ssa(bril_program)
File "/home/nya1025/bril/cs6120/final/ssa.py", line 175, in to_ssa
func_to_ssa(func)
File "/home/nya1025/bril/cs6120/final/ssa.py", line 168, in func_to_ssa
insert_inits(next(iter(blocks.values())), inits, types)
File "/home/nya1025/bril/cs6120/final/ssa.py", line 134, in insert_inits
"type": types[old_var],
KeyError: 'add_dp'
error: unknown opcode phi
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3  | brili -p 2791 57 4 3 2
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3  | bril2txt
/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (2.2.3) or chardet (3.0.4) doesn't match a supported version!
warnings.warn("urllib3 ({}) or chardet ({}) doesn't match a supported "
Traceback (most recent call last):
File "cs6120/final/gvn.py", line 118, in <module>
main()
File "cs6120/final/gvn.py", line 85, in main
ssa_program = to_ssa(bril_program)
File "/home/nya1025/bril/cs6120/final/ssa.py", line 175, in to_ssa
func_to_ssa(func)
File "/home/nya1025/bril/cs6120/final/ssa.py", line 168, in func_to_ssa
insert_inits(next(iter(blocks.values())), inits, types)
File "/home/nya1025/bril/cs6120/final/ssa.py", line 134, in insert_inits
"type": types[old_var],
KeyError: 'add_dp'
@main(a: int, b: int, dim1: int, dim2: int, dim3: int) {
.b1:
k_lt_dim2.init: bool = undef;
k.init: int = undef;
j_lt_dim3.init: bool = undef;
j.init: int = undef;
index.init: int = undef;
i_lt_dim1.init: bool = undef;
dp_bit.init: int = undef;
dot_product_odd.init: bool = undef;
dot_product.init: int = undef;
b_bit.init: int = undef;
a_bit_b_bit.init: int = undef;
a_bit.init: int = undef;
one.0: int = const 1;
i.0: int = const -1;
output.0: int = const 0;
jmp .row_loop;
.row_loop:
output.1: int = phi output.0 output.2 b1 col_loop;
k_lt_dim2.0: bool = phi k_lt_dim2.init k_lt_dim2.1 b1 col_loop;
k.0: int = phi k.init k.2 b1 col_loop;
j_lt_dim3.0: bool = phi j_lt_dim3.init j_lt_dim3.2 b1 col_loop;
j.0: int = phi j.init j.3 b1 col_loop;
index.0: int = phi index.init index.1 b1 col_loop;
i_lt_dim1.0: bool = phi i_lt_dim1.init i_lt_dim1.1 b1 col_loop;
i.1: int = phi i.0 i.2 b1 col_loop;
dp_bit.0: int = phi dp_bit.init dp_bit.1 b1 col_loop;
dot_product_odd.0: bool = phi dot_product_odd.init dot_product_odd.1 b1 col_loop;
dot_product.0: int = phi dot_product.init dot_product.2 b1 col_loop;
b_bit.0: int = phi b_bit.init b_bit.1 b1 col_loop;
a_bit_b_bit.0: int = phi a_bit_b_bit.init a_bit_b_bit.1 b1 col_loop;
a_bit.0: int = phi a_bit.init a_bit.1 b1 col_loop;
j.1: int = const -1;
i.2: int = add i.1 one.0;
i_lt_dim1.1: bool = lt i.2 dim1;
br i_lt_dim1.1 .col_loop .return;
.col_loop:
output.2: int = phi output.3 output.2 output.1 add_dp end_col row_loop;
k_lt_dim2.1: bool = phi k_lt_dim2.3 k_lt_dim2.3 k_lt_dim2.0 add_dp end_col row_loop;
k.1: int = phi k.4 k.4 k.0 add_dp end_col row_loop;
j_lt_dim3.1: bool = phi j_lt_dim3.2 j_lt_dim3.2 j_lt_dim3.0 add_dp end_col row_loop;
j.2: int = phi j.3 j.3 j.1 add_dp end_col row_loop;
index.1: int = phi index.2 index.1 index.0 add_dp end_col row_loop;
dp_bit.1: int = phi dp_bit.2 dp_bit.1 dp_bit.0 add_dp end_col row_loop;
dot_product_odd.1: bool = phi dot_product_odd.2 dot_product_odd.2 dot_product_odd.0 add_dp end_col row_loop;
dot_product.1: int = phi dot_product.3 dot_product.3 dot_product.0 add_dp end_col row_loop;
b_bit.1: int = phi b_bit.2 b_bit.2 b_bit.0 add_dp end_col row_loop;
a_bit_b_bit.1: int = phi a_bit_b_bit.2 a_bit_b_bit.2 a_bit_b_bit.0 add_dp end_col row_loop;
a_bit.1: int = phi a_bit.2 a_bit.2 a_bit.0 add_dp end_col row_loop;
k.2: int = const -1;
j.3: int = add j.2 one.0;
dot_product.2: int = const 0;
j_lt_dim3.2: bool = lt j.3 dim3;
br j_lt_dim3.2 .inner_loop .row_loop;
.inner_loop:
k_lt_dim2.2: bool = phi k_lt_dim2.1 k_lt_dim2.3 col_loop multiply;
k.3: int = phi k.2 k.4 col_loop multiply;
dot_product.3: int = phi dot_product.2 dot_product.4 col_loop multiply;
b_bit.2: int = phi b_bit.1 b_bit.3 col_loop multiply;
a_bit_b_bit.2: int = phi a_bit_b_bit.1 a_bit_b_bit.3 col_loop multiply;
a_bit.2: int = phi a_bit.1 a_bit.3 col_loop multiply;
k.4: int = add k.3 one.0;
k_lt_dim2.3: bool = lt k.4 dim2;
br k_lt_dim2.3 .multiply .end_col;
.multiply:
a_bit.3: int = call @mat_bitsel a dim2 i.2 k.4;
b_bit.3: int = call @mat_bitsel b dim3 k.4 j.3;
a_bit_b_bit.3: int = mul a_bit.3 b_bit.3;
dot_product.4: int = add dot_product.3 a_bit_b_bit.3;
jmp .inner_loop;
.end_col:
dot_product_odd.2: bool = call @is_odd dot_product.3;
br dot_product_odd.2 .add_dp .col_loop;
.add_dp:
index.2: int = call @mat_packed_index i.2 j.3 dim3;
dp_bit.2: int = call @pow2 index.2;
output.3: int = add output.2 dp_bit.2;
jmp .col_loop;
.return:
print output.1;
ret;
}
@mat_bitsel(m: int, cols: int, i: int, j: int): int {
.b1:
index.0: int = call @mat_packed_index i j cols;
ret_val.0: bool = call @bitsel m index.0;
br ret_val.0 .ret_one .ret_zero;
.ret_one:
one.0: int = const 1;
ret one.0;
.ret_zero:
zero.0: int = const 0;
ret zero.0;
}
@mat_packed_index(i: int, j: int, cols: int): int {
.b1:
index.0: int = mul i cols;
index.1: int = add index.0 j;
ret index.1;
}
@pow2(n: int): int {
.b1:
i_lt_n.init: bool = undef;
one.0: int = const 1;
two.0: int = const 2;
i.0: int = const 0;
result.0: int = const 1;
jmp .loop;
.loop:
result.1: int = phi result.0 result.2 b1 multiply;
i_lt_n.0: bool = phi i_lt_n.init i_lt_n.1 b1 multiply;
i.1: int = phi i.0 i.2 b1 multiply;
i_lt_n.1: bool = lt i.1 n;
br i_lt_n.1 .multiply .return;
.multiply:
result.2: int = mul result.1 two.0;
i.2: int = add i.1 one.0;
jmp .loop;
.return:
ret result.1;
}
@bitsel(m: int, i: int): bool {
.b1:
i_eq_zero.init: bool = undef;
zero.0: int = const 0;
one.0: int = const 1;
two.0: int = const 2;
jmp .loop;
.loop:
m.0: int = phi m m.1 b1 divide;
i_eq_zero.0: bool = phi i_eq_zero.init i_eq_zero.1 b1 divide;
i.0: int = phi i i.1 b1 divide;
i_eq_zero.1: bool = eq i.0 zero.0;
br i_eq_zero.1 .return .divide;
.divide:
m.1: int = div m.0 two.0;
i.1: int = sub i.0 one.0;
jmp .loop;
.return:
m_bit.0: bool = call @is_odd m.0;
ret m_bit.0;
}
@abs(n: int): int {
.b1:
zero.0: int = const 0;
is_neg.0: bool = lt n zero.0;
br is_neg.0 .negative .positive;
.negative:
n.0: int = sub zero.0 n;
jmp .positive;
.positive:
n.1: int = phi n n.0 b1 negative;
ret n.1;
}
@is_even(n: int): bool {
.b1:
n0.0: int = call @abs n;
one.0: int = const 1;
two.0: int = const 2;
np1.0: int = add n0.0 one.0;
half.0: int = div n0.0 two.0;
np1_half.0: int = div np1.0 two.0;
ret_val.0: bool = eq half.0 np1_half.0;
ret ret_val.0;
}
@is_odd(n: int): bool {
.b1:
is_even.0: bool = call @is_even n;
ret_val.0: bool = not is_even.0;
ret ret_val.0;
}
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | bril2txt
Traceback (most recent call last):
File "/home/nya1025/.local/bin/bril2txt", line 10, in <module>
sys.exit(bril2txt())
File "/home/nya1025/.local/share/uv/tools/briltxt/lib/python3.8/site-packages/briltxt.py", line 343, in bril2txt
print_prog(json.load(sys.stdin))
File "/usr/lib/python3.8/json/__init__.py", line 293, in load
return loads(fp.read(),
File "/usr/lib/python3.8/json/__init__.py", line 357, in loads
return _default_decoder.decode(s)
File "/usr/lib/python3.8/json/decoder.py", line 337, in decode
obj, end = self.raw_decode(s, idx=_w(s, 0).end())
File "/usr/lib/python3.8/json/decoder.py", line 353, in raw_decode
obj, end = self.scan_once(s, idx)
json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | bril2txi -p 2791 57 4 3 2
^C
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3 2
error: Uncaught (in promise) SyntaxError: Unexpected token 'm', "main
{
""... is not valid JSON
const prog = JSON.parse(await readStdin()) as bril.Program;
^
at JSON.parse (<anonymous>)
at main (file:///home/nya1025/bril/brili.ts:1020:23)
at eventLoopTick (ext:core/01_core.js:177:7)
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3 2
error: Uncaught (in promise) SyntaxError: Expected property name or '}' in JSON at position 1 (line 1 column 2)
const prog = JSON.parse(await readStdin()) as bril.Program;
^
at JSON.parse (<anonymous>)
at main (file:///home/nya1025/bril/brili.ts:1020:23)
at eventLoopTick (ext:core/01_core.js:177:7)
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3
{'args': [{'name': 'a', 'type': 'int'}, {'name': 'b', 'type': 'int'}, {'name': 'dim1', 'type': 'int'}, {'name': 'dim2', 'type': 'int'}, {'name': 'dim3', 'type': 'int'}], 'instrs': [{'label': 'b1'}, {'op': 'undef', 'type': 'bool', 'dest': 'k_lt_dim2.init'}, {'op': 'undef', 'type': 'int', 'dest': 'k.init'}, {'op': 'undef', 'type': 'bool', 'dest': 'j_lt_dim3.init'}, {'op': 'undef', 'type': 'int', 'dest': 'j.init'}, {'op': 'undef', 'type': 'int', 'dest': 'index.init'}, {'op': 'undef', 'type': 'bool', 'dest': 'i_lt_dim1.init'}, {'op': 'undef', 'type': 'int', 'dest': 'dp_bit.init'}, {'op': 'undef', 'type': 'bool', 'dest': 'dot_product_odd.init'}, {'op': 'undef', 'type': 'int', 'dest': 'dot_product.init'}, {'op': 'undef', 'type': 'int', 'dest': 'b_bit.init'}, {'op': 'undef', 'type': 'int', 'dest': 'a_bit_b_bit.init'}, {'op': 'undef', 'type': 'int', 'dest': 'a_bit.init'}, {'dest': 'one.0', 'op': 'const', 'type': 'int', 'value': 1}, {'dest': 'i.0', 'op': 'const', 'type': 'int', 'value': -1}, {'dest': 'output.0', 'op': 'const', 'type': 'int', 'value': 0}, {'op': 'jmp', 'labels': ['row_loop']}, {'label': 'row_loop'}, {'op': 'phi', 'dest': 'output.1', 'type': 'int', 'args': ['output.0', 'output.2', 'b1', 'col_loop']}, {'op': 'phi', 'dest': 'k_lt_dim2.0', 'type': 'bool', 'args': ['k_lt_dim2.init', 'k_lt_dim2.1', 'b1', 'col_loop']}, {'op': 'phi', 'dest': 'k.0', 'type': 'int', 'args': ['k.init', 'k.2', 'b1', 'col_loop']}, {'op': 'phi', 'dest': 'j_lt_dim3.0', 'type': 'bool', 'args': ['j_lt_dim3.init', 'j_lt_dim3.2', 'b1', 'col_loop']}, {'op': 'phi', 'dest': 'j.0', 'type': 'int', 'args': ['j.init', 'j.3', 'b1', 'col_loop']}, {'op': 'phi', 'dest': 'index.0', 'type': 'int', 'args': ['index.init', 'index.1', 'b1', 'col_loop']}, {'op': 'phi', 'dest': 'i_lt_dim1.0', 'type': 'bool', 'args': ['i_lt_dim1.init', 'i_lt_dim1.1', 'b1', 'col_loop']}, {'op': 'phi', 'dest': 'i.1', 'type': 'int', 'args': ['i.0', 'i.2', 'b1', 'col_loop']}, {'op': 'phi', 'dest': 'dp_bit.0', 'type': 'int', 'args': ['dp_bit.init', 'dp_bit.1', 'b1', 'col_loop']}, {'op': 'phi', 'dest': 'dot_product_odd.0', 'type': 'bool', 'args': ['dot_product_odd.init', 'dot_product_odd.1', 'b1', 'col_loop']}, {'op': 'phi', 'dest': 'dot_product.0', 'type': 'int', 'args': ['dot_product.init', 'dot_product.2', 'b1', 'col_loop']}, {'op': 'phi', 'dest': 'b_bit.0', 'type': 'int', 'args': ['b_bit.init', 'b_bit.1', 'b1', 'col_loop']}, {'op': 'phi', 'dest': 'a_bit_b_bit.0', 'type': 'int', 'args': ['a_bit_b_bit.init', 'a_bit_b_bit.1', 'b1', 'col_loop']}, {'op': 'phi', 'dest': 'a_bit.0', 'type': 'int', 'args': ['a_bit.init', 'a_bit.1', 'b1', 'col_loop']}, {'dest': 'j.1', 'op': 'const', 'type': 'int', 'value': -1}, {'args': ['i.1', 'one.0'], 'dest': 'i.2', 'op': 'add', 'type': 'int'}, {'args': ['i.2', 'dim1'], 'dest': 'i_lt_dim1.1', 'op': 'lt', 'type': 'bool'}, {'args': ['i_lt_dim1.1'], 'labels': ['col_loop', 'return'], 'op': 'br'}, {'label': 'col_loop'}, {'op': 'phi', 'dest': 'output.2', 'type': 'int', 'args': ['output.3', 'output.2', 'output.1', 'add_dp', 'end_col', 'row_loop']}, {'op': 'phi', 'dest': 'k_lt_dim2.1', 'type': 'bool', 'args': ['k_lt_dim2.3', 'k_lt_dim2.3', 'k_lt_dim2.0', 'add_dp', 'end_col', 'row_loop']}, {'op': 'phi', 'dest': 'k.1', 'type': 'int', 'args': ['k.4', 'k.4', 'k.0', 'add_dp', 'end_col', 'row_loop']}, {'op': 'phi', 'dest': 'j_lt_dim3.1', 'type': 'bool', 'args': ['j_lt_dim3.2', 'j_lt_dim3.2', 'j_lt_dim3.0', 'add_dp', 'end_col', 'row_loop']}, {'op': 'phi', 'dest': 'j.2', 'type': 'int', 'args': ['j.3', 'j.3', 'j.1', 'add_dp', 'end_col', 'row_loop']}, {'op': 'phi', 'dest': 'index.1', 'type': 'int', 'args': ['index.2', 'index.1', 'index.0', 'add_dp', 'end_col', 'row_loop']}, {'op': 'phi', 'dest': 'dp_bit.1', 'type': 'int', 'args': ['dp_bit.2', 'dp_bit.1', 'dp_bit.0', 'add_dp', 'end_col', 'row_loop']}, {'op': 'phi', 'dest': 'dot_product_odd.1', 'type': 'bool', 'args': ['dot_product_odd.2', 'dot_product_odd.2', 'dot_product_odd.0', 'add_dp', 'end_col', 'row_loop']}, {'op': 'phi', 'dest': 'dot_product.1', 'type': 'int', 'args': ['dot_product.3', 'dot_product.3', 'dot_product.0', 'add_dp', 'end_col', 'row_loop']}, {'op': 'phi', 'dest': 'b_bit.1', 'type': 'int', 'args': ['b_bit.2', 'b_bit.2', 'b_bit.0', 'add_dp', 'end_col', 'row_loop']}, {'op': 'phi', 'dest': 'a_bit_b_bit.1', 'type': 'int', 'args': ['a_bit_b_bit.2', 'a_bit_b_bit.2', 'a_bit_b_bit.0', 'add_dp', 'end_col', 'row_loop']}, {'op': 'phi', 'dest': 'a_bit.1', 'type': 'int', 'args': ['a_bit.2', 'a_bit.2', 'a_bit.0', 'add_dp', 'end_col', 'row_loop']}, {'dest': 'k.2', 'op': 'const', 'type': 'int', 'value': -1}, {'args': ['j.2', 'one.0'], 'dest': 'j.3', 'op': 'add', 'type': 'int'}, {'dest': 'dot_product.2', 'op': 'const', 'type': 'int', 'value': 0}, {'args': ['j.3', 'dim3'], 'dest': 'j_lt_dim3.2', 'op': 'lt', 'type': 'bool'}, {'args': ['j_lt_dim3.2'], 'labels': ['inner_loop', 'row_loop'], 'op': 'br'}, {'label': 'inner_loop'}, {'op': 'phi', 'dest': 'k_lt_dim2.2', 'type': 'bool', 'args': ['k_lt_dim2.1', 'k_lt_dim2.3', 'col_loop', 'multiply']}, {'op': 'phi', 'dest': 'k.3', 'type': 'int', 'args': ['k.2', 'k.4', 'col_loop', 'multiply']}, {'op': 'phi', 'dest': 'dot_product.3', 'type': 'int', 'args': ['dot_product.2', 'dot_product.4', 'col_loop', 'multiply']}, {'op': 'phi', 'dest': 'b_bit.2', 'type': 'int', 'args': ['b_bit.1', 'b_bit.3', 'col_loop', 'multiply']}, {'op': 'phi', 'dest': 'a_bit_b_bit.2', 'type': 'int', 'args': ['a_bit_b_bit.1', 'a_bit_b_bit.3', 'col_loop', 'multiply']}, {'op': 'phi', 'dest': 'a_bit.2', 'type': 'int', 'args': ['a_bit.1', 'a_bit.3', 'col_loop', 'multiply']}, {'args': ['k.3', 'one.0'], 'dest': 'k.4', 'op': 'add', 'type': 'int'}, {'args': ['k.4', 'dim2'], 'dest': 'k_lt_dim2.3', 'op': 'lt', 'type': 'bool'}, {'args': ['k_lt_dim2.3'], 'labels': ['multiply', 'end_col'], 'op': 'br'}, {'label': 'multiply'}, {'args': ['a', 'dim2', 'i.2', 'k.4'], 'dest': 'a_bit.3', 'funcs': ['mat_bitsel'], 'op': 'call', 'type': 'int'}, {'args': ['b', 'dim3', 'k.4', 'j.3'], 'dest': 'b_bit.3', 'funcs': ['mat_bitsel'], 'op': 'call', 'type': 'int'}, {'args': ['a_bit.3', 'b_bit.3'], 'dest': 'a_bit_b_bit.3', 'op': 'mul', 'type': 'int'}, {'args': ['dot_product.3', 'a_bit_b_bit.3'], 'dest': 'dot_product.4', 'op': 'add', 'type': 'int'}, {'labels': ['inner_loop'], 'op': 'jmp'}, {'label': 'end_col'}, {'args': ['dot_product.3'], 'dest': 'dot_product_odd.2', 'funcs': ['is_odd'], 'op': 'call', 'type': 'bool'}, {'args': ['dot_product_odd.2'], 'labels': ['add_dp', 'col_loop'], 'op': 'br'}, {'label': 'add_dp'}, {'args': ['i.2', 'j.3', 'dim3'], 'dest': 'index.2', 'funcs': ['mat_packed_index'], 'op': 'call', 'type': 'int'}, {'args': ['index.2'], 'dest': 'dp_bit.2', 'funcs': ['pow2'], 'op': 'call', 'type': 'int'}, {'args': ['output.2', 'dp_bit.2'], 'dest': 'output.3', 'op': 'add', 'type': 'int'}, {'labels': ['col_loop'], 'op': 'jmp'}, {'label': 'return'}, {'args': ['output.1'], 'op': 'print'}, {'op': 'ret', 'args': []}], 'name': 'main'}
{
"functions": [
{
"args": [
{
"name": "a",
"type": "int"
},
{
"name": "b",
"type": "int"
},
{
"name": "dim1",
"type": "int"
},
{
"name": "dim2",
"type": "int"
},
{
"name": "dim3",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "k_lt_dim2.init",
"op": "undef",
"type": "bool"
},
{
"dest": "k.init",
"op": "undef",
"type": "int"
},
{
"dest": "j_lt_dim3.init",
"op": "undef",
"type": "bool"
},
{
"dest": "j.init",
"op": "undef",
"type": "int"
},
{
"dest": "index.init",
"op": "undef",
"type": "int"
},
{
"dest": "i_lt_dim1.init",
"op": "undef",
"type": "bool"
},
{
"dest": "dp_bit.init",
"op": "undef",
"type": "int"
},
{
"dest": "dot_product_odd.init",
"op": "undef",
"type": "bool"
},
{
"dest": "dot_product.init",
"op": "undef",
"type": "int"
},
{
"dest": "b_bit.init",
"op": "undef",
"type": "int"
},
{
"dest": "a_bit_b_bit.init",
"op": "undef",
"type": "int"
},
{
"dest": "a_bit.init",
"op": "undef",
"type": "int"
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"dest": "i.0",
"op": "const",
"type": "int",
"value": -1
},
{
"dest": "dot_product.2",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"dot_product.2"
],
"dest": "output.1",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.init"
],
"dest": "k_lt_dim2.0",
"op": "id",
"type": "bool"
},
{
"args": [
"k.init"
],
"dest": "k.0",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.init"
],
"dest": "j_lt_dim3.0",
"op": "id",
"type": "bool"
},
{
"args": [
"j.init"
],
"dest": "j.0",
"op": "id",
"type": "int"
},
{
"args": [
"index.init"
],
"dest": "index.0",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_dim1.init"
],
"dest": "i_lt_dim1.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.init"
],
"dest": "dp_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.init"
],
"dest": "dot_product_odd.0",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.init"
],
"dest": "dot_product.0",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.init"
],
"dest": "b_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.init"
],
"dest": "a_bit_b_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.init"
],
"dest": "a_bit.0",
"op": "id",
"type": "int"
},
{
"labels": [
"row_loop"
],
"op": "jmp"
},
{
"label": "row_loop"
},
{
"dest": "i.0",
"op": "const",
"type": "int",
"value": -1
},
{
"args": [
"i.1",
"one.0"
],
"dest": "i.2",
"op": "add",
"type": "int"
},
{
"args": [
"i.2",
"dim1"
],
"dest": "i_lt_dim1.1",
"op": "lt",
"type": "bool"
},
{
"args": [
"output.1"
],
"dest": "output.2",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.0"
],
"dest": "k_lt_dim2.1",
"op": "id",
"type": "bool"
},
{
"args": [
"k.0"
],
"dest": "k.1",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.0"
],
"dest": "j_lt_dim3.1",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "j.2",
"op": "id",
"type": "int"
},
{
"args": [
"index.0"
],
"dest": "index.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.0"
],
"dest": "dp_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.0"
],
"dest": "dot_product_odd.1",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.0"
],
"dest": "dot_product.1",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.0"
],
"dest": "b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.0"
],
"dest": "a_bit_b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.0"
],
"dest": "a_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_dim1.1"
],
"labels": [
"col_loop",
"return"
],
"op": "br"
},
{
"label": "col_loop"
},
{
"dest": "i.0",
"op": "const",
"type": "int",
"value": -1
},
{
"args": [
"j.2",
"one.0"
],
"dest": "j.3",
"op": "add",
"type": "int"
},
{
"dest": "dot_product.2",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"j.3",
"dim3"
],
"dest": "j_lt_dim3.2",
"op": "lt",
"type": "bool"
},
{
"args": [
"output.2"
],
"dest": "output.1",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.1"
],
"dest": "k_lt_dim2.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "k.0",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.2"
],
"dest": "j_lt_dim3.0",
"op": "id",
"type": "bool"
},
{
"args": [
"j.3"
],
"dest": "j.0",
"op": "id",
"type": "int"
},
{
"args": [
"index.1"
],
"dest": "index.0",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_dim1.1"
],
"dest": "i_lt_dim1.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.1"
],
"dest": "dp_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.1"
],
"dest": "dot_product_odd.0",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.2"
],
"dest": "dot_product.0",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.1"
],
"dest": "b_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.1"
],
"dest": "a_bit_b_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.1"
],
"dest": "a_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.1"
],
"dest": "k_lt_dim2.2",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product.2"
],
"dest": "dot_product.3",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.1"
],
"dest": "b_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.1"
],
"dest": "a_bit_b_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.1"
],
"dest": "a_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.2"
],
"labels": [
"inner_loop",
"row_loop"
],
"op": "br"
},
{
"label": "inner_loop"
},
{
"args": [
"i.1",
"one.0"
],
"dest": "i.2",
"op": "add",
"type": "int"
},
{
"args": [
"i.2",
"dim2"
],
"dest": "k_lt_dim2.3",
"op": "lt",
"type": "bool"
},
{
"args": [
"k_lt_dim2.3"
],
"labels": [
"multiply",
"end_col"
],
"op": "br"
},
{
"label": "multiply"
},
{
"args": [
"a",
"dim2",
"i.2",
"i.2"
],
"dest": "a_bit.3",
"funcs": [
"mat_bitsel"
],
"op": "call",
"type": "int"
},
{
"args": [
"b",
"dim3",
"i.2",
"j.3"
],
"dest": "b_bit.3",
"funcs": [
"mat_bitsel"
],
"op": "call",
"type": "int"
},
{
"args": [
"a_bit.3",
"b_bit.3"
],
"dest": "a_bit_b_bit.3",
"op": "mul",
"type": "int"
},
{
"args": [
"a_bit_b_bit.3",
"dot_product.3"
],
"dest": "dot_product.4",
"op": "add",
"type": "int"
},
{
"args": [
"k_lt_dim2.3"
],
"dest": "k_lt_dim2.2",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product.4"
],
"dest": "dot_product.3",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.3"
],
"dest": "b_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.3"
],
"dest": "a_bit_b_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.3"
],
"dest": "a_bit.2",
"op": "id",
"type": "int"
},
{
"labels": [
"inner_loop"
],
"op": "jmp"
},
{
"label": "end_col"
},
{
"args": [
"dot_product.3"
],
"dest": "dot_product_odd.2",
"funcs": [
"is_odd"
],
"op": "call",
"type": "bool"
},
{
"args": [
"output.2"
],
"dest": "output.2",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.3"
],
"dest": "k_lt_dim2.1",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "k.1",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.2"
],
"dest": "j_lt_dim3.1",
"op": "id",
"type": "bool"
},
{
"args": [
"j.3"
],
"dest": "j.2",
"op": "id",
"type": "int"
},
{
"args": [
"index.1"
],
"dest": "index.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.1"
],
"dest": "dp_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.2"
],
"dest": "dot_product_odd.1",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.3"
],
"dest": "dot_product.1",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.2"
],
"dest": "b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.2"
],
"dest": "a_bit_b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.2"
],
"dest": "a_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.2"
],
"labels": [
"add_dp",
"col_loop"
],
"op": "br"
},
{
"label": "add_dp"
},
{
"args": [
"i.2",
"j.3",
"dim3"
],
"dest": "index.2",
"funcs": [
"mat_packed_index"
],
"op": "call",
"type": "int"
},
{
"args": [
"index.2"
],
"dest": "dp_bit.2",
"funcs": [
"pow2"
],
"op": "call",
"type": "int"
},
{
"args": [
"dp_bit.2",
"output.2"
],
"dest": "output.3",
"op": "add",
"type": "int"
},
{
"args": [
"output.3"
],
"dest": "output.2",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.3"
],
"dest": "k_lt_dim2.1",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "k.1",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.2"
],
"dest": "j_lt_dim3.1",
"op": "id",
"type": "bool"
},
{
"args": [
"j.3"
],
"dest": "j.2",
"op": "id",
"type": "int"
},
{
"args": [
"index.2"
],
"dest": "index.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.2"
],
"dest": "dp_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.2"
],
"dest": "dot_product_odd.1",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.3"
],
"dest": "dot_product.1",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.2"
],
"dest": "b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.2"
],
"dest": "a_bit_b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.2"
],
"dest": "a_bit.1",
"op": "id",
"type": "int"
},
{
"labels": [
"col_loop"
],
"op": "jmp"
},
{
"label": "return"
},
{
"args": [
"output.1"
],
"op": "print"
},
{
"args": [],
"op": "ret"
}
],
"name": "main"
},
{
"args": [
{
"name": "m",
"type": "int"
},
{
"name": "cols",
"type": "int"
},
{
"name": "i",
"type": "int"
},
{
"name": "j",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"i",
"j",
"cols"
],
"dest": "index.0",
"funcs": [
"mat_packed_index"
],
"op": "call",
"type": "int"
},
{
"args": [
"m",
"index.0"
],
"dest": "ret_val.0",
"funcs": [
"bitsel"
],
"op": "call",
"type": "bool"
},
{
"args": [
"ret_val.0"
],
"labels": [
"ret_one",
"ret_zero"
],
"op": "br"
},
{
"label": "ret_one"
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"one.0"
],
"op": "ret"
},
{
"label": "ret_zero"
},
{
"dest": "zero.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"zero.0"
],
"op": "ret"
}
],
"name": "mat_bitsel",
"type": "int"
},
{
"args": [
{
"name": "i",
"type": "int"
},
{
"name": "j",
"type": "int"
},
{
"name": "cols",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"i",
"cols"
],
"dest": "index.0",
"op": "mul",
"type": "int"
},
{
"args": [
"index.0",
"j"
],
"dest": "index.1",
"op": "add",
"type": "int"
},
{
"args": [
"index.1"
],
"op": "ret"
}
],
"name": "mat_packed_index",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "i_lt_n.init",
"op": "undef",
"type": "bool"
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"dest": "two.0",
"op": "const",
"type": "int",
"value": 2
},
{
"dest": "i.0",
"op": "const",
"type": "int",
"value": 0
},
{
"dest": "result.0",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"result.0"
],
"dest": "result.1",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_n.init"
],
"dest": "i_lt_n.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "loop"
},
{
"args": [
"i.1",
"n"
],
"dest": "i_lt_n.1",
"op": "lt",
"type": "bool"
},
{
"args": [
"i_lt_n.1"
],
"labels": [
"multiply",
"return"
],
"op": "br"
},
{
"label": "multiply"
},
{
"args": [
"result.1",
"two.0"
],
"dest": "result.2",
"op": "mul",
"type": "int"
},
{
"args": [
"i.1",
"one.0"
],
"dest": "i.2",
"op": "add",
"type": "int"
},
{
"args": [
"result.2"
],
"dest": "result.1",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_n.1"
],
"dest": "i_lt_n.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "return"
},
{
"args": [
"result.1"
],
"op": "ret"
}
],
"name": "pow2",
"type": "int"
},
{
"args": [
{
"name": "m",
"type": "int"
},
{
"name": "i",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "i_eq_zero.init",
"op": "undef",
"type": "bool"
},
{
"dest": "zero.0",
"op": "const",
"type": "int",
"value": 0
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"dest": "two.0",
"op": "const",
"type": "int",
"value": 2
},
{
"args": [
"m"
],
"dest": "m.0",
"op": "id",
"type": "int"
},
{
"args": [
"i_eq_zero.init"
],
"dest": "i_eq_zero.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "loop"
},
{
"args": [
"i.0",
"zero.0"
],
"dest": "i_eq_zero.1",
"op": "eq",
"type": "bool"
},
{
"args": [
"i_eq_zero.1"
],
"labels": [
"return",
"divide"
],
"op": "br"
},
{
"label": "divide"
},
{
"args": [
"m.0",
"two.0"
],
"dest": "m.1",
"op": "div",
"type": "int"
},
{
"args": [
"i.0",
"one.0"
],
"dest": "i.1",
"op": "sub",
"type": "int"
},
{
"args": [
"m.1"
],
"dest": "m.0",
"op": "id",
"type": "int"
},
{
"args": [
"i_eq_zero.1"
],
"dest": "i_eq_zero.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.1"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "return"
},
{
"args": [
"m.0"
],
"dest": "m_bit.0",
"funcs": [
"is_odd"
],
"op": "call",
"type": "bool"
},
{
"args": [
"m_bit.0"
],
"op": "ret"
}
],
"name": "bitsel",
"type": "bool"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "zero.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"n",
"zero.0"
],
"dest": "is_neg.0",
"op": "lt",
"type": "bool"
},
{
"args": [
"n"
],
"dest": "n.1",
"op": "id",
"type": "int"
},
{
"args": [
"is_neg.0"
],
"labels": [
"negative",
"positive"
],
"op": "br"
},
{
"label": "negative"
},
{
"args": [
"zero.0",
"n"
],
"dest": "n.0",
"op": "sub",
"type": "int"
},
{
"args": [
"n.0"
],
"dest": "n.1",
"op": "id",
"type": "int"
},
{
"labels": [
"positive"
],
"op": "jmp"
},
{
"label": "positive"
},
{
"args": [
"n.1"
],
"op": "ret"
}
],
"name": "abs",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"n"
],
"dest": "n0.0",
"funcs": [
"abs"
],
"op": "call",
"type": "int"
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"dest": "two.0",
"op": "const",
"type": "int",
"value": 2
},
{
"args": [
"n0.0",
"one.0"
],
"dest": "np1.0",
"op": "add",
"type": "int"
},
{
"args": [
"n0.0",
"two.0"
],
"dest": "half.0",
"op": "div",
"type": "int"
},
{
"args": [
"np1.0",
"two.0"
],
"dest": "np1_half.0",
"op": "div",
"type": "int"
},
{
"args": [
"half.0",
"np1_half.0"
],
"dest": "ret_val.0",
"op": "eq",
"type": "bool"
},
{
"args": [
"ret_val.0"
],
"op": "ret"
}
],
"name": "is_even",
"type": "bool"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"n"
],
"dest": "is_even.0",
"funcs": [
"is_even"
],
"op": "call",
"type": "bool"
},
{
"args": [
"is_even.0"
],
"dest": "ret_val.0",
"op": "not",
"type": "bool"
},
{
"args": [
"ret_val.0"
],
"op": "ret"
}
],
"name": "is_odd",
"type": "bool"
}
]
}
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py
main
{
"functions": [
{
"args": [
{
"name": "a",
"type": "int"
},
{
"name": "b",
"type": "int"
},
{
"name": "dim1",
"type": "int"
},
{
"name": "dim2",
"type": "int"
},
{
"name": "dim3",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "k_lt_dim2.init",
"op": "undef",
"type": "bool"
},
{
"dest": "k.init",
"op": "undef",
"type": "int"
},
{
"dest": "j_lt_dim3.init",
"op": "undef",
"type": "bool"
},
{
"dest": "j.init",
"op": "undef",
"type": "int"
},
{
"dest": "index.init",
"op": "undef",
"type": "int"
},
{
"dest": "i_lt_dim1.init",
"op": "undef",
"type": "bool"
},
{
"dest": "dp_bit.init",
"op": "undef",
"type": "int"
},
{
"dest": "dot_product_odd.init",
"op": "undef",
"type": "bool"
},
{
"dest": "dot_product.init",
"op": "undef",
"type": "int"
},
{
"dest": "b_bit.init",
"op": "undef",
"type": "int"
},
{
"dest": "a_bit_b_bit.init",
"op": "undef",
"type": "int"
},
{
"dest": "a_bit.init",
"op": "undef",
"type": "int"
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"dest": "i.0",
"op": "const",
"type": "int",
"value": -1
},
{
"dest": "dot_product.2",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"dot_product.2"
],
"dest": "output.1",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.init"
],
"dest": "k_lt_dim2.0",
"op": "id",
"type": "bool"
},
{
"args": [
"k.init"
],
"dest": "k.0",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.init"
],
"dest": "j_lt_dim3.0",
"op": "id",
"type": "bool"
},
{
"args": [
"j.init"
],
"dest": "j.0",
"op": "id",
"type": "int"
},
{
"args": [
"index.init"
],
"dest": "index.0",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_dim1.init"
],
"dest": "i_lt_dim1.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.init"
],
"dest": "dp_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.init"
],
"dest": "dot_product_odd.0",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.init"
],
"dest": "dot_product.0",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.init"
],
"dest": "b_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.init"
],
"dest": "a_bit_b_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.init"
],
"dest": "a_bit.0",
"op": "id",
"type": "int"
},
{
"labels": [
"row_loop"
],
"op": "jmp"
},
{
"label": "row_loop"
},
{
"dest": "i.0",
"op": "const",
"type": "int",
"value": -1
},
{
"args": [
"i.1",
"one.0"
],
"dest": "i.2",
"op": "add",
"type": "int"
},
{
"args": [
"i.2",
"dim1"
],
"dest": "i_lt_dim1.1",
"op": "lt",
"type": "bool"
},
{
"args": [
"output.1"
],
"dest": "output.2",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.0"
],
"dest": "k_lt_dim2.1",
"op": "id",
"type": "bool"
},
{
"args": [
"k.0"
],
"dest": "k.1",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.0"
],
"dest": "j_lt_dim3.1",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "j.2",
"op": "id",
"type": "int"
},
{
"args": [
"index.0"
],
"dest": "index.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.0"
],
"dest": "dp_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.0"
],
"dest": "dot_product_odd.1",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.0"
],
"dest": "dot_product.1",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.0"
],
"dest": "b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.0"
],
"dest": "a_bit_b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.0"
],
"dest": "a_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_dim1.1"
],
"labels": [
"col_loop",
"return"
],
"op": "br"
},
{
"label": "col_loop"
},
{
"dest": "i.0",
"op": "const",
"type": "int",
"value": -1
},
{
"args": [
"j.2",
"one.0"
],
"dest": "j.3",
"op": "add",
"type": "int"
},
{
"dest": "dot_product.2",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"j.3",
"dim3"
],
"dest": "j_lt_dim3.2",
"op": "lt",
"type": "bool"
},
{
"args": [
"output.2"
],
"dest": "output.1",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.1"
],
"dest": "k_lt_dim2.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "k.0",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.2"
],
"dest": "j_lt_dim3.0",
"op": "id",
"type": "bool"
},
{
"args": [
"j.3"
],
"dest": "j.0",
"op": "id",
"type": "int"
},
{
"args": [
"index.1"
],
"dest": "index.0",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_dim1.1"
],
"dest": "i_lt_dim1.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.1"
],
"dest": "dp_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.1"
],
"dest": "dot_product_odd.0",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.2"
],
"dest": "dot_product.0",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.1"
],
"dest": "b_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.1"
],
"dest": "a_bit_b_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.1"
],
"dest": "a_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.1"
],
"dest": "k_lt_dim2.2",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product.2"
],
"dest": "dot_product.3",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.1"
],
"dest": "b_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.1"
],
"dest": "a_bit_b_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.1"
],
"dest": "a_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.2"
],
"labels": [
"inner_loop",
"row_loop"
],
"op": "br"
},
{
"label": "inner_loop"
},
{
"args": [
"i.1",
"one.0"
],
"dest": "i.2",
"op": "add",
"type": "int"
},
{
"args": [
"i.2",
"dim2"
],
"dest": "k_lt_dim2.3",
"op": "lt",
"type": "bool"
},
{
"args": [
"k_lt_dim2.3"
],
"labels": [
"multiply",
"end_col"
],
"op": "br"
},
{
"label": "multiply"
},
{
"args": [
"a",
"dim2",
"i.2",
"i.2"
],
"dest": "a_bit.3",
"funcs": [
"mat_bitsel"
],
"op": "call",
"type": "int"
},
{
"args": [
"b",
"dim3",
"i.2",
"j.3"
],
"dest": "b_bit.3",
"funcs": [
"mat_bitsel"
],
"op": "call",
"type": "int"
},
{
"args": [
"a_bit.3",
"b_bit.3"
],
"dest": "a_bit_b_bit.3",
"op": "mul",
"type": "int"
},
{
"args": [
"a_bit_b_bit.3",
"dot_product.3"
],
"dest": "dot_product.4",
"op": "add",
"type": "int"
},
{
"args": [
"k_lt_dim2.3"
],
"dest": "k_lt_dim2.2",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product.4"
],
"dest": "dot_product.3",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.3"
],
"dest": "b_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.3"
],
"dest": "a_bit_b_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.3"
],
"dest": "a_bit.2",
"op": "id",
"type": "int"
},
{
"labels": [
"inner_loop"
],
"op": "jmp"
},
{
"label": "end_col"
},
{
"args": [
"dot_product.3"
],
"dest": "dot_product_odd.2",
"funcs": [
"is_odd"
],
"op": "call",
"type": "bool"
},
{
"args": [
"output.2"
],
"dest": "output.2",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.3"
],
"dest": "k_lt_dim2.1",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "k.1",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.2"
],
"dest": "j_lt_dim3.1",
"op": "id",
"type": "bool"
},
{
"args": [
"j.3"
],
"dest": "j.2",
"op": "id",
"type": "int"
},
{
"args": [
"index.1"
],
"dest": "index.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.1"
],
"dest": "dp_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.2"
],
"dest": "dot_product_odd.1",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.3"
],
"dest": "dot_product.1",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.2"
],
"dest": "b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.2"
],
"dest": "a_bit_b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.2"
],
"dest": "a_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.2"
],
"labels": [
"add_dp",
"col_loop"
],
"op": "br"
},
{
"label": "add_dp"
},
{
"args": [
"i.2",
"j.3",
"dim3"
],
"dest": "index.2",
"funcs": [
"mat_packed_index"
],
"op": "call",
"type": "int"
},
{
"args": [
"index.2"
],
"dest": "dp_bit.2",
"funcs": [
"pow2"
],
"op": "call",
"type": "int"
},
{
"args": [
"dp_bit.2",
"output.2"
],
"dest": "output.3",
"op": "add",
"type": "int"
},
{
"args": [
"output.3"
],
"dest": "output.2",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.3"
],
"dest": "k_lt_dim2.1",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "k.1",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.2"
],
"dest": "j_lt_dim3.1",
"op": "id",
"type": "bool"
},
{
"args": [
"j.3"
],
"dest": "j.2",
"op": "id",
"type": "int"
},
{
"args": [
"index.2"
],
"dest": "index.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.2"
],
"dest": "dp_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.2"
],
"dest": "dot_product_odd.1",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.3"
],
"dest": "dot_product.1",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.2"
],
"dest": "b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.2"
],
"dest": "a_bit_b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.2"
],
"dest": "a_bit.1",
"op": "id",
"type": "int"
},
{
"labels": [
"col_loop"
],
"op": "jmp"
},
{
"label": "return"
},
{
"args": [
"output.1"
],
"op": "print"
},
{
"args": [],
"op": "ret"
}
],
"name": "main"
},
{
"args": [
{
"name": "m",
"type": "int"
},
{
"name": "cols",
"type": "int"
},
{
"name": "i",
"type": "int"
},
{
"name": "j",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"i",
"j",
"cols"
],
"dest": "index.0",
"funcs": [
"mat_packed_index"
],
"op": "call",
"type": "int"
},
{
"args": [
"m",
"index.0"
],
"dest": "ret_val.0",
"funcs": [
"bitsel"
],
"op": "call",
"type": "bool"
},
{
"args": [
"ret_val.0"
],
"labels": [
"ret_one",
"ret_zero"
],
"op": "br"
},
{
"label": "ret_one"
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"one.0"
],
"op": "ret"
},
{
"label": "ret_zero"
},
{
"dest": "zero.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"zero.0"
],
"op": "ret"
}
],
"name": "mat_bitsel",
"type": "int"
},
{
"args": [
{
"name": "i",
"type": "int"
},
{
"name": "j",
"type": "int"
},
{
"name": "cols",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"i",
"cols"
],
"dest": "index.0",
"op": "mul",
"type": "int"
},
{
"args": [
"index.0",
"j"
],
"dest": "index.1",
"op": "add",
"type": "int"
},
{
"args": [
"index.1"
],
"op": "ret"
}
],
"name": "mat_packed_index",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "i_lt_n.init",
"op": "undef",
"type": "bool"
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"dest": "two.0",
"op": "const",
"type": "int",
"value": 2
},
{
"dest": "i.0",
"op": "const",
"type": "int",
"value": 0
},
{
"dest": "result.0",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"result.0"
],
"dest": "result.1",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_n.init"
],
"dest": "i_lt_n.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "loop"
},
{
"args": [
"i.1",
"n"
],
"dest": "i_lt_n.1",
"op": "lt",
"type": "bool"
},
{
"args": [
"i_lt_n.1"
],
"labels": [
"multiply",
"return"
],
"op": "br"
},
{
"label": "multiply"
},
{
"args": [
"result.1",
"two.0"
],
"dest": "result.2",
"op": "mul",
"type": "int"
},
{
"args": [
"i.1",
"one.0"
],
"dest": "i.2",
"op": "add",
"type": "int"
},
{
"args": [
"result.2"
],
"dest": "result.1",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_n.1"
],
"dest": "i_lt_n.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "return"
},
{
"args": [
"result.1"
],
"op": "ret"
}
],
"name": "pow2",
"type": "int"
},
{
"args": [
{
"name": "m",
"type": "int"
},
{
"name": "i",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "i_eq_zero.init",
"op": "undef",
"type": "bool"
},
{
"dest": "zero.0",
"op": "const",
"type": "int",
"value": 0
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"dest": "two.0",
"op": "const",
"type": "int",
"value": 2
},
{
"args": [
"m"
],
"dest": "m.0",
"op": "id",
"type": "int"
},
{
"args": [
"i_eq_zero.init"
],
"dest": "i_eq_zero.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "loop"
},
{
"args": [
"i.0",
"zero.0"
],
"dest": "i_eq_zero.1",
"op": "eq",
"type": "bool"
},
{
"args": [
"i_eq_zero.1"
],
"labels": [
"return",
"divide"
],
"op": "br"
},
{
"label": "divide"
},
{
"args": [
"m.0",
"two.0"
],
"dest": "m.1",
"op": "div",
"type": "int"
},
{
"args": [
"i.0",
"one.0"
],
"dest": "i.1",
"op": "sub",
"type": "int"
},
{
"args": [
"m.1"
],
"dest": "m.0",
"op": "id",
"type": "int"
},
{
"args": [
"i_eq_zero.1"
],
"dest": "i_eq_zero.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.1"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "return"
},
{
"args": [
"m.0"
],
"dest": "m_bit.0",
"funcs": [
"is_odd"
],
"op": "call",
"type": "bool"
},
{
"args": [
"m_bit.0"
],
"op": "ret"
}
],
"name": "bitsel",
"type": "bool"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "zero.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"n",
"zero.0"
],
"dest": "is_neg.0",
"op": "lt",
"type": "bool"
},
{
"args": [
"n"
],
"dest": "n.1",
"op": "id",
"type": "int"
},
{
"args": [
"is_neg.0"
],
"labels": [
"negative",
"positive"
],
"op": "br"
},
{
"label": "negative"
},
{
"args": [
"zero.0",
"n"
],
"dest": "n.0",
"op": "sub",
"type": "int"
},
{
"args": [
"n.0"
],
"dest": "n.1",
"op": "id",
"type": "int"
},
{
"labels": [
"positive"
],
"op": "jmp"
},
{
"label": "positive"
},
{
"args": [
"n.1"
],
"op": "ret"
}
],
"name": "abs",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"n"
],
"dest": "n0.0",
"funcs": [
"abs"
],
"op": "call",
"type": "int"
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"dest": "two.0",
"op": "const",
"type": "int",
"value": 2
},
{
"args": [
"n0.0",
"one.0"
],
"dest": "np1.0",
"op": "add",
"type": "int"
},
{
"args": [
"n0.0",
"two.0"
],
"dest": "half.0",
"op": "div",
"type": "int"
},
{
"args": [
"np1.0",
"two.0"
],
"dest": "np1_half.0",
"op": "div",
"type": "int"
},
{
"args": [
"half.0",
"np1_half.0"
],
"dest": "ret_val.0",
"op": "eq",
"type": "bool"
},
{
"args": [
"ret_val.0"
],
"op": "ret"
}
],
"name": "is_even",
"type": "bool"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"n"
],
"dest": "is_even.0",
"funcs": [
"is_even"
],
"op": "call",
"type": "bool"
},
{
"args": [
"is_even.0"
],
"dest": "ret_val.0",
"op": "not",
"type": "bool"
},
{
"args": [
"ret_val.0"
],
"op": "ret"
}
],
"name": "is_odd",
"type": "bool"
}
]
}
resest
Command 'resest' not found, did you mean:
command 'reset' from deb ncurses-bin (6.2-0ubuntu2.1)
Try: sudo apt install <deb name>
reset
c104>
resesbril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py
main
{'dest': 'one.0', 'op': 'const', 'type': 'int', 'value': 1}
one.0
{'dest': 'i.0', 'op': 'const', 'type': 'int', 'value': -1}
i.0
{'dest': 'output.0', 'op': 'const', 'type': 'int', 'value': 0}
dot_product.2
{'op': 'phi', 'dest': 'output.1', 'type': 'int', 'args': ['output.0', 'output.2', 'b1', 'col_loop']}
output.1
{'op': 'phi', 'dest': 'k_lt_dim2.0', 'type': 'bool', 'args': ['k_lt_dim2.init', 'k_lt_dim2.1', 'b1', 'col_loop']}
k_lt_dim2.0
{'op': 'phi', 'dest': 'k.0', 'type': 'int', 'args': ['k.init', 'k.2', 'b1', 'col_loop']}
k.0
{'op': 'phi', 'dest': 'j_lt_dim3.0', 'type': 'bool', 'args': ['j_lt_dim3.init', 'j_lt_dim3.2', 'b1', 'col_loop']}
j_lt_dim3.0
{'op': 'phi', 'dest': 'j.0', 'type': 'int', 'args': ['j.init', 'j.3', 'b1', 'col_loop']}
j.0
{'op': 'phi', 'dest': 'index.0', 'type': 'int', 'args': ['index.init', 'index.1', 'b1', 'col_loop']}
index.0
{'op': 'phi', 'dest': 'i_lt_dim1.0', 'type': 'bool', 'args': ['i_lt_dim1.init', 'i_lt_dim1.1', 'b1', 'col_loop']}
i_lt_dim1.0
{'op': 'phi', 'dest': 'i.1', 'type': 'int', 'args': ['i.0', 'i.2', 'b1', 'col_loop']}
i.1
{'op': 'phi', 'dest': 'dp_bit.0', 'type': 'int', 'args': ['dp_bit.init', 'dp_bit.1', 'b1', 'col_loop']}
dp_bit.0
{'op': 'phi', 'dest': 'dot_product_odd.0', 'type': 'bool', 'args': ['dot_product_odd.init', 'dot_product_odd.1', 'b1', 'col_loop']}
dot_product_odd.0
{'op': 'phi', 'dest': 'dot_product.0', 'type': 'int', 'args': ['dot_product.init', 'dot_product.2', 'b1', 'col_loop']}
dot_product.0
{'op': 'phi', 'dest': 'b_bit.0', 'type': 'int', 'args': ['b_bit.init', 'b_bit.1', 'b1', 'col_loop']}
b_bit.0
{'op': 'phi', 'dest': 'a_bit_b_bit.0', 'type': 'int', 'args': ['a_bit_b_bit.init', 'a_bit_b_bit.1', 'b1', 'col_loop']}
a_bit_b_bit.0
{'op': 'phi', 'dest': 'a_bit.0', 'type': 'int', 'args': ['a_bit.init', 'a_bit.1', 'b1', 'col_loop']}
a_bit.0
{'dest': 'j.1', 'op': 'const', 'type': 'int', 'value': -1}
i.0
{'args': ['i.1', 'one.0'], 'dest': 'i.2', 'op': 'add', 'type': 'int'}
i.2
{'args': ['i.2', 'dim1'], 'dest': 'i_lt_dim1.1', 'op': 'lt', 'type': 'bool'}
i_lt_dim1.1
{'op': 'phi', 'dest': 'output.2', 'type': 'int', 'args': ['output.3', 'output.2', 'output.1', 'add_dp', 'end_col', 'row_loop']}
output.2
{'op': 'phi', 'dest': 'k_lt_dim2.1', 'type': 'bool', 'args': ['k_lt_dim2.3', 'k_lt_dim2.3', 'k_lt_dim2.0', 'add_dp', 'end_col', 'row_loop']}
k_lt_dim2.1
{'op': 'phi', 'dest': 'k.1', 'type': 'int', 'args': ['k.4', 'k.4', 'k.0', 'add_dp', 'end_col', 'row_loop']}
k.1
{'op': 'phi', 'dest': 'j_lt_dim3.1', 'type': 'bool', 'args': ['j_lt_dim3.2', 'j_lt_dim3.2', 'j_lt_dim3.0', 'add_dp', 'end_col', 'row_loop']}
j_lt_dim3.1
{'op': 'phi', 'dest': 'j.2', 'type': 'int', 'args': ['j.3', 'j.3', 'j.1', 'add_dp', 'end_col', 'row_loop']}
j.2
{'op': 'phi', 'dest': 'index.1', 'type': 'int', 'args': ['index.2', 'index.1', 'index.0', 'add_dp', 'end_col', 'row_loop']}
index.1
{'op': 'phi', 'dest': 'dp_bit.1', 'type': 'int', 'args': ['dp_bit.2', 'dp_bit.1', 'dp_bit.0', 'add_dp', 'end_col', 'row_loop']}
dp_bit.1
{'op': 'phi', 'dest': 'dot_product_odd.1', 'type': 'bool', 'args': ['dot_product_odd.2', 'dot_product_odd.2', 'dot_product_odd.0', 'add_dp', 'end_col', 'row_loop']}
dot_product_odd.1
{'op': 'phi', 'dest': 'dot_product.1', 'type': 'int', 'args': ['dot_product.3', 'dot_product.3', 'dot_product.0', 'add_dp', 'end_col', 'row_loop']}
dot_product.1
{'op': 'phi', 'dest': 'b_bit.1', 'type': 'int', 'args': ['b_bit.2', 'b_bit.2', 'b_bit.0', 'add_dp', 'end_col', 'row_loop']}
b_bit.1
{'op': 'phi', 'dest': 'a_bit_b_bit.1', 'type': 'int', 'args': ['a_bit_b_bit.2', 'a_bit_b_bit.2', 'a_bit_b_bit.0', 'add_dp', 'end_col', 'row_loop']}
a_bit_b_bit.1
{'op': 'phi', 'dest': 'a_bit.1', 'type': 'int', 'args': ['a_bit.2', 'a_bit.2', 'a_bit.0', 'add_dp', 'end_col', 'row_loop']}
a_bit.1
{'dest': 'k.2', 'op': 'const', 'type': 'int', 'value': -1}
i.0
{'args': ['j.2', 'one.0'], 'dest': 'j.3', 'op': 'add', 'type': 'int'}
j.3
{'dest': 'dot_product.2', 'op': 'const', 'type': 'int', 'value': 0}
dot_product.2
{'args': ['j.3', 'dim3'], 'dest': 'j_lt_dim3.2', 'op': 'lt', 'type': 'bool'}
j_lt_dim3.2
{'op': 'phi', 'dest': 'k_lt_dim2.2', 'type': 'bool', 'args': ['k_lt_dim2.1', 'k_lt_dim2.3', 'col_loop', 'multiply']}
k_lt_dim2.2
{'op': 'phi', 'dest': 'k.3', 'type': 'int', 'args': ['k.2', 'k.4', 'col_loop', 'multiply']}
i.1
{'op': 'phi', 'dest': 'dot_product.3', 'type': 'int', 'args': ['dot_product.2', 'dot_product.4', 'col_loop', 'multiply']}
dot_product.3
{'op': 'phi', 'dest': 'b_bit.2', 'type': 'int', 'args': ['b_bit.1', 'b_bit.3', 'col_loop', 'multiply']}
b_bit.2
{'op': 'phi', 'dest': 'a_bit_b_bit.2', 'type': 'int', 'args': ['a_bit_b_bit.1', 'a_bit_b_bit.3', 'col_loop', 'multiply']}
a_bit_b_bit.2
{'op': 'phi', 'dest': 'a_bit.2', 'type': 'int', 'args': ['a_bit.1', 'a_bit.3', 'col_loop', 'multiply']}
a_bit.2
{'args': ['k.3', 'one.0'], 'dest': 'k.4', 'op': 'add', 'type': 'int'}
i.2
{'args': ['k.4', 'dim2'], 'dest': 'k_lt_dim2.3', 'op': 'lt', 'type': 'bool'}
k_lt_dim2.3
{'args': ['a', 'dim2', 'i.2', 'k.4'], 'dest': 'a_bit.3', 'funcs': ['mat_bitsel'], 'op': 'call', 'type': 'int'}
a_bit.3
{'args': ['b', 'dim3', 'k.4', 'j.3'], 'dest': 'b_bit.3', 'funcs': ['mat_bitsel'], 'op': 'call', 'type': 'int'}
b_bit.3
{'args': ['a_bit.3', 'b_bit.3'], 'dest': 'a_bit_b_bit.3', 'op': 'mul', 'type': 'int'}
a_bit_b_bit.3
{'args': ['a_bit_b_bit.3', 'dot_product.3'], 'dest': 'dot_product.4', 'op': 'add', 'type': 'int'}
dot_product.4
{'args': ['dot_product.3'], 'dest': 'dot_product_odd.2', 'funcs': ['is_odd'], 'op': 'call', 'type': 'bool'}
dot_product_odd.2
{'args': ['i.2', 'j.3', 'dim3'], 'dest': 'index.2', 'funcs': ['mat_packed_index'], 'op': 'call', 'type': 'int'}
index.2
{'args': ['index.2'], 'dest': 'dp_bit.2', 'funcs': ['pow2'], 'op': 'call', 'type': 'int'}
dp_bit.2
{'args': ['dp_bit.2', 'output.2'], 'dest': 'output.3', 'op': 'add', 'type': 'int'}
output.3
Congruence classes for function main:
Class arg_a: ['a']
Class arg_b: ['b']
Class arg_dim1: ['dim1']
Class arg_dim2: ['dim2']
Class arg_dim3: ['dim3']
Class const 1: ['one.0']
Class const -1: ['i.0', 'j.1', 'k.2']
Class const 0: ['dot_product.2', 'output.0']
Class phi: ['k.0']
Class add: ['dot_product.4']
Class lt: ['i_lt_dim1.1']
Class call mat_bitsel: ['a_bit.3']
Class mul: ['a_bit_b_bit.3']
Class call is_odd: ['dot_product_odd.2']
Class call mat_packed_index: ['index.2']
Class call pow2: ['dp_bit.2']
Class phi_0: ['dp_bit.1']
Class add_0: ['output.3']
Class phi_1: ['output.2']
Class phi_2: ['output.1']
Class phi_3: ['a_bit_b_bit.2']
Class add_1: ['j.3']
Class phi_4: ['a_bit_b_bit.0']
Class phi_3_0: ['dot_product.1']
Class phi_5: ['j_lt_dim3.1']
Class phi_4_0: ['index.1']
Class phi_4_1: ['index.0']
Class phi_3_0_0: ['a_bit_b_bit.1']
Class phi_5_0: ['dot_product_odd.1']
Class phi_3_1: ['k_lt_dim2.2']
Class phi_4_2: ['dot_product_odd.0']
Class phi_6: ['j.2']
Class phi_5_1: ['k.1']
Class phi_7: ['i.1', 'k.3']
Class add_1_0: ['i.2', 'k.4']
Class lt_0: ['j_lt_dim3.2']
Class phi_7_0: ['j.0']
Class call mat_bitsel_0: ['b_bit.3']
Class phi_3_2: ['b_bit.2']
Class phi_3_0_0_0: ['b_bit.1']
Class phi_4_3: ['b_bit.0']
Class phi_3_3: ['a_bit.2']
Class phi_3_0_0_1: ['a_bit.1']
Class phi_4_4: ['a_bit.0']
Class phi_8: ['j_lt_dim3.0']
Class phi_5_0_0: ['k_lt_dim2.1']
Class phi_9: ['i_lt_dim1.0']
Class phi_4_2_0: ['k_lt_dim2.0']
Class phi_10: ['dot_product.3']
Class phi_11: ['dp_bit.0']
Class phi_12: ['dot_product.0']
Class lt_1: ['k_lt_dim2.3']
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py
resesbril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3 2
error: Uncaught (in promise) SyntaxError: Unexpected token 'C', "Congruence"... is not valid JSON
const prog = JSON.parse(await readStdin()) as bril.Program;
^
at JSON.parse (<anonymous>)
at main (file:///home/nya1025/bril/brili.ts:1020:23)
at eventLoopTick (ext:core/01_core.js:177:7)
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3 2
error: undefined variable output.0
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3 2
error: Uncaught (in promise) SyntaxError: Unexpected token 'C', "Congruence"... is not valid JSON
const prog = JSON.parse(await readStdin()) as bril.Program;
^
at JSON.parse (<anonymous>)
at main (file:///home/nya1025/bril/brili.ts:1020:23)
at eventLoopTick (ext:core/01_core.js:177:7)
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3 2
188
total_dyn_inst: 4599
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3 2
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3 2
188
total_dyn_inst: 4599
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3
resesbril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3 2txi -p 2791 57 4 3
resesbril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3 2
sh cs6120/final/test_gvn.sh
benchmarks/core/ackermann.bril
benchmarks/core/armstrong.bril
benchmarks/core/bbs.bril
benchmarks/core/binary-fmt.bril
benchmarks/core/binpow.bril
benchmarks/core/bitshift.bril
benchmarks/core/bitwise-ops.bril
benchmarks/core/catalan.bril
benchmarks/core/check-primes.bril
benchmarks/core/collatz.bril
benchmarks/core/combination.bril
benchmarks/core/delannoy.bril
benchmarks/core/digital-root.bril
benchmarks/core/euclid.bril
benchmarks/core/fact.bril
benchmarks/core/factors.bril
benchmarks/core/fib_recursive.bril
benchmarks/core/fitsinside.bril
benchmarks/core/fizz-buzz.bril
benchmarks/core/gcd.bril
benchmarks/core/gebmm.bril
benchmarks/core/geometric-sum.bril
benchmarks/core/hamming.bril
benchmarks/core/hanoi.bril
benchmarks/core/is-decreasing.bril
benchmarks/core/karatsuba.bril
benchmarks/core/lcm.bril
benchmarks/core/loopfact.bril
benchmarks/core/mccarthy91.bril
benchmarks/core/mod_inv.bril
benchmarks/core/mod_pow.bril
benchmarks/core/montgomery.bril
benchmarks/core/orders.bril
benchmarks/core/palindrome.bril
benchmarks/core/pascals-row.bril
benchmarks/core/perfect.bril
benchmarks/core/permutation.bril
benchmarks/core/primes-between.bril
benchmarks/core/pythagorean_triple.bril
benchmarks/core/quadratic.bril
benchmarks/core/recfact.bril
benchmarks/core/rectangles-area-difference.bril
benchmarks/core/relative-primes.bril
benchmarks/core/reverse.bril
benchmarks/core/rot13.bril
benchmarks/core/sqrt_bin_search.bril
benchmarks/core/sum-bits.bril
benchmarks/core/sum-check.bril
benchmarks/core/sum-digits.bril
benchmarks/core/sum-divisors.bril
benchmarks/core/sum-sq-diff.bril
benchmarks/core/totient.bril
benchmarks/core/up-arrow.bril
git add .
git commit -m "works on all benchmarks"
[main 8b85f01] works on all benchmarks
3 files changed, 68 insertions(+), 10 deletions(-)
git push
Enter passphrase for key '/home/nya1025/.ssh/normal_id':
Enumerating objects: 15, done.
Counting objects:   6% (1/15)
Counting objects:  13% (2/15)
Counting objects:  20% (3/15)
Counting objects:  26% (4/15)
Counting objects:  33% (5/15)
Counting objects:  40% (6/15)
Counting objects:  46% (7/15)
Counting objects:  53% (8/15)
Counting objects:  60% (9/15)
Counting objects:  66% (10/15)
Counting objects:  73% (11/15)
Counting objects:  80% (12/15)
Counting objects:  86% (13/15)
Counting objects:  93% (14/15)
Counting objects: 100% (15/15)
Counting objects: 100% (15/15), done.
Delta compression using up to 16 threads
Compressing objects:  12% (1/8)
Compressing objects:  25% (2/8)
Compressing objects:  37% (3/8)
Compressing objects:  50% (4/8)
Compressing objects:  62% (5/8)
Compressing objects:  75% (6/8)
Compressing objects:  87% (7/8)
Compressing objects: 100% (8/8)
Compressing objects: 100% (8/8), done.
Writing objects:  12% (1/8)
Writing objects:  25% (2/8)
Writing objects:  37% (3/8)
Writing objects:  50% (4/8)
Writing objects:  62% (5/8)
Writing objects:  75% (6/8)
Writing objects:  87% (7/8)
Writing objects: 100% (8/8)
Writing objects: 100% (8/8), 1.41 KiB | 1.41 MiB/s, done.
Total 8 (delta 7), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas:   0% (0/7)
remote: Resolving deltas:  14% (1/7)
remote: Resolving deltas:  28% (2/7)
remote: Resolving deltas:  42% (3/7)
remote: Resolving deltas:  57% (4/7)
remote: Resolving deltas:  71% (5/7)
remote: Resolving deltas:  85% (6/7)
remote: Resolving deltas: 100% (7/7)
remote: Resolving deltas: 100% (7/7), completed with 7 local objects.
To github.com:aw578/bril.git
e0d2d8d..8b85f01  main -> main
git puscommit -m "works on all benchmarksadd sh cs6120/final/test_gvn.sh
cs6120/final/tests/aliases.bril
cs6120/final/tests/basic.bril
cs6120/final/tests/commute.bril
cs6120/final/tests/control.bril
cs6120/final/tests/cycles.bril
cs6120/final/tests/cycles_hard.bril
cs6120/final/tests/sensitivity.bril
cs6120/final/tests/transitive.bril
cs6120/final/tests/unrelated.bril
cd cs6120/ffinal/
turnt --diff tests/*.bril
1..9
--- tests/aliases.out2025-04-28 01:12:14.309674000 -0400
+++ /tmp/tmpx40dpm6z2025-04-28 04:01:57.376718472 -0400
@@ -1,4 +1,54 @@
-Congruence classes for function main:
-Class const 7: ['a.0']
-Class id: ['b.0', 'd.0']
-Class id_0: ['c.0', 'e.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "a.0",
+          "op": "const",
+          "type": "int",
+          "value": 7
+        },
+        {
+          "args": [
+            "a.0"
+          ],
+          "dest": "b.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "b.0"
+          ],
+          "dest": "c.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "a.0"
+          ],
+          "dest": "d.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "b.0"
+          ],
+          "dest": "e.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 1 - tests/aliases.bril # differing: tests/aliases.out
--- tests/basic.out2025-04-28 00:44:49.750148752 -0400
+++ /tmp/tmp90944n302025-04-28 04:01:57.476718445 -0400
@@ -1,3 +1,46 @@
-Congruence classes for function main:
-Class const 1: ['v1.0', 'v2.0']
-Class add: ['v3.0', 'v4.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "v1.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "v2.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "args": [
+            "v1.0",
+            "v2.0"
+          ],
+          "dest": "v3.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "v1.0",
+            "v2.0"
+          ],
+          "dest": "v4.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 2 - tests/basic.bril # differing: tests/basic.out
--- tests/commute.out2025-04-28 00:44:49.840148728 -0400
+++ /tmp/tmpa2yhuorp2025-04-28 04:01:57.566718420 -0400
@@ -1,4 +1,46 @@
-Congruence classes for function main:
-Class const 1: ['x1.0']
-Class const 2: ['x2.0']
-Class add: ['t1.0', 't2.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "x1.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "x2.0",
+          "op": "const",
+          "type": "int",
+          "value": 2
+        },
+        {
+          "args": [
+            "x1.0",
+            "x2.0"
+          ],
+          "dest": "t1.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x1.0",
+            "x2.0"
+          ],
+          "dest": "t2.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 3 - tests/commute.bril # differing: tests/commute.out
--- tests/control.out2025-04-28 01:12:14.579673919 -0400
+++ /tmp/tmpaoaez3b32025-04-28 04:01:57.666718393 -0400
@@ -1,7 +1,134 @@
-Congruence classes for function main:
-Class const 1: ['a0.0']
-Class const 3: ['b0.0']
-Class const True: ['cond.0']
-Class add: ['x1.0', 'x2.0', 'y0.0']
-Class phi: ['x2.1']
-Class phi_0: ['x1.1']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "entry"
+        },
+        {
+          "dest": "x2.init",
+          "op": "undef",
+          "type": "int"
+        },
+        {
+          "dest": "x1.init",
+          "op": "undef",
+          "type": "int"
+        },
+        {
+          "dest": "a0.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "b0.0",
+          "op": "const",
+          "type": "int",
+          "value": 3
+        },
+        {
+          "dest": "cond.0",
+          "op": "const",
+          "type": "bool",
+          "value": true
+        },
+        {
+          "args": [
+            "cond.0"
+          ],
+          "labels": [
+            "block1",
+            "block2"
+          ],
+          "op": "br"
+        },
+        {
+          "label": "block1"
+        },
+        {
+          "args": [
+            "a0.0",
+            "b0.0"
+          ],
+          "dest": "x1.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x2.init"
+          ],
+          "dest": "x2.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x1.0"
+          ],
+          "dest": "x1.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "labels": [
+            "merge"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "block2"
+        },
+        {
+          "args": [
+            "a0.0",
+            "b0.0"
+          ],
+          "dest": "x2.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x2.0"
+          ],
+          "dest": "x2.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x1.init"
+          ],
+          "dest": "x1.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "labels": [
+            "merge"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "merge"
+        },
+        {
+          "args": [
+            "a0.0",
+            "b0.0"
+          ],
+          "dest": "y0.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 4 - tests/control.bril # differing: tests/control.out
--- tests/cycles.out2025-04-28 01:12:14.669673892 -0400
+++ /tmp/tmphom43sp12025-04-28 04:01:57.766718364 -0400
@@ -1,13 +1,175 @@
-Congruence classes for function main:
-Class const 0: ['a.0', 'y.0']
-Class const 1: ['one.0']
-Class const 10: ['ten.0']
-Class id: ['x.0']
-Class add: ['not_y.0']
-Class lt: ['not_c.0']
-Class phi: ['x.1']
-Class add_0: ['y.2']
-Class id_0: ['x.2']
-Class lt_0: ['c.1']
-Class phi_0: ['y.1']
-Class phi_1: ['c.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "c.init",
+          "op": "undef",
+          "type": "bool"
+        },
+        {
+          "dest": "a.0",
+          "op": "const",
+          "type": "int",
+          "value": 0
+        },
+        {
+          "dest": "one.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "ten.0",
+          "op": "const",
+          "type": "int",
+          "value": 10
+        },
+        {
+          "args": [
+            "a.0"
+          ],
+          "dest": "x.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "dest": "y.0",
+          "op": "const",
+          "type": "int",
+          "value": 0
+        },
+        {
+          "args": [
+            "one.0",
+            "x.0"
+          ],
+          "dest": "not_y.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "y.0",
+            "ten.0"
+          ],
+          "dest": "not_c.0",
+          "op": "lt",
+          "type": "bool"
+        },
+        {
+          "args": [
+            "y.0"
+          ],
+          "dest": "y.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x.0"
+          ],
+          "dest": "x.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "c.init"
+          ],
+          "dest": "c.0",
+          "op": "id",
+          "type": "bool"
+        },
+        {
+          "labels": [
+            "loop"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "loop"
+        },
+        {
+          "args": [
+            "one.0",
+            "x.1"
+          ],
+          "dest": "y.2",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "y.2",
+            "ten.0"
+          ],
+          "dest": "c.1",
+          "op": "lt",
+          "type": "bool"
+        },
+        {
+          "args": [
+            "c.1"
+          ],
+          "labels": [
+            "then",
+            "end"
+          ],
+          "op": "br"
+        },
+        {
+          "label": "then"
+        },
+        {
+          "args": [
+            "y.2"
+          ],
+          "dest": "x.2",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "y.2"
+          ],
+          "dest": "y.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x.2"
+          ],
+          "dest": "x.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "c.1"
+          ],
+          "dest": "c.0",
+          "op": "id",
+          "type": "bool"
+        },
+        {
+          "labels": [
+            "loop"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "end"
+        },
+        {
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 5 - tests/cycles.bril # differing: tests/cycles.out
--- tests/cycles_hard.out2025-04-28 01:12:14.769673862 -0400
+++ /tmp/tmp9nw14hvg2025-04-28 04:01:57.866718337 -0400
@@ -1,16 +1,224 @@
-Congruence classes for function main:
-Class const 0: ['a.0']
-Class const 1: ['one.0']
-Class const 2: ['two.0']
-Class const 10: ['ten.0']
-Class id: ['x.0', 'y.0']
-Class phi: ['x.1']
-Class add: ['p.1']
-Class lt: ['c.1']
-Class phi_0: ['c.0']
-Class id_0: ['x.2']
-Class phi_1: ['p.0']
-Class add_0: ['q.1']
-Class id_0_0: ['y.2']
-Class phi_1_0: ['q.0']
-Class phi_2: ['y.1']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "q.init",
+          "op": "undef",
+          "type": "int"
+        },
+        {
+          "dest": "p.init",
+          "op": "undef",
+          "type": "int"
+        },
+        {
+          "dest": "c.init",
+          "op": "undef",
+          "type": "bool"
+        },
+        {
+          "dest": "a.0",
+          "op": "const",
+          "type": "int",
+          "value": 0
+        },
+        {
+          "dest": "one.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "two.0",
+          "op": "const",
+          "type": "int",
+          "value": 2
+        },
+        {
+          "dest": "ten.0",
+          "op": "const",
+          "type": "int",
+          "value": 10
+        },
+        {
+          "args": [
+            "a.0"
+          ],
+          "dest": "x.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "a.0"
+          ],
+          "dest": "y.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "y.0"
+          ],
+          "dest": "y.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x.0"
+          ],
+          "dest": "x.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "q.init"
+          ],
+          "dest": "q.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "p.init"
+          ],
+          "dest": "p.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "c.init"
+          ],
+          "dest": "c.0",
+          "op": "id",
+          "type": "bool"
+        },
+        {
+          "labels": [
+            "loop"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "loop"
+        },
+        {
+          "args": [
+            "one.0",
+            "x.1"
+          ],
+          "dest": "p.1",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "two.0",
+            "y.1"
+          ],
+          "dest": "q.1",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "p.1",
+            "ten.0"
+          ],
+          "dest": "c.1",
+          "op": "lt",
+          "type": "bool"
+        },
+        {
+          "args": [
+            "c.1"
+          ],
+          "labels": [
+            "then",
+            "end"
+          ],
+          "op": "br"
+        },
+        {
+          "label": "then"
+        },
+        {
+          "args": [
+            "p.1"
+          ],
+          "dest": "x.2",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "q.1"
+          ],
+          "dest": "y.2",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "y.2"
+          ],
+          "dest": "y.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x.2"
+          ],
+          "dest": "x.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "q.1"
+          ],
+          "dest": "q.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "p.1"
+          ],
+          "dest": "p.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "c.1"
+          ],
+          "dest": "c.0",
+          "op": "id",
+          "type": "bool"
+        },
+        {
+          "labels": [
+            "loop"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "end"
+        },
+        {
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 6 - tests/cycles_hard.bril # differing: tests/cycles_hard.out
--- tests/sensitivity.out2025-04-28 01:12:14.859673832 -0400
+++ /tmp/tmpn880jxcu2025-04-28 04:01:57.956718312 -0400
@@ -1,5 +1,46 @@
-Congruence classes for function main:
-Class const 1: ['x1.0']
-Class const 2: ['x2.0']
-Class sub: ['t3.0']
-Class sub_0: ['t4.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "x1.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "x2.0",
+          "op": "const",
+          "type": "int",
+          "value": 2
+        },
+        {
+          "args": [
+            "x1.0",
+            "x2.0"
+          ],
+          "dest": "t3.0",
+          "op": "sub",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x2.0",
+            "x1.0"
+          ],
+          "dest": "t4.0",
+          "op": "sub",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 7 - tests/sensitivity.bril # differing: tests/sensitivity.out
--- tests/transitive.out2025-04-28 01:12:14.949673801 -0400
+++ /tmp/tmp5hexbbiy2025-04-28 04:01:58.046718287 -0400
@@ -1,8 +1,94 @@
-Congruence classes for function main:
-Class const 0: ['x.0']
-Class const 1: ['y.0']
-Class const 2: ['z.0']
-Class const 3: ['w.0']
-Class add: ['a.0', 'b.0']
-Class add_0: ['f.0', 'g.0']
-Class add_0_0: ['d.0', 'e.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "x.0",
+          "op": "const",
+          "type": "int",
+          "value": 0
+        },
+        {
+          "dest": "y.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "z.0",
+          "op": "const",
+          "type": "int",
+          "value": 2
+        },
+        {
+          "dest": "w.0",
+          "op": "const",
+          "type": "int",
+          "value": 3
+        },
+        {
+          "args": [
+            "x.0",
+            "y.0"
+          ],
+          "dest": "a.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x.0",
+            "y.0"
+          ],
+          "dest": "b.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "a.0",
+            "z.0"
+          ],
+          "dest": "d.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "b.0",
+            "z.0"
+          ],
+          "dest": "e.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "d.0",
+            "w.0"
+          ],
+          "dest": "f.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "e.0",
+            "w.0"
+          ],
+          "dest": "g.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 8 - tests/transitive.bril # differing: tests/transitive.out
--- tests/unrelated.out2025-04-28 01:12:15.039673772 -0400
+++ /tmp/tmp9qiizh7j2025-04-28 04:01:58.146718260 -0400
@@ -1,6 +1,55 @@
-Congruence classes for function main:
-Class const 1: ['x1.0']
-Class const 2: ['x2.0']
-Class add: ['t1.0']
-Class add_0: ['t3.0']
-Class add_0_0: ['t4.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "x1.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "x2.0",
+          "op": "const",
+          "type": "int",
+          "value": 2
+        },
+        {
+          "args": [
+            "x1.0",
+            "x2.0"
+          ],
+          "dest": "t1.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "t1.0",
+            "x1.0"
+          ],
+          "dest": "t3.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "t1.0",
+            "x2.0"
+          ],
+          "dest": "t4.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 9 - tests/unrelated.bril # differing: tests/unrelated.out
turnt --diff tests/*.bril
1..9
--- tests/aliases.out2025-04-28 01:12:14.309674000 -0400
+++ /tmp/tmpg34f9qm_2025-04-28 04:02:29.056709607 -0400
@@ -1,4 +1,3 @@
Congruence classes for function main:
-Class const 7: ['a.0']
-Class id: ['b.0', 'd.0']
-Class id_0: ['c.0', 'e.0']
+Class const: ['const 7']
+Class id: ['id']
not ok 1 - tests/aliases.bril # differing: tests/aliases.out
--- tests/basic.out2025-04-28 00:44:49.750148752 -0400
+++ /tmp/tmpd1fhu0kg2025-04-28 04:02:29.146709582 -0400
@@ -1,3 +1,3 @@
Congruence classes for function main:
-Class const 1: ['v1.0', 'v2.0']
-Class add: ['v3.0', 'v4.0']
+Class const: ['const 1']
+Class add: ['add']
not ok 2 - tests/basic.bril # differing: tests/basic.out
--- tests/commute.out2025-04-28 00:44:49.840148728 -0400
+++ /tmp/tmpvn5z3qg12025-04-28 04:02:29.236709557 -0400
@@ -1,4 +1,3 @@
Congruence classes for function main:
-Class const 1: ['x1.0']
-Class const 2: ['x2.0']
-Class add: ['t1.0', 't2.0']
+Class const: ['const 1', 'const 2']
+Class add: ['add']
not ok 3 - tests/commute.bril # differing: tests/commute.out
--- tests/control.out2025-04-28 01:12:14.579673919 -0400
+++ /tmp/tmp22nyvdie2025-04-28 04:02:29.326709532 -0400
@@ -1,7 +1,4 @@
Congruence classes for function main:
-Class const 1: ['a0.0']
-Class const 3: ['b0.0']
-Class const True: ['cond.0']
-Class add: ['x1.0', 'x2.0', 'y0.0']
-Class phi: ['x2.1']
-Class phi_0: ['x1.1']
+Class const: ['const 1', 'const 3', 'const True']
+Class add: ['add']
+Class phi: ['phi_main']
not ok 4 - tests/control.bril # differing: tests/control.out
--- tests/cycles.out2025-04-28 01:12:14.669673892 -0400
+++ /tmp/tmp2irhxa0o2025-04-28 04:02:29.426709503 -0400
@@ -1,13 +1,6 @@
Congruence classes for function main:
-Class const 0: ['a.0', 'y.0']
-Class const 1: ['one.0']
-Class const 10: ['ten.0']
-Class id: ['x.0']
-Class add: ['not_y.0']
-Class lt: ['not_c.0']
-Class phi: ['x.1']
-Class add_0: ['y.2']
-Class id_0: ['x.2']
-Class lt_0: ['c.1']
-Class phi_0: ['y.1']
-Class phi_1: ['c.0']
+Class const: ['const 0', 'const 1', 'const 10']
+Class id: ['id']
+Class add: ['add']
+Class lt: ['lt']
+Class phi: ['phi_main']
not ok 5 - tests/cycles.bril # differing: tests/cycles.out
--- tests/cycles_hard.out2025-04-28 01:12:14.769673862 -0400
+++ /tmp/tmpx8bik86i2025-04-28 04:02:29.526709475 -0400
@@ -1,16 +1,6 @@
Congruence classes for function main:
-Class const 0: ['a.0']
-Class const 1: ['one.0']
-Class const 2: ['two.0']
-Class const 10: ['ten.0']
-Class id: ['x.0', 'y.0']
-Class phi: ['x.1']
-Class add: ['p.1']
-Class lt: ['c.1']
-Class phi_0: ['c.0']
-Class id_0: ['x.2']
-Class phi_1: ['p.0']
-Class add_0: ['q.1']
-Class id_0_0: ['y.2']
-Class phi_1_0: ['q.0']
-Class phi_2: ['y.1']
+Class const: ['const 0', 'const 1', 'const 10', 'const 2']
+Class id: ['id']
+Class phi: ['phi_main']
+Class add: ['add']
+Class lt: ['lt']
not ok 6 - tests/cycles_hard.bril # differing: tests/cycles_hard.out
--- tests/sensitivity.out2025-04-28 01:12:14.859673832 -0400
+++ /tmp/tmp4dt7kv992025-04-28 04:02:29.616709450 -0400
@@ -1,5 +1,3 @@
Congruence classes for function main:
-Class const 1: ['x1.0']
-Class const 2: ['x2.0']
-Class sub: ['t3.0']
-Class sub_0: ['t4.0']
+Class const: ['const 1', 'const 2']
+Class sub: ['sub']
not ok 7 - tests/sensitivity.bril # differing: tests/sensitivity.out
--- tests/transitive.out2025-04-28 01:12:14.949673801 -0400
+++ /tmp/tmpcc2u89sw2025-04-28 04:02:29.706709425 -0400
@@ -1,8 +1,3 @@
Congruence classes for function main:
-Class const 0: ['x.0']
-Class const 1: ['y.0']
-Class const 2: ['z.0']
-Class const 3: ['w.0']
-Class add: ['a.0', 'b.0']
-Class add_0: ['f.0', 'g.0']
-Class add_0_0: ['d.0', 'e.0']
+Class const: ['const 0', 'const 1', 'const 2', 'const 3']
+Class add: ['add']
not ok 8 - tests/transitive.bril # differing: tests/transitive.out
--- tests/unrelated.out2025-04-28 01:12:15.039673772 -0400
+++ /tmp/tmpoagsv1cp2025-04-28 04:02:29.816709394 -0400
@@ -1,6 +1,3 @@
Congruence classes for function main:
-Class const 1: ['x1.0']
-Class const 2: ['x2.0']
-Class add: ['t1.0']
-Class add_0: ['t3.0']
-Class add_0_0: ['t4.0']
+Class const: ['const 1', 'const 2']
+Class add: ['add']
not ok 9 - tests/unrelated.bril # differing: tests/unrelated.out
turnt --diff tests/*.briturnt --diff tests/*.bricd cs6120/finalsh cs6120/final/test_gvn.shgit puscommit -m "works on all benchmarksadd sh cs6120/final/test_gvn.shbril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3 l2txcs6cs6120/final/tests/aliases.brl
bash: cs6120/final/tests/aliases.brl: No such file or directory
python: can't open file 'cs6120/final/gvn.py': [Errno 2] No such file or directory
Traceback (most recent call last):
File "/home/nya1025/.local/bin/bril2txt", line 10, in <module>
sys.exit(bril2txt())
File "/home/nya1025/.local/share/uv/tools/briltxt/lib/python3.8/site-packages/briltxt.py", line 343, in bril2txt
print_prog(json.load(sys.stdin))
File "/usr/lib/python3.8/json/__init__.py", line 293, in load
return loads(fp.read(),
File "/usr/lib/python3.8/json/__init__.py", line 357, in loads
return _default_decoder.decode(s)
File "/usr/lib/python3.8/json/decoder.py", line 337, in decode
obj, end = self.raw_decode(s, idx=_w(s, 0).end())
File "/usr/lib/python3.8/json/decoder.py", line 355, in raw_decode
raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
cd ../..
cd ../.bril2json < cs6120/final/tests/aliases.brl | python cs6120/final/gvn.py | bril2txil
@main {
.b1:
a.0: int = const 7;
b.0: int = id a.0;
c.0: int = id b.0;
d.0: int = id a.0;
e.0: int = id b.0;
ret;
}
bril2json < cs6120/final/tests/aliases.bril | python cs6120/final/gvn.py | bril2tx
Congruence classes for function main:
Class const: ['const 7']
Class id: ['id']
bril2json < cs6120/final/tests/aliases.bril | python cs6120/final/gvn.py | bril2txbasic
Traceback (most recent call last):
File "/home/nya1025/.local/bin/bril2txt", line 10, in <module>
sys.exit(bril2txt())
File "/home/nya1025/.local/share/uv/tools/briltxt/lib/python3.8/site-packages/briltxt.py", line 343, in bril2txt
print_prog(json.load(sys.stdin))
File "/usr/lib/python3.8/json/__init__.py", line 293, in load
return loads(fp.read(),
File "/usr/lib/python3.8/json/__init__.py", line 357, in loads
return _default_decoder.decode(s)
File "/usr/lib/python3.8/json/decoder.py", line 337, in decode
obj, end = self.raw_decode(s, idx=_w(s, 0).end())
File "/usr/lib/python3.8/json/decoder.py", line 355, in raw_decode
raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
bril2json < cs6120/final/tests/basic.bril | python cs6120/final/gvn.py | bril2txt
@main {
.b1:
v1.0: int = const 1;
v2.0: int = const 1;
v3.0: int = add v1.0 v2.0;
v4.0: int = add v1.0 v2.0;
ret;
}
bril2json < cs6120/final/tests/basic.bril | python cs6120/final/gvn.py | bril2txaliases.bril | python cs6120/final/gvn.pbasic.bril | python cs6120/final/gvn.py | bril2txt
@main {
.b1:
v1.0: int = const 1;
v1.0: int = const 1;
v3.0: int = add v1.0 v1.0;
v3.0: int = add v1.0 v1.0;
ret;
}
bril2json < cs6120/final/tests/basic.bril | python cs6120/final/gvn.py | bril2txaliases.bril | python cs6120/final/gvn.py | bril2txt
cd ../.bril2json < cs6120/final/tests/aliases.bril | python cs6120/final/gvn.py | bril2txt
cd ../.bril2json < cs6120/final/tests/aliases.brl | python cs6120/final/gvn.py | bril2txt
turnt --diff tests/*.bril
Usage: turnt [OPTIONS] [FILE]...
Try 'turnt -h' for help.
Error: Invalid value for '[FILE]...': Path 'tests/*.bril' does not exist.
cd cs6120/turnt --diff tests/*.bricd cs6120/final/
cd cs6120/finalturnt --diff tests/*.bril
1..9
--- tests/aliases.out2025-04-28 01:12:14.309674000 -0400
+++ /tmp/tmp_x2igmgw2025-04-28 04:06:08.666640080 -0400
@@ -1,4 +1,54 @@
-Congruence classes for function main:
-Class const 7: ['a.0']
-Class id: ['b.0', 'd.0']
-Class id_0: ['c.0', 'e.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "a.0",
+          "op": "const",
+          "type": "int",
+          "value": 7
+        },
+        {
+          "args": [
+            "a.0"
+          ],
+          "dest": "b.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "b.0"
+          ],
+          "dest": "c.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "a.0"
+          ],
+          "dest": "b.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "b.0"
+          ],
+          "dest": "c.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 1 - tests/aliases.bril # differing: tests/aliases.out
--- tests/basic.out2025-04-28 00:44:49.750148752 -0400
+++ /tmp/tmpowq955go2025-04-28 04:06:08.756640046 -0400
@@ -1,3 +1,46 @@
-Congruence classes for function main:
-Class const 1: ['v1.0', 'v2.0']
-Class add: ['v3.0', 'v4.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "v1.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "v1.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "args": [
+            "v1.0",
+            "v1.0"
+          ],
+          "dest": "v3.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "v1.0",
+            "v1.0"
+          ],
+          "dest": "v3.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 2 - tests/basic.bril # differing: tests/basic.out
--- tests/commute.out2025-04-28 00:44:49.840148728 -0400
+++ /tmp/tmp2bx9fgw72025-04-28 04:06:08.866640005 -0400
@@ -1,4 +1,46 @@
-Congruence classes for function main:
-Class const 1: ['x1.0']
-Class const 2: ['x2.0']
-Class add: ['t1.0', 't2.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "x1.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "x2.0",
+          "op": "const",
+          "type": "int",
+          "value": 2
+        },
+        {
+          "args": [
+            "x1.0",
+            "x2.0"
+          ],
+          "dest": "t1.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x1.0",
+            "x2.0"
+          ],
+          "dest": "t1.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 3 - tests/commute.bril # differing: tests/commute.out
--- tests/control.out2025-04-28 01:12:14.579673919 -0400
+++ /tmp/tmpgmp1z3rw2025-04-28 04:06:08.956639970 -0400
@@ -1,7 +1,134 @@
-Congruence classes for function main:
-Class const 1: ['a0.0']
-Class const 3: ['b0.0']
-Class const True: ['cond.0']
-Class add: ['x1.0', 'x2.0', 'y0.0']
-Class phi: ['x2.1']
-Class phi_0: ['x1.1']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "entry"
+        },
+        {
+          "dest": "x2.init",
+          "op": "undef",
+          "type": "int"
+        },
+        {
+          "dest": "x1.init",
+          "op": "undef",
+          "type": "int"
+        },
+        {
+          "dest": "a0.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "b0.0",
+          "op": "const",
+          "type": "int",
+          "value": 3
+        },
+        {
+          "dest": "cond.0",
+          "op": "const",
+          "type": "bool",
+          "value": true
+        },
+        {
+          "args": [
+            "cond.0"
+          ],
+          "labels": [
+            "block1",
+            "block2"
+          ],
+          "op": "br"
+        },
+        {
+          "label": "block1"
+        },
+        {
+          "args": [
+            "a0.0",
+            "b0.0"
+          ],
+          "dest": "x1.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x2.init"
+          ],
+          "dest": "x2.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x1.0"
+          ],
+          "dest": "x1.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "labels": [
+            "merge"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "block2"
+        },
+        {
+          "args": [
+            "a0.0",
+            "b0.0"
+          ],
+          "dest": "x1.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x1.0"
+          ],
+          "dest": "x2.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x1.init"
+          ],
+          "dest": "x1.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "labels": [
+            "merge"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "merge"
+        },
+        {
+          "args": [
+            "a0.0",
+            "b0.0"
+          ],
+          "dest": "x1.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 4 - tests/control.bril # differing: tests/control.out
--- tests/cycles.out2025-04-28 01:12:14.669673892 -0400
+++ /tmp/tmpaenzw4292025-04-28 04:06:09.056639933 -0400
@@ -1,13 +1,175 @@
-Congruence classes for function main:
-Class const 0: ['a.0', 'y.0']
-Class const 1: ['one.0']
-Class const 10: ['ten.0']
-Class id: ['x.0']
-Class add: ['not_y.0']
-Class lt: ['not_c.0']
-Class phi: ['x.1']
-Class add_0: ['y.2']
-Class id_0: ['x.2']
-Class lt_0: ['c.1']
-Class phi_0: ['y.1']
-Class phi_1: ['c.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "c.init",
+          "op": "undef",
+          "type": "bool"
+        },
+        {
+          "dest": "a.0",
+          "op": "const",
+          "type": "int",
+          "value": 0
+        },
+        {
+          "dest": "one.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "ten.0",
+          "op": "const",
+          "type": "int",
+          "value": 10
+        },
+        {
+          "args": [
+            "a.0"
+          ],
+          "dest": "x.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "dest": "a.0",
+          "op": "const",
+          "type": "int",
+          "value": 0
+        },
+        {
+          "args": [
+            "one.0",
+            "x.0"
+          ],
+          "dest": "not_y.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "a.0",
+            "ten.0"
+          ],
+          "dest": "not_c.0",
+          "op": "lt",
+          "type": "bool"
+        },
+        {
+          "args": [
+            "a.0"
+          ],
+          "dest": "y.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x.0"
+          ],
+          "dest": "x.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "c.init"
+          ],
+          "dest": "c.0",
+          "op": "id",
+          "type": "bool"
+        },
+        {
+          "labels": [
+            "loop"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "loop"
+        },
+        {
+          "args": [
+            "one.0",
+            "x.1"
+          ],
+          "dest": "y.2",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "y.2",
+            "ten.0"
+          ],
+          "dest": "c.1",
+          "op": "lt",
+          "type": "bool"
+        },
+        {
+          "args": [
+            "c.1"
+          ],
+          "labels": [
+            "then",
+            "end"
+          ],
+          "op": "br"
+        },
+        {
+          "label": "then"
+        },
+        {
+          "args": [
+            "y.2"
+          ],
+          "dest": "x.2",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "y.2"
+          ],
+          "dest": "y.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x.2"
+          ],
+          "dest": "x.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "c.1"
+          ],
+          "dest": "c.0",
+          "op": "id",
+          "type": "bool"
+        },
+        {
+          "labels": [
+            "loop"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "end"
+        },
+        {
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 5 - tests/cycles.bril # differing: tests/cycles.out
--- tests/cycles_hard.out2025-04-28 01:12:14.769673862 -0400
+++ /tmp/tmpp6v9hudt2025-04-28 04:06:09.156639895 -0400
@@ -1,16 +1,224 @@
-Congruence classes for function main:
-Class const 0: ['a.0']
-Class const 1: ['one.0']
-Class const 2: ['two.0']
-Class const 10: ['ten.0']
-Class id: ['x.0', 'y.0']
-Class phi: ['x.1']
-Class add: ['p.1']
-Class lt: ['c.1']
-Class phi_0: ['c.0']
-Class id_0: ['x.2']
-Class phi_1: ['p.0']
-Class add_0: ['q.1']
-Class id_0_0: ['y.2']
-Class phi_1_0: ['q.0']
-Class phi_2: ['y.1']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "q.init",
+          "op": "undef",
+          "type": "int"
+        },
+        {
+          "dest": "p.init",
+          "op": "undef",
+          "type": "int"
+        },
+        {
+          "dest": "c.init",
+          "op": "undef",
+          "type": "bool"
+        },
+        {
+          "dest": "a.0",
+          "op": "const",
+          "type": "int",
+          "value": 0
+        },
+        {
+          "dest": "one.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "two.0",
+          "op": "const",
+          "type": "int",
+          "value": 2
+        },
+        {
+          "dest": "ten.0",
+          "op": "const",
+          "type": "int",
+          "value": 10
+        },
+        {
+          "args": [
+            "a.0"
+          ],
+          "dest": "x.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "a.0"
+          ],
+          "dest": "x.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x.0"
+          ],
+          "dest": "y.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x.0"
+          ],
+          "dest": "x.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "q.init"
+          ],
+          "dest": "q.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "p.init"
+          ],
+          "dest": "p.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "c.init"
+          ],
+          "dest": "c.0",
+          "op": "id",
+          "type": "bool"
+        },
+        {
+          "labels": [
+            "loop"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "loop"
+        },
+        {
+          "args": [
+            "one.0",
+            "x.1"
+          ],
+          "dest": "p.1",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "two.0",
+            "y.1"
+          ],
+          "dest": "q.1",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "p.1",
+            "ten.0"
+          ],
+          "dest": "c.1",
+          "op": "lt",
+          "type": "bool"
+        },
+        {
+          "args": [
+            "c.1"
+          ],
+          "labels": [
+            "then",
+            "end"
+          ],
+          "op": "br"
+        },
+        {
+          "label": "then"
+        },
+        {
+          "args": [
+            "p.1"
+          ],
+          "dest": "x.2",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "q.1"
+          ],
+          "dest": "y.2",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "y.2"
+          ],
+          "dest": "y.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x.2"
+          ],
+          "dest": "x.1",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "q.1"
+          ],
+          "dest": "q.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "p.1"
+          ],
+          "dest": "p.0",
+          "op": "id",
+          "type": "int"
+        },
+        {
+          "args": [
+            "c.1"
+          ],
+          "dest": "c.0",
+          "op": "id",
+          "type": "bool"
+        },
+        {
+          "labels": [
+            "loop"
+          ],
+          "op": "jmp"
+        },
+        {
+          "label": "end"
+        },
+        {
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 6 - tests/cycles_hard.bril # differing: tests/cycles_hard.out
--- tests/sensitivity.out2025-04-28 01:12:14.859673832 -0400
+++ /tmp/tmpkq4czfxv2025-04-28 04:06:09.246639862 -0400
@@ -1,5 +1,46 @@
-Congruence classes for function main:
-Class const 1: ['x1.0']
-Class const 2: ['x2.0']
-Class sub: ['t3.0']
-Class sub_0: ['t4.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "x1.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "x2.0",
+          "op": "const",
+          "type": "int",
+          "value": 2
+        },
+        {
+          "args": [
+            "x1.0",
+            "x2.0"
+          ],
+          "dest": "t3.0",
+          "op": "sub",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x2.0",
+            "x1.0"
+          ],
+          "dest": "t4.0",
+          "op": "sub",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 7 - tests/sensitivity.bril # differing: tests/sensitivity.out
--- tests/transitive.out2025-04-28 01:12:14.949673801 -0400
+++ /tmp/tmp1k7moktq2025-04-28 04:06:09.336639827 -0400
@@ -1,8 +1,94 @@
-Congruence classes for function main:
-Class const 0: ['x.0']
-Class const 1: ['y.0']
-Class const 2: ['z.0']
-Class const 3: ['w.0']
-Class add: ['a.0', 'b.0']
-Class add_0: ['f.0', 'g.0']
-Class add_0_0: ['d.0', 'e.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "x.0",
+          "op": "const",
+          "type": "int",
+          "value": 0
+        },
+        {
+          "dest": "y.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "z.0",
+          "op": "const",
+          "type": "int",
+          "value": 2
+        },
+        {
+          "dest": "w.0",
+          "op": "const",
+          "type": "int",
+          "value": 3
+        },
+        {
+          "args": [
+            "x.0",
+            "y.0"
+          ],
+          "dest": "a.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "x.0",
+            "y.0"
+          ],
+          "dest": "a.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "a.0",
+            "z.0"
+          ],
+          "dest": "d.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "a.0",
+            "z.0"
+          ],
+          "dest": "d.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "d.0",
+            "w.0"
+          ],
+          "dest": "f.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "d.0",
+            "w.0"
+          ],
+          "dest": "f.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 8 - tests/transitive.bril # differing: tests/transitive.out
--- tests/unrelated.out2025-04-28 01:12:15.039673772 -0400
+++ /tmp/tmpj3ely3a32025-04-28 04:06:09.426639793 -0400
@@ -1,6 +1,55 @@
-Congruence classes for function main:
-Class const 1: ['x1.0']
-Class const 2: ['x2.0']
-Class add: ['t1.0']
-Class add_0: ['t3.0']
-Class add_0_0: ['t4.0']
+{
+  "functions": [
+    {
+      "instrs": [
+        {
+          "label": "b1"
+        },
+        {
+          "dest": "x1.0",
+          "op": "const",
+          "type": "int",
+          "value": 1
+        },
+        {
+          "dest": "x2.0",
+          "op": "const",
+          "type": "int",
+          "value": 2
+        },
+        {
+          "args": [
+            "x1.0",
+            "x2.0"
+          ],
+          "dest": "t1.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "t1.0",
+            "x1.0"
+          ],
+          "dest": "t3.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [
+            "t1.0",
+            "x2.0"
+          ],
+          "dest": "t4.0",
+          "op": "add",
+          "type": "int"
+        },
+        {
+          "args": [],
+          "op": "ret"
+        }
+      ],
+      "name": "main"
+    }
+  ]
+}
not ok 9 - tests/unrelated.bril # differing: tests/unrelated.out
turnt --diff tests/*.bril
1..9
ok 1 - tests/aliases.bril
ok 2 - tests/basic.bril
ok 3 - tests/commute.bril
--- tests/control.out2025-04-28 01:12:14.579673919 -0400
+++ /tmp/tmpyi6mocil2025-04-28 04:06:19.686634917 -0400
@@ -3,5 +3,5 @@
Class const 3: ['b0.0']
Class const True: ['cond.0']
Class add: ['x1.0', 'x2.0', 'y0.0']
-Class phi: ['x2.1']
-Class phi_0: ['x1.1']
+Class phi_main: ['x2.1']
+Class phi_main_0: ['x1.1']
not ok 4 - tests/control.bril # differing: tests/control.out
--- tests/cycles.out2025-04-28 01:12:14.669673892 -0400
+++ /tmp/tmpdylgo0252025-04-28 04:06:19.776634889 -0400
@@ -5,9 +5,9 @@
Class id: ['x.0']
Class add: ['not_y.0']
Class lt: ['not_c.0']
-Class phi: ['x.1']
+Class phi_main: ['x.1']
Class add_0: ['y.2']
Class id_0: ['x.2']
Class lt_0: ['c.1']
-Class phi_0: ['y.1']
-Class phi_1: ['c.0']
+Class phi_main_0: ['y.1']
+Class phi_main_1: ['c.0']
not ok 5 - tests/cycles.bril # differing: tests/cycles.out
--- tests/cycles_hard.out2025-04-28 01:12:14.769673862 -0400
+++ /tmp/tmphn_awdyj2025-04-28 04:06:19.876634858 -0400
@@ -4,13 +4,13 @@
Class const 2: ['two.0']
Class const 10: ['ten.0']
Class id: ['x.0', 'y.0']
-Class phi: ['x.1']
+Class phi_main: ['x.1']
Class add: ['p.1']
Class lt: ['c.1']
-Class phi_0: ['c.0']
+Class phi_main_0: ['c.0']
Class id_0: ['x.2']
-Class phi_1: ['p.0']
+Class phi_main_1: ['p.0']
Class add_0: ['q.1']
Class id_0_0: ['y.2']
-Class phi_1_0: ['q.0']
-Class phi_2: ['y.1']
+Class phi_main_1_0: ['q.0']
+Class phi_main_2: ['y.1']
not ok 6 - tests/cycles_hard.bril # differing: tests/cycles_hard.out
ok 7 - tests/sensitivity.bril
ok 8 - tests/transitive.bril
ok 9 - tests/unrelated.bril
turnt --diff tests/*.bricd cs6120/finalturnt --diff tests/*.bricd cs6120/finalturnt --diff tests/*.bricd ../..
cd ../.turnt --diff tests/*.bricd cs6120/finalturnt --diff tests/*.bribril2json < cs6120/final/tests/basic.bril | python cs6120/final/gvn.py | bril2txaliases.bril | python cs6120/final/gvn.py | bril2txt
cd ../.bril2json < cs6120/final/tests/aliases.brl | python cs6120/final/gvn.py | bril2txt
turnt --diff tests/*.bricd cs6120/finalsh cs6120/final/test_gvn.shgit puscommit -m "works on all benchmarksadd sh cs6120/final/test_gvn.shbril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3 2
sh cs6120/final/test_gvn.sh
benchmarks/core/ackermann.bril
FAIL (out) benchmarks/core/ackermann.bril 509
benchmarks/core/armstrong.bril
FAIL (out) benchmarks/core/armstrong.bril true
benchmarks/core/bbs.bril
FAIL (out) benchmarks/core/bbs.bril 1
1
0
0
1
0
benchmarks/core/binary-fmt.bril
FAIL (out) benchmarks/core/binary-fmt.bril 1
0
0
0
0
0
0
0
benchmarks/core/binpow.bril
FAIL (out) benchmarks/core/binpow.bril 2048
benchmarks/core/bitshift.bril
FAIL (out) benchmarks/core/bitshift.bril 96
625
benchmarks/core/bitwise-ops.bril
FAIL (out) benchmarks/core/bitwise-ops.bril 7
benchmarks/core/catalan.bril
FAIL (out) benchmarks/core/catalan.bril 16796
benchmarks/core/check-primes.bril
FAIL (out) benchmarks/core/check-primes.bril 0
1
1
0
1
0
1
0
0
0
1
0
1
0
0
0
1
0
1
0
0
0
1
0
0
0
0
0
1
0
1
0
0
0
0
0
1
0
0
0
1
0
1
0
0
0
1
0
0
benchmarks/core/collatz.bril
FAIL (out) benchmarks/core/collatz.bril 7
22
11
34
17
52
26
13
40
20
10
5
16
8
4
2
1
benchmarks/core/combination.bril
FAIL (out) benchmarks/core/combination.bril 220
benchmarks/core/delannoy.bril
^C
^C
sh cs6120/final/test_gvn.shcd ../.sh cs6120/final/test_gvn.sh
benchmarks/core/ackermann.bril
benchmarks/core/armstrong.bril
benchmarks/core/bbs.bril
benchmarks/core/binary-fmt.bril
benchmarks/core/binpow.bril
benchmarks/core/bitshift.bril
benchmarks/core/bitwise-ops.bril
benchmarks/core/catalan.bril
benchmarks/core/check-primes.bril
benchmarks/core/collatz.bril
benchmarks/core/combination.bril
benchmarks/core/delannoy.bril
benchmarks/core/digital-root.bril
benchmarks/core/euclid.bril
benchmarks/core/fact.bril
benchmarks/core/factors.bril
benchmarks/core/fib_recursive.bril
benchmarks/core/fitsinside.bril
benchmarks/core/fizz-buzz.bril
benchmarks/core/gcd.bril
benchmarks/core/gebmm.bril
FAIL (out) benchmarks/core/gebmm.bril 188
benchmarks/core/geometric-sum.bril
benchmarks/core/hamming.bril
benchmarks/core/hanoi.bril
benchmarks/core/is-decreasing.bril
benchmarks/core/karatsuba.bril
benchmarks/core/lcm.bril
benchmarks/core/loopfact.bril
benchmarks/core/mccarthy91.bril
benchmarks/core/mod_inv.bril
benchmarks/core/mod_pow.bril
benchmarks/core/montgomery.bril
benchmarks/core/orders.bril
benchmarks/core/palindrome.bril
benchmarks/core/pascals-row.bril
benchmarks/core/perfect.bril
benchmarks/core/permutation.bril
benchmarks/core/primes-between.bril
benchmarks/core/pythagorean_triple.bril
benchmarks/core/quadratic.bril
benchmarks/core/recfact.bril
benchmarks/core/rectangles-area-difference.bril
benchmarks/core/relative-primes.bril
benchmarks/core/reverse.bril
benchmarks/core/rot13.bril
benchmarks/core/sqrt_bin_search.bril
benchmarks/core/sum-bits.bril
benchmarks/core/sum-check.bril
benchmarks/core/sum-digits.bril
benchmarks/core/sum-divisors.bril
benchmarks/core/sum-sq-diff.bril
benchmarks/core/totient.bril
benchmarks/core/up-arrow.bril
sh cs6120/final/test_gvn.shcd ../.turnt --diff tests/*.bricd cs6120/finalturnt --diff tests/*.bribril2json < cs6120/final/tests/basic.bril | python cs6120/final/gvn.py | bril2txaliases.bril | python cs6120/final/gvn.py | bril2txt
cd ../.bril2json < cs6120/final/tests/aliases.bril | python cs6120/final/gvn.py | bril2txt
cd ../.bril2json < cs6120/final/tests/aliases.brl | python cs6120/final/gvn.py | bril2txt
turnt --diff tests/*.bricd cs6120/finalsh cs6120/final/test_gvn.shgit puscommit -m "works on all benchmarksadd sh cs6120/final/test_gvn.shbril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3
{
"functions": [
{
"args": [
{
"name": "a",
"type": "int"
},
{
"name": "b",
"type": "int"
},
{
"name": "dim1",
"type": "int"
},
{
"name": "dim2",
"type": "int"
},
{
"name": "dim3",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "k_lt_dim2.init",
"op": "undef",
"type": "bool"
},
{
"dest": "k.init",
"op": "undef",
"type": "int"
},
{
"dest": "j_lt_dim3.init",
"op": "undef",
"type": "bool"
},
{
"dest": "j.init",
"op": "undef",
"type": "int"
},
{
"dest": "index.init",
"op": "undef",
"type": "int"
},
{
"dest": "i_lt_dim1.init",
"op": "undef",
"type": "bool"
},
{
"dest": "dp_bit.init",
"op": "undef",
"type": "int"
},
{
"dest": "dot_product_odd.init",
"op": "undef",
"type": "bool"
},
{
"dest": "dot_product.init",
"op": "undef",
"type": "int"
},
{
"dest": "b_bit.init",
"op": "undef",
"type": "int"
},
{
"dest": "a_bit_b_bit.init",
"op": "undef",
"type": "int"
},
{
"dest": "a_bit.init",
"op": "undef",
"type": "int"
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"dest": "i.0",
"op": "const",
"type": "int",
"value": -1
},
{
"dest": "dot_product.2",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"dot_product.2"
],
"dest": "output.1",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.init"
],
"dest": "k_lt_dim2.0",
"op": "id",
"type": "bool"
},
{
"args": [
"k.init"
],
"dest": "k.0",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.init"
],
"dest": "j_lt_dim3.0",
"op": "id",
"type": "bool"
},
{
"args": [
"j.init"
],
"dest": "j.0",
"op": "id",
"type": "int"
},
{
"args": [
"index.init"
],
"dest": "index.0",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_dim1.init"
],
"dest": "i_lt_dim1.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.init"
],
"dest": "dp_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.init"
],
"dest": "dot_product_odd.0",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.init"
],
"dest": "dot_product.0",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.init"
],
"dest": "b_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.init"
],
"dest": "a_bit_b_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.init"
],
"dest": "a_bit.0",
"op": "id",
"type": "int"
},
{
"labels": [
"row_loop"
],
"op": "jmp"
},
{
"label": "row_loop"
},
{
"dest": "i.0",
"op": "const",
"type": "int",
"value": -1
},
{
"args": [
"i.1",
"one.0"
],
"dest": "i.2",
"op": "add",
"type": "int"
},
{
"args": [
"i.2",
"dim1"
],
"dest": "i_lt_dim1.1",
"op": "lt",
"type": "bool"
},
{
"args": [
"output.1"
],
"dest": "output.2",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.0"
],
"dest": "k_lt_dim2.1",
"op": "id",
"type": "bool"
},
{
"args": [
"k.0"
],
"dest": "k.1",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.0"
],
"dest": "j_lt_dim3.1",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "j.2",
"op": "id",
"type": "int"
},
{
"args": [
"index.0"
],
"dest": "index.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.0"
],
"dest": "dp_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.0"
],
"dest": "dot_product_odd.1",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.0"
],
"dest": "dot_product.1",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.0"
],
"dest": "b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.0"
],
"dest": "a_bit_b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.0"
],
"dest": "a_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_dim1.1"
],
"labels": [
"col_loop",
"return"
],
"op": "br"
},
{
"label": "col_loop"
},
{
"dest": "i.0",
"op": "const",
"type": "int",
"value": -1
},
{
"args": [
"j.2",
"one.0"
],
"dest": "j.3",
"op": "add",
"type": "int"
},
{
"dest": "dot_product.2",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"j.3",
"dim3"
],
"dest": "j_lt_dim3.2",
"op": "lt",
"type": "bool"
},
{
"args": [
"output.2"
],
"dest": "output.1",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.1"
],
"dest": "k_lt_dim2.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "k.0",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.2"
],
"dest": "j_lt_dim3.0",
"op": "id",
"type": "bool"
},
{
"args": [
"j.3"
],
"dest": "j.0",
"op": "id",
"type": "int"
},
{
"args": [
"index.1"
],
"dest": "index.0",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_dim1.1"
],
"dest": "i_lt_dim1.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.1"
],
"dest": "dp_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.1"
],
"dest": "dot_product_odd.0",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.2"
],
"dest": "dot_product.0",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.1"
],
"dest": "b_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.1"
],
"dest": "a_bit_b_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.1"
],
"dest": "a_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.1"
],
"dest": "k_lt_dim2.2",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product.2"
],
"dest": "dot_product.3",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.1"
],
"dest": "b_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.1"
],
"dest": "a_bit_b_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.1"
],
"dest": "a_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.2"
],
"labels": [
"inner_loop",
"row_loop"
],
"op": "br"
},
{
"label": "inner_loop"
},
{
"args": [
"i.1",
"one.0"
],
"dest": "i.2",
"op": "add",
"type": "int"
},
{
"args": [
"i.2",
"dim2"
],
"dest": "k_lt_dim2.3",
"op": "lt",
"type": "bool"
},
{
"args": [
"k_lt_dim2.3"
],
"labels": [
"multiply",
"end_col"
],
"op": "br"
},
{
"label": "multiply"
},
{
"args": [
"a",
"dim2",
"i.2",
"i.2"
],
"dest": "a_bit.3",
"funcs": [
"mat_bitsel"
],
"op": "call",
"type": "int"
},
{
"args": [
"b",
"dim3",
"i.2",
"j.3"
],
"dest": "b_bit.3",
"funcs": [
"mat_bitsel"
],
"op": "call",
"type": "int"
},
{
"args": [
"a_bit.3",
"b_bit.3"
],
"dest": "a_bit_b_bit.3",
"op": "mul",
"type": "int"
},
{
"args": [
"a_bit_b_bit.3",
"dot_product.3"
],
"dest": "dot_product.4",
"op": "add",
"type": "int"
},
{
"args": [
"k_lt_dim2.3"
],
"dest": "k_lt_dim2.2",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product.4"
],
"dest": "dot_product.3",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.3"
],
"dest": "b_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.3"
],
"dest": "a_bit_b_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.3"
],
"dest": "a_bit.2",
"op": "id",
"type": "int"
},
{
"labels": [
"inner_loop"
],
"op": "jmp"
},
{
"label": "end_col"
},
{
"args": [
"dot_product.3"
],
"dest": "dot_product_odd.2",
"funcs": [
"is_odd"
],
"op": "call",
"type": "bool"
},
{
"args": [
"output.2"
],
"dest": "output.2",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.3"
],
"dest": "k_lt_dim2.1",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "k.1",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.2"
],
"dest": "j_lt_dim3.1",
"op": "id",
"type": "bool"
},
{
"args": [
"j.3"
],
"dest": "j.2",
"op": "id",
"type": "int"
},
{
"args": [
"index.1"
],
"dest": "index.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.1"
],
"dest": "dp_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.2"
],
"dest": "dot_product_odd.1",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.3"
],
"dest": "dot_product.1",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.2"
],
"dest": "b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.2"
],
"dest": "a_bit_b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.2"
],
"dest": "a_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.2"
],
"labels": [
"add_dp",
"col_loop"
],
"op": "br"
},
{
"label": "add_dp"
},
{
"args": [
"i.2",
"j.3",
"dim3"
],
"dest": "index.2",
"funcs": [
"mat_packed_index"
],
"op": "call",
"type": "int"
},
{
"args": [
"index.2"
],
"dest": "dp_bit.2",
"funcs": [
"pow2"
],
"op": "call",
"type": "int"
},
{
"args": [
"dp_bit.2",
"output.2"
],
"dest": "output.3",
"op": "add",
"type": "int"
},
{
"args": [
"output.3"
],
"dest": "output.2",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.3"
],
"dest": "k_lt_dim2.1",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "k.1",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.2"
],
"dest": "j_lt_dim3.1",
"op": "id",
"type": "bool"
},
{
"args": [
"j.3"
],
"dest": "j.2",
"op": "id",
"type": "int"
},
{
"args": [
"index.2"
],
"dest": "index.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.2"
],
"dest": "dp_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.2"
],
"dest": "dot_product_odd.1",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.3"
],
"dest": "dot_product.1",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.2"
],
"dest": "b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.2"
],
"dest": "a_bit_b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.2"
],
"dest": "a_bit.1",
"op": "id",
"type": "int"
},
{
"labels": [
"col_loop"
],
"op": "jmp"
},
{
"label": "return"
},
{
"args": [
"output.1"
],
"op": "print"
},
{
"args": [],
"op": "ret"
}
],
"name": "main"
},
{
"args": [
{
"name": "m",
"type": "int"
},
{
"name": "cols",
"type": "int"
},
{
"name": "i",
"type": "int"
},
{
"name": "j",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"i",
"j",
"cols"
],
"dest": "index.0",
"funcs": [
"mat_packed_index"
],
"op": "call",
"type": "int"
},
{
"args": [
"m",
"index.0"
],
"dest": "ret_val.0",
"funcs": [
"bitsel"
],
"op": "call",
"type": "bool"
},
{
"args": [
"ret_val.0"
],
"labels": [
"ret_one",
"ret_zero"
],
"op": "br"
},
{
"label": "ret_one"
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"one.0"
],
"op": "ret"
},
{
"label": "ret_zero"
},
{
"dest": "zero.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"zero.0"
],
"op": "ret"
}
],
"name": "mat_bitsel",
"type": "int"
},
{
"args": [
{
"name": "i",
"type": "int"
},
{
"name": "j",
"type": "int"
},
{
"name": "cols",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"cols",
"i"
],
"dest": "index.0",
"op": "mul",
"type": "int"
},
{
"args": [
"index.0",
"j"
],
"dest": "index.1",
"op": "add",
"type": "int"
},
{
"args": [
"index.1"
],
"op": "ret"
}
],
"name": "mat_packed_index",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "i_lt_n.init",
"op": "undef",
"type": "bool"
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"dest": "two.0",
"op": "const",
"type": "int",
"value": 2
},
{
"dest": "i.0",
"op": "const",
"type": "int",
"value": 0
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"one.0"
],
"dest": "result.1",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_n.init"
],
"dest": "i_lt_n.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "loop"
},
{
"args": [
"i.1",
"n"
],
"dest": "i_lt_n.1",
"op": "lt",
"type": "bool"
},
{
"args": [
"i_lt_n.1"
],
"labels": [
"multiply",
"return"
],
"op": "br"
},
{
"label": "multiply"
},
{
"args": [
"result.1",
"two.0"
],
"dest": "result.2",
"op": "mul",
"type": "int"
},
{
"args": [
"i.1",
"one.0"
],
"dest": "i.2",
"op": "add",
"type": "int"
},
{
"args": [
"result.2"
],
"dest": "result.1",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_n.1"
],
"dest": "i_lt_n.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "return"
},
{
"args": [
"result.1"
],
"op": "ret"
}
],
"name": "pow2",
"type": "int"
},
{
"args": [
{
"name": "m",
"type": "int"
},
{
"name": "i",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "i_eq_zero.init",
"op": "undef",
"type": "bool"
},
{
"dest": "zero.0",
"op": "const",
"type": "int",
"value": 0
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"dest": "two.0",
"op": "const",
"type": "int",
"value": 2
},
{
"args": [
"m"
],
"dest": "m.0",
"op": "id",
"type": "int"
},
{
"args": [
"i_eq_zero.init"
],
"dest": "i_eq_zero.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "loop"
},
{
"args": [
"i.0",
"zero.0"
],
"dest": "i_eq_zero.1",
"op": "eq",
"type": "bool"
},
{
"args": [
"i_eq_zero.1"
],
"labels": [
"return",
"divide"
],
"op": "br"
},
{
"label": "divide"
},
{
"args": [
"m.0",
"two.0"
],
"dest": "m.1",
"op": "div",
"type": "int"
},
{
"args": [
"i.0",
"one.0"
],
"dest": "i.1",
"op": "sub",
"type": "int"
},
{
"args": [
"m.1"
],
"dest": "m.0",
"op": "id",
"type": "int"
},
{
"args": [
"i_eq_zero.1"
],
"dest": "i_eq_zero.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.1"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "return"
},
{
"args": [
"m.0"
],
"dest": "m_bit.0",
"funcs": [
"is_odd"
],
"op": "call",
"type": "bool"
},
{
"args": [
"m_bit.0"
],
"op": "ret"
}
],
"name": "bitsel",
"type": "bool"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "zero.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"n",
"zero.0"
],
"dest": "is_neg.0",
"op": "lt",
"type": "bool"
},
{
"args": [
"n"
],
"dest": "n.1",
"op": "id",
"type": "int"
},
{
"args": [
"is_neg.0"
],
"labels": [
"negative",
"positive"
],
"op": "br"
},
{
"label": "negative"
},
{
"args": [
"zero.0",
"n"
],
"dest": "n.0",
"op": "sub",
"type": "int"
},
{
"args": [
"n.0"
],
"dest": "n.1",
"op": "id",
"type": "int"
},
{
"labels": [
"positive"
],
"op": "jmp"
},
{
"label": "positive"
},
{
"args": [
"n.1"
],
"op": "ret"
}
],
"name": "abs",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"n"
],
"dest": "n0.0",
"funcs": [
"abs"
],
"op": "call",
"type": "int"
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"dest": "two.0",
"op": "const",
"type": "int",
"value": 2
},
{
"args": [
"n0.0",
"one.0"
],
"dest": "np1.0",
"op": "add",
"type": "int"
},
{
"args": [
"n0.0",
"two.0"
],
"dest": "half.0",
"op": "div",
"type": "int"
},
{
"args": [
"np1.0",
"two.0"
],
"dest": "np1_half.0",
"op": "div",
"type": "int"
},
{
"args": [
"half.0",
"np1_half.0"
],
"dest": "ret_val.0",
"op": "eq",
"type": "bool"
},
{
"args": [
"ret_val.0"
],
"op": "ret"
}
],
"name": "is_even",
"type": "bool"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"n"
],
"dest": "is_even.0",
"funcs": [
"is_even"
],
"op": "call",
"type": "bool"
},
{
"args": [
"is_even.0"
],
"dest": "ret_val.0",
"op": "not",
"type": "bool"
},
{
"args": [
"ret_val.0"
],
"op": "ret"
}
],
"name": "is_odd",
"type": "bool"
}
]
}
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py
sh cs6120/final/test_gvn.shcd ../.turnt --diff tests/*.bricd ../.sh cs6120/final/test_gvn.shbril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | bribrili -p 2791 57 4 3 2
^C
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_pow2
phi_pow2
phi_pow2
phi_bitsel
phi_bitsel
phi_bitsel
phi_abs
{
"functions": [
{
"args": [
{
"name": "a",
"type": "int"
},
{
"name": "b",
"type": "int"
},
{
"name": "dim1",
"type": "int"
},
{
"name": "dim2",
"type": "int"
},
{
"name": "dim3",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "k_lt_dim2.init",
"op": "undef",
"type": "bool"
},
{
"dest": "k.init",
"op": "undef",
"type": "int"
},
{
"dest": "j_lt_dim3.init",
"op": "undef",
"type": "bool"
},
{
"dest": "j.init",
"op": "undef",
"type": "int"
},
{
"dest": "index.init",
"op": "undef",
"type": "int"
},
{
"dest": "i_lt_dim1.init",
"op": "undef",
"type": "bool"
},
{
"dest": "dp_bit.init",
"op": "undef",
"type": "int"
},
{
"dest": "dot_product_odd.init",
"op": "undef",
"type": "bool"
},
{
"dest": "dot_product.init",
"op": "undef",
"type": "int"
},
{
"dest": "b_bit.init",
"op": "undef",
"type": "int"
},
{
"dest": "a_bit_b_bit.init",
"op": "undef",
"type": "int"
},
{
"dest": "a_bit.init",
"op": "undef",
"type": "int"
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"dest": "i.0",
"op": "const",
"type": "int",
"value": -1
},
{
"dest": "dot_product.2",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"dot_product.2"
],
"dest": "output.1",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.init"
],
"dest": "k_lt_dim2.0",
"op": "id",
"type": "bool"
},
{
"args": [
"k.init"
],
"dest": "k.0",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.init"
],
"dest": "j_lt_dim3.0",
"op": "id",
"type": "bool"
},
{
"args": [
"j.init"
],
"dest": "j.0",
"op": "id",
"type": "int"
},
{
"args": [
"index.init"
],
"dest": "index.0",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_dim1.init"
],
"dest": "i_lt_dim1.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.init"
],
"dest": "dp_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.init"
],
"dest": "dot_product_odd.0",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.init"
],
"dest": "dot_product.0",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.init"
],
"dest": "b_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.init"
],
"dest": "a_bit_b_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.init"
],
"dest": "a_bit.0",
"op": "id",
"type": "int"
},
{
"labels": [
"row_loop"
],
"op": "jmp"
},
{
"label": "row_loop"
},
{
"dest": "i.0",
"op": "const",
"type": "int",
"value": -1
},
{
"args": [
"i.1",
"one.0"
],
"dest": "i.2",
"op": "add",
"type": "int"
},
{
"args": [
"i.2",
"dim1"
],
"dest": "i_lt_dim1.1",
"op": "lt",
"type": "bool"
},
{
"args": [
"output.1"
],
"dest": "output.2",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.0"
],
"dest": "k_lt_dim2.1",
"op": "id",
"type": "bool"
},
{
"args": [
"k.0"
],
"dest": "k.1",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.0"
],
"dest": "j_lt_dim3.1",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "j.2",
"op": "id",
"type": "int"
},
{
"args": [
"index.0"
],
"dest": "index.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.0"
],
"dest": "dp_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.0"
],
"dest": "dot_product_odd.1",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.0"
],
"dest": "dot_product.1",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.0"
],
"dest": "b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.0"
],
"dest": "a_bit_b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.0"
],
"dest": "a_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_dim1.1"
],
"labels": [
"col_loop",
"return"
],
"op": "br"
},
{
"label": "col_loop"
},
{
"dest": "i.0",
"op": "const",
"type": "int",
"value": -1
},
{
"args": [
"j.2",
"one.0"
],
"dest": "j.3",
"op": "add",
"type": "int"
},
{
"dest": "dot_product.2",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"j.3",
"dim3"
],
"dest": "j_lt_dim3.2",
"op": "lt",
"type": "bool"
},
{
"args": [
"output.2"
],
"dest": "output.1",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.1"
],
"dest": "k_lt_dim2.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "k.0",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.2"
],
"dest": "j_lt_dim3.0",
"op": "id",
"type": "bool"
},
{
"args": [
"j.3"
],
"dest": "j.0",
"op": "id",
"type": "int"
},
{
"args": [
"index.1"
],
"dest": "index.0",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_dim1.1"
],
"dest": "i_lt_dim1.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.1"
],
"dest": "dp_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.1"
],
"dest": "dot_product_odd.0",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.2"
],
"dest": "dot_product.0",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.1"
],
"dest": "b_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.1"
],
"dest": "a_bit_b_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.1"
],
"dest": "a_bit.0",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.1"
],
"dest": "k_lt_dim2.2",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product.2"
],
"dest": "dot_product.3",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.1"
],
"dest": "b_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.1"
],
"dest": "a_bit_b_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.1"
],
"dest": "a_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.2"
],
"labels": [
"inner_loop",
"row_loop"
],
"op": "br"
},
{
"label": "inner_loop"
},
{
"args": [
"i.1",
"one.0"
],
"dest": "i.2",
"op": "add",
"type": "int"
},
{
"args": [
"i.2",
"dim2"
],
"dest": "k_lt_dim2.3",
"op": "lt",
"type": "bool"
},
{
"args": [
"k_lt_dim2.3"
],
"labels": [
"multiply",
"end_col"
],
"op": "br"
},
{
"label": "multiply"
},
{
"args": [
"a",
"dim2",
"i.2",
"i.2"
],
"dest": "a_bit.3",
"funcs": [
"mat_bitsel"
],
"op": "call",
"type": "int"
},
{
"args": [
"b",
"dim3",
"i.2",
"j.3"
],
"dest": "b_bit.3",
"funcs": [
"mat_bitsel"
],
"op": "call",
"type": "int"
},
{
"args": [
"a_bit.3",
"b_bit.3"
],
"dest": "a_bit_b_bit.3",
"op": "mul",
"type": "int"
},
{
"args": [
"a_bit_b_bit.3",
"dot_product.3"
],
"dest": "dot_product.4",
"op": "add",
"type": "int"
},
{
"args": [
"k_lt_dim2.3"
],
"dest": "k_lt_dim2.2",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product.4"
],
"dest": "dot_product.3",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.3"
],
"dest": "b_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.3"
],
"dest": "a_bit_b_bit.2",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.3"
],
"dest": "a_bit.2",
"op": "id",
"type": "int"
},
{
"labels": [
"inner_loop"
],
"op": "jmp"
},
{
"label": "end_col"
},
{
"args": [
"dot_product.3"
],
"dest": "dot_product_odd.2",
"funcs": [
"is_odd"
],
"op": "call",
"type": "bool"
},
{
"args": [
"output.2"
],
"dest": "output.2",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.3"
],
"dest": "k_lt_dim2.1",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "k.1",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.2"
],
"dest": "j_lt_dim3.1",
"op": "id",
"type": "bool"
},
{
"args": [
"j.3"
],
"dest": "j.2",
"op": "id",
"type": "int"
},
{
"args": [
"index.1"
],
"dest": "index.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.1"
],
"dest": "dp_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.2"
],
"dest": "dot_product_odd.1",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.3"
],
"dest": "dot_product.1",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.2"
],
"dest": "b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.2"
],
"dest": "a_bit_b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.2"
],
"dest": "a_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.2"
],
"labels": [
"add_dp",
"col_loop"
],
"op": "br"
},
{
"label": "add_dp"
},
{
"args": [
"i.2",
"j.3",
"dim3"
],
"dest": "index.2",
"funcs": [
"mat_packed_index"
],
"op": "call",
"type": "int"
},
{
"args": [
"index.2"
],
"dest": "dp_bit.2",
"funcs": [
"pow2"
],
"op": "call",
"type": "int"
},
{
"args": [
"dp_bit.2",
"output.2"
],
"dest": "output.3",
"op": "add",
"type": "int"
},
{
"args": [
"output.3"
],
"dest": "output.2",
"op": "id",
"type": "int"
},
{
"args": [
"k_lt_dim2.3"
],
"dest": "k_lt_dim2.1",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "k.1",
"op": "id",
"type": "int"
},
{
"args": [
"j_lt_dim3.2"
],
"dest": "j_lt_dim3.1",
"op": "id",
"type": "bool"
},
{
"args": [
"j.3"
],
"dest": "j.2",
"op": "id",
"type": "int"
},
{
"args": [
"index.2"
],
"dest": "index.1",
"op": "id",
"type": "int"
},
{
"args": [
"dp_bit.2"
],
"dest": "dp_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"dot_product_odd.2"
],
"dest": "dot_product_odd.1",
"op": "id",
"type": "bool"
},
{
"args": [
"dot_product.3"
],
"dest": "dot_product.1",
"op": "id",
"type": "int"
},
{
"args": [
"b_bit.2"
],
"dest": "b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit_b_bit.2"
],
"dest": "a_bit_b_bit.1",
"op": "id",
"type": "int"
},
{
"args": [
"a_bit.2"
],
"dest": "a_bit.1",
"op": "id",
"type": "int"
},
{
"labels": [
"col_loop"
],
"op": "jmp"
},
{
"label": "return"
},
{
"args": [
"output.1"
],
"op": "print"
},
{
"args": [],
"op": "ret"
}
],
"name": "main"
},
{
"args": [
{
"name": "m",
"type": "int"
},
{
"name": "cols",
"type": "int"
},
{
"name": "i",
"type": "int"
},
{
"name": "j",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"i",
"j",
"cols"
],
"dest": "index.0",
"funcs": [
"mat_packed_index"
],
"op": "call",
"type": "int"
},
{
"args": [
"m",
"index.0"
],
"dest": "ret_val.0",
"funcs": [
"bitsel"
],
"op": "call",
"type": "bool"
},
{
"args": [
"ret_val.0"
],
"labels": [
"ret_one",
"ret_zero"
],
"op": "br"
},
{
"label": "ret_one"
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"one.0"
],
"op": "ret"
},
{
"label": "ret_zero"
},
{
"dest": "zero.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"zero.0"
],
"op": "ret"
}
],
"name": "mat_bitsel",
"type": "int"
},
{
"args": [
{
"name": "i",
"type": "int"
},
{
"name": "j",
"type": "int"
},
{
"name": "cols",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"cols",
"i"
],
"dest": "index.0",
"op": "mul",
"type": "int"
},
{
"args": [
"index.0",
"j"
],
"dest": "index.1",
"op": "add",
"type": "int"
},
{
"args": [
"index.1"
],
"op": "ret"
}
],
"name": "mat_packed_index",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "i_lt_n.init",
"op": "undef",
"type": "bool"
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"dest": "two.0",
"op": "const",
"type": "int",
"value": 2
},
{
"dest": "i.0",
"op": "const",
"type": "int",
"value": 0
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"args": [
"one.0"
],
"dest": "result.1",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_n.init"
],
"dest": "i_lt_n.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.0"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "loop"
},
{
"args": [
"i.1",
"n"
],
"dest": "i_lt_n.1",
"op": "lt",
"type": "bool"
},
{
"args": [
"i_lt_n.1"
],
"labels": [
"multiply",
"return"
],
"op": "br"
},
{
"label": "multiply"
},
{
"args": [
"result.1",
"two.0"
],
"dest": "result.2",
"op": "mul",
"type": "int"
},
{
"args": [
"i.1",
"one.0"
],
"dest": "i.2",
"op": "add",
"type": "int"
},
{
"args": [
"result.2"
],
"dest": "result.1",
"op": "id",
"type": "int"
},
{
"args": [
"i_lt_n.1"
],
"dest": "i_lt_n.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.2"
],
"dest": "i.1",
"op": "id",
"type": "int"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "return"
},
{
"args": [
"result.1"
],
"op": "ret"
}
],
"name": "pow2",
"type": "int"
},
{
"args": [
{
"name": "m",
"type": "int"
},
{
"name": "i",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "i_eq_zero.init",
"op": "undef",
"type": "bool"
},
{
"dest": "zero.0",
"op": "const",
"type": "int",
"value": 0
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"dest": "two.0",
"op": "const",
"type": "int",
"value": 2
},
{
"args": [
"m"
],
"dest": "m.0",
"op": "id",
"type": "int"
},
{
"args": [
"i_eq_zero.init"
],
"dest": "i_eq_zero.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "loop"
},
{
"args": [
"i.0",
"zero.0"
],
"dest": "i_eq_zero.1",
"op": "eq",
"type": "bool"
},
{
"args": [
"i_eq_zero.1"
],
"labels": [
"return",
"divide"
],
"op": "br"
},
{
"label": "divide"
},
{
"args": [
"m.0",
"two.0"
],
"dest": "m.1",
"op": "div",
"type": "int"
},
{
"args": [
"i.0",
"one.0"
],
"dest": "i.1",
"op": "sub",
"type": "int"
},
{
"args": [
"m.1"
],
"dest": "m.0",
"op": "id",
"type": "int"
},
{
"args": [
"i_eq_zero.1"
],
"dest": "i_eq_zero.0",
"op": "id",
"type": "bool"
},
{
"args": [
"i.1"
],
"dest": "i.0",
"op": "id",
"type": "int"
},
{
"labels": [
"loop"
],
"op": "jmp"
},
{
"label": "return"
},
{
"args": [
"m.0"
],
"dest": "m_bit.0",
"funcs": [
"is_odd"
],
"op": "call",
"type": "bool"
},
{
"args": [
"m_bit.0"
],
"op": "ret"
}
],
"name": "bitsel",
"type": "bool"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"dest": "zero.0",
"op": "const",
"type": "int",
"value": 0
},
{
"args": [
"n",
"zero.0"
],
"dest": "is_neg.0",
"op": "lt",
"type": "bool"
},
{
"args": [
"n"
],
"dest": "n.1",
"op": "id",
"type": "int"
},
{
"args": [
"is_neg.0"
],
"labels": [
"negative",
"positive"
],
"op": "br"
},
{
"label": "negative"
},
{
"args": [
"zero.0",
"n"
],
"dest": "n.0",
"op": "sub",
"type": "int"
},
{
"args": [
"n.0"
],
"dest": "n.1",
"op": "id",
"type": "int"
},
{
"labels": [
"positive"
],
"op": "jmp"
},
{
"label": "positive"
},
{
"args": [
"n.1"
],
"op": "ret"
}
],
"name": "abs",
"type": "int"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"n"
],
"dest": "n0.0",
"funcs": [
"abs"
],
"op": "call",
"type": "int"
},
{
"dest": "one.0",
"op": "const",
"type": "int",
"value": 1
},
{
"dest": "two.0",
"op": "const",
"type": "int",
"value": 2
},
{
"args": [
"n0.0",
"one.0"
],
"dest": "np1.0",
"op": "add",
"type": "int"
},
{
"args": [
"n0.0",
"two.0"
],
"dest": "half.0",
"op": "div",
"type": "int"
},
{
"args": [
"np1.0",
"two.0"
],
"dest": "np1_half.0",
"op": "div",
"type": "int"
},
{
"args": [
"half.0",
"np1_half.0"
],
"dest": "ret_val.0",
"op": "eq",
"type": "bool"
},
{
"args": [
"ret_val.0"
],
"op": "ret"
}
],
"name": "is_even",
"type": "bool"
},
{
"args": [
{
"name": "n",
"type": "int"
}
],
"instrs": [
{
"label": "b1"
},
{
"args": [
"n"
],
"dest": "is_even.0",
"funcs": [
"is_even"
],
"op": "call",
"type": "bool"
},
{
"args": [
"is_even.0"
],
"dest": "ret_val.0",
"op": "not",
"type": "bool"
},
{
"args": [
"ret_val.0"
],
"op": "ret"
}
],
"name": "is_odd",
"type": "bool"
}
]
}
bril2json < benchmarks/core/gebmm.bril | python cs6120/final/gvn.py | brili -p 2791 57 4 3
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
phi_main
Congruence classes for function main:
Class arg_a: ['a']
Class arg_b: ['b']
Class arg_dim1: ['dim1']
Class arg_dim2: ['dim2']
Class arg_dim3: ['dim3']
Class const 1: ['one.0']
Class const -1: ['i.0', 'j.1', 'k.2']
Class const 0: ['dot_product.2', 'output.0']
Class phi_main: ['k.0']
Class add: ['dot_product.4']
Class lt: ['i_lt_dim1.1']
Class call mat_bitsel: ['a_bit.3']
Class mul: ['a_bit_b_bit.3']
Class call is_odd: ['dot_product_odd.2']
Class call mat_packed_index: ['index.2']
Class call pow2: ['dp_bit.2']
Class phi_main_0: ['dp_bit.1']
Class add_0: ['output.3']
Class phi_main_1: ['output.2']
Class phi_main_2: ['output.1']
Class phi_main_3: ['a_bit_b_bit.2']
Class add_1: ['j.3']
Class phi_main_4: ['a_bit_b_bit.0']
Class phi_main_3_0: ['dot_product.1']
Class phi_main_5: ['j_lt_dim3.1']
Class phi_main_4_0: ['index.1']
Class phi_main_4_1: ['index.0']
Class phi_main_3_0_0: ['a_bit_b_bit.1']
Class phi_main_5_0: ['dot_product_odd.1']
Class phi_main_3_1: ['k_lt_dim2.2']
Class phi_main_4_2: ['dot_product_odd.0']
Class phi_main_6: ['j.2']
Class phi_main_5_1: ['k.1']
Class phi_main_7: ['i.1', 'k.3']
Class add_1_0: ['i.2', 'k.4']
Class lt_0: ['j_lt_dim3.2']
Class phi_main_7_0: ['j.0']
Class call mat_bitsel_0: ['b_bit.3']
Class phi_main_3_2: ['b_bit.2']
Class phi_main_3_0_0_0: ['b_bit.1']
Class phi_main_4_3: ['b_bit.0']
Class phi_main_3_3: ['a_bit.2']
Class phi_main_3_0_0_1: ['a_bit.1']
Class phi_main_4_4: ['a_bit.0']
Class phi_main_8: ['j_lt_dim3.0']
Class phi_main_5_0_0: ['k_lt_dim2.1']
Class phi_main_9: ['i_lt_dim1.0']
Class phi_main_4_2_0: ['k_lt_dim2.0']
Class phi_main_10: ['dot_product.3']
Class phi_main_11: ['dp_bit.0']
Class phi_main_12: ['dot_product.0']
Class lt_1: ['k_lt_dim2.3']
Congruence classes for function mat_bitsel:
Class arg_m: ['m']
Class arg_cols: ['cols']
Class arg_i: ['i']
Class arg_j: ['j']
Class call mat_packed_index: ['index.0']
Class call bitsel: ['ret_val.0']
Class const 1: ['one.0']
Class const 0: ['zero.0']
Congruence classes for function mat_packed_index:
Class arg_i: ['i']
Class arg_j: ['j']
Class arg_cols: ['cols']
Class mul: ['index.0']
Class add: ['index.1']
phi_pow2
phi_pow2
phi_pow2
Congruence classes for function pow2:
Class arg_n: ['n']
Class const 1: ['one.0', 'result.0']
Class const 2: ['two.0']
Class const 0: ['i.0']
Class phi_pow2: ['i_lt_n.0']
Class lt: ['i_lt_n.1']
Class mul: ['result.2']
Class add: ['i.2']
Class phi_pow2_0: ['i.1']
Class phi_pow2_1: ['result.1']
phi_bitsel
phi_bitsel
phi_bitsel
Congruence classes for function bitsel:
Class arg_m: ['m']
Class arg_i: ['i']
Class const 0: ['zero.0']
Class const 1: ['one.0']
Class const 2: ['two.0']
Class phi_bitsel: ['i_eq_zero.0']
Class eq: ['i_eq_zero.1']
Class div: ['m.1']
Class sub: ['i.1']
Class call is_odd: ['m_bit.0']
Class phi_bitsel_0: ['i.0']
Class phi_bitsel_1: ['m.0']
phi_abs
Congruence classes for function abs:
Class arg_n: ['n']
Class const 0: ['zero.0']
Class lt: ['is_neg.0']
Class sub: ['n.0']
Class phi_abs: ['n.1']
Congruence classes for function is_even:
Class arg_n: ['n']
Class call abs: ['n0.0']
Class const 1: ['one.0']
Class const 2: ['two.0']
Class add: ['np1.0']
Class div: ['half.0']
Class eq: ['ret_val.0']
Class div_0: ['np1_half.0']
Congruence classes for function is_odd:
Class arg_n: ['n']
Class call is_even: ['is_even.0']
Class not: ['ret_val.0']
